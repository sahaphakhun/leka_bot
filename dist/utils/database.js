"use strict";
// Database Connection ‡πÅ‡∏•‡∏∞ Configuration
Object.defineProperty(exports, "__esModule", { value: true });
exports.closeDatabase = exports.initializeDatabase = exports.AppDataSource = void 0;
const typeorm_1 = require("typeorm");
const models_1 = require("@/models");
// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Railway ‡∏´‡∏£‡∏∑‡∏≠ production environment
const getDatabaseConfig = () => {
    if (process.env.DATABASE_URL) {
        // Railway PostgreSQL URL format
        return {
            url: process.env.DATABASE_URL,
            ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
        };
    }
    else {
        // Local development
        return {
            host: process.env.DB_HOST || 'localhost',
            port: parseInt(process.env.DB_PORT || '5432'),
            username: process.env.DB_USERNAME || 'postgres',
            password: process.env.DB_PASSWORD || '',
            database: process.env.DB_NAME || 'leka_bot',
        };
    }
};
exports.AppDataSource = new typeorm_1.DataSource({
    type: 'postgres',
    ...getDatabaseConfig(),
    entities: [models_1.Group, models_1.User, models_1.GroupMember, models_1.Task, models_1.File, models_1.KPIRecord, models_1.RecurringTask],
    migrations: ['src/migrations/*.ts'],
    subscribers: ['src/subscribers/*.ts'],
    synchronize: process.env.NODE_ENV === 'development', // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ development
    logging: process.env.NODE_ENV === 'development',
    extra: {
        // Configuration for connection pool
        max: 20,
        min: 5,
        idle: 10000,
        acquire: 30000,
        connectTimeoutMS: 30000,
    },
});
const initializeDatabase = async () => {
    try {
        await exports.AppDataSource.initialize();
        console.log('‚úÖ Database connected successfully');
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const queryRunner = exports.AppDataSource.createQueryRunner();
        try {
            // ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô schema public
            const existingTablesResult = await queryRunner.query(`
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public'
      `);
            const existingTableNames = existingTablesResult.map((t) => t.table_name);
            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ (‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå)
            const requiredTables = [
                'users',
                'groups',
                'group_members',
                'tasks',
                'task_assignees',
                'task_files',
                'files',
                'kpi_records',
                'recurring_tasks'
            ];
            const hasAllRequired = requiredTables.every(t => existingTableNames.includes(t));
            if (!hasAllRequired) {
                const missing = requiredTables.filter(t => !existingTableNames.includes(t));
                console.log('üîÑ Missing tables detected, synchronizing schema...', { missing });
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏Ñ‡∏µ‡∏°‡∏≤‡∏ï‡∏≤‡∏° entities ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                await exports.AppDataSource.synchronize();
                console.log('‚úÖ Database schema synchronized successfully');
                // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏£‡∏ö
                const finalTables = await queryRunner.query(`
          SELECT table_name 
          FROM information_schema.tables 
          WHERE table_schema = 'public'
          ORDER BY table_name
        `);
                const finalTableNames = finalTables.map((t) => t.table_name);
                const stillMissing = requiredTables.filter(t => !finalTableNames.includes(t));
                if (stillMissing.length > 0) {
                    console.error('‚ùå Missing required tables after synchronize:', stillMissing);
                    throw new Error(`Failed to create required tables: ${stillMissing.join(', ')}`);
                }
                console.log('‚úÖ All required tables created successfully');
            }
            else {
                console.log('‚úÖ All required database tables already exist');
                // ‡∏£‡∏±‡∏ô migrations ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å environment (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏Ñ‡πà development)
                // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤ schema ‡∏à‡∏∞‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö entities
                try {
                    await exports.AppDataSource.runMigrations();
                    console.log('‚úÖ Database migrations completed');
                }
                catch (migrationError) {
                    console.warn('‚ö†Ô∏è Database migrations failed (continuing anyway):', migrationError);
                }
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (‡πÄ‡∏ä‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á)
            await ensureFilesTableColumns(queryRunner);
            await ensureUsersTableColumns(queryRunner);
            await ensureTasksTableColumns(queryRunner);
        }
        finally {
            await queryRunner.release();
        }
    }
    catch (error) {
        console.error('‚ùå Database initialization failed:', error);
        throw error;
    }
};
exports.initializeDatabase = initializeDatabase;
const closeDatabase = async () => {
    if (exports.AppDataSource.isInitialized) {
        await exports.AppDataSource.destroy();
        console.log('‚úÖ Database connection closed');
    }
};
exports.closeDatabase = closeDatabase;
/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á files ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
 * - "storageProvider" varchar NULL
 * - "storageKey" varchar NULL
 */
const ensureFilesTableColumns = async (queryRunner) => {
    try {
        // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á files
        const existingColumnsResult = await queryRunner.query(`
      SELECT column_name
      FROM information_schema.columns
      WHERE table_schema = 'public' AND table_name = 'files'
    `);
        const existingColumnNames = existingColumnsResult.map((r) => r.column_name);
        const alters = [];
        if (!existingColumnNames.includes('storageProvider')) {
            alters.push('ADD COLUMN "storageProvider" varchar');
        }
        if (!existingColumnNames.includes('storageKey')) {
            alters.push('ADD COLUMN "storageKey" varchar');
        }
        if (alters.length > 0) {
            const alterSql = `ALTER TABLE "files" ${alters.join(', ')}`;
            console.log('üîß Applying schema update for files:', alterSql);
            await queryRunner.query(alterSql);
            console.log('‚úÖ Files table columns ensured');
        }
        else {
            console.log('‚úÖ Files table already has required columns');
        }
    }
    catch (error) {
        console.error('‚ùå Failed ensuring files table columns:', error);
        throw error;
    }
};
/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
 * - "settings" jsonb NOT NULL DEFAULT '{}'
 */
const ensureUsersTableColumns = async (queryRunner) => {
    try {
        const existingColumnsResult = await queryRunner.query(`
      SELECT column_name
      FROM information_schema.columns
      WHERE table_schema = 'public' AND table_name = 'users'
    `);
        const existingColumnNames = existingColumnsResult.map((r) => r.column_name);
        if (!existingColumnNames.includes('settings')) {
            const alterSql = `ALTER TABLE "users" ADD COLUMN "settings" jsonb NOT NULL DEFAULT '{}'`;
            console.log('üîß Applying schema update for users:', alterSql);
            await queryRunner.query(alterSql);
            console.log('‚úÖ Users table columns ensured');
        }
        else {
            console.log('‚úÖ Users table already has required columns');
        }
    }
    catch (error) {
        console.error('‚ùå Failed ensuring users table columns:', error);
        throw error;
    }
};
/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á tasks ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
 * - "googleEventIds" jsonb NOT NULL DEFAULT '{}'
 */
const ensureTasksTableColumns = async (queryRunner) => {
    try {
        const existingColumnsResult = await queryRunner.query(`
      SELECT column_name
      FROM information_schema.columns
      WHERE table_schema = 'public' AND table_name = 'tasks'
    `);
        const existingColumnNames = existingColumnsResult.map((r) => r.column_name);
        if (!existingColumnNames.includes('googleEventIds')) {
            const alterSql = `ALTER TABLE "tasks" ADD COLUMN "googleEventIds" jsonb NOT NULL DEFAULT '{}'`;
            console.log('üîß Applying schema update for tasks:', alterSql);
            await queryRunner.query(alterSql);
            console.log('‚úÖ Tasks table columns ensured');
        }
        else {
            console.log('‚úÖ Tasks table already has required columns');
        }
    }
    catch (error) {
        console.error('‚ùå Failed ensuring tasks table columns:', error);
        throw error;
    }
};
//# sourceMappingURL=database.js.map