"use strict";
// Project Workflow Service
// ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ workflow ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á To-dos
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectWorkflowService = void 0;
const ProjectChecklistService_1 = require("./ProjectChecklistService");
const ProjectMemoryService_1 = require("./ProjectMemoryService");
const TaskService_1 = require("./TaskService");
const LineService_1 = require("./LineService");
const logger_1 = require("@/utils/logger");
class ProjectWorkflowService {
    constructor() {
        this.workflows = new Map();
        this.templates = new Map();
        this.checklistService = new ProjectChecklistService_1.ProjectChecklistService();
        this.memoryService = new ProjectMemoryService_1.ProjectMemoryService();
        this.taskService = new TaskService_1.TaskService();
        this.lineService = new LineService_1.LineService();
        this.initializeWorkflowTemplates();
    }
    /**
     * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô workflow templates
     */
    initializeWorkflowTemplates() {
        // Project Start Workflow
        this.templates.set('WF-PROJECT-START', {
            id: 'WF-PROJECT-START',
            name: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å',
            description: 'Workflow ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡πÉ‡∏´‡∏°‡πà',
            category: 'project-start',
            isActive: true,
            steps: [
                {
                    id: 'STEP-001',
                    name: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å',
                    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà',
                    isRequired: true,
                    dependencies: [],
                    estimatedTime: 15
                },
                {
                    id: 'STEP-002',
                    name: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
                    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô',
                    isRequired: true,
                    dependencies: ['STEP-001'],
                    estimatedTime: 10
                },
                {
                    id: 'STEP-003',
                    name: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE Bot',
                    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LINE Bot ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö LINE API',
                    isRequired: true,
                    dependencies: ['STEP-001'],
                    estimatedTime: 10
                },
                {
                    id: 'STEP-004',
                    name: '‡∏™‡∏£‡πâ‡∏≤‡∏á To-dos ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢',
                    description: '‡∏™‡∏£‡πâ‡∏≤‡∏á To-dos ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢',
                    isRequired: true,
                    dependencies: ['STEP-001', 'STEP-002', 'STEP-003'],
                    estimatedTime: 20
                },
                {
                    id: 'STEP-005',
                    name: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies',
                    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ dependencies ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
                    isRequired: false,
                    dependencies: ['STEP-001'],
                    estimatedTime: 15
                }
            ]
        });
        // Daily Check Workflow
        this.templates.set('WF-DAILY-CHECK', {
            id: 'WF-DAILY-CHECK',
            name: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô',
            description: 'Workflow ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô',
            category: 'daily-check',
            isActive: true,
            steps: [
                {
                    id: 'STEP-001',
                    name: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö',
                    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°',
                    isRequired: true,
                    dependencies: [],
                    estimatedTime: 5
                },
                {
                    id: 'STEP-002',
                    name: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á',
                    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
                    isRequired: true,
                    dependencies: ['STEP-001'],
                    estimatedTime: 10
                },
                {
                    id: 'STEP-003',
                    name: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô',
                    description: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß',
                    isRequired: true,
                    dependencies: ['STEP-002'],
                    estimatedTime: 15
                }
            ]
        });
        // Weekly Review Workflow
        this.templates.set('WF-WEEKLY-REVIEW', {
            id: 'WF-WEEKLY-REVIEW',
            name: '‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå',
            description: 'Workflow ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå',
            category: 'weekly-review',
            isActive: true,
            steps: [
                {
                    id: 'STEP-001',
                    name: '‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
                    description: '‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤',
                    isRequired: true,
                    dependencies: [],
                    estimatedTime: 20
                },
                {
                    id: 'STEP-002',
                    name: '‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ',
                    description: '‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ',
                    isRequired: true,
                    dependencies: ['STEP-001'],
                    estimatedTime: 30
                },
                {
                    id: 'STEP-003',
                    name: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï project rules ‡πÅ‡∏•‡∏∞ memories',
                    description: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï rules ‡πÅ‡∏•‡∏∞ memories ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ',
                    isRequired: false,
                    dependencies: ['STEP-001'],
                    estimatedTime: 25
                }
            ]
        });
    }
    /**
     * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô workflow ‡πÉ‡∏´‡∏°‡πà
     */
    async startWorkflow(templateId, userId, groupId) {
        const template = this.templates.get(templateId);
        if (!template) {
            throw new Error(`Workflow template not found: ${templateId}`);
        }
        if (!template.isActive) {
            throw new Error(`Workflow template is not active: ${templateId}`);
        }
        const workflowId = `WF-${Date.now()}`;
        const steps = template.steps.map(step => ({
            ...step,
            isCompleted: false
        }));
        const workflow = {
            id: workflowId,
            workflowName: template.name,
            steps,
            startedAt: new Date(),
            status: 'pending',
            progress: 0,
            userId,
            groupId,
            todos: []
        };
        this.workflows.set(workflowId, workflow);
        logger_1.logger.info(`üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô workflow: ${template.name} (${workflowId}) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${userId}`);
        return workflow;
    }
    /**
     * ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ workflow step
     */
    async executeWorkflowStep(workflowId, stepId, userId, notes) {
        const workflow = this.workflows.get(workflowId);
        if (!workflow) {
            throw new Error(`Workflow not found: ${workflowId}`);
        }
        const step = workflow.steps.find(s => s.id === stepId);
        if (!step) {
            throw new Error(`Step not found: ${stepId} in workflow: ${workflowId}`);
        }
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies
        const incompleteDependencies = step.dependencies.filter(depId => {
            const depStep = workflow.steps.find(s => s.id === depId);
            return depStep && !depStep.isCompleted;
        });
        if (incompleteDependencies.length > 0) {
            throw new Error(`Dependencies not completed: ${incompleteDependencies.join(', ')}`);
        }
        // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ step
        step.isCompleted = true;
        step.completedAt = new Date();
        step.completedBy = userId;
        step.notes = notes;
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ workflow
        workflow.status = 'in-progress';
        workflow.currentStep = this.getNextStep(workflow);
        workflow.progress = this.calculateProgress(workflow);
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ workflow ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (workflow.progress === 100) {
            workflow.status = 'completed';
            workflow.completedAt = new Date();
            await this.onWorkflowCompleted(workflow);
        }
        logger_1.logger.info(`‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ step: ${step.name} ‡πÉ‡∏ô workflow: ${workflow.workflowName}`);
        return workflow;
    }
    /**
     * ‡∏£‡∏±‡∏ö step ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
     */
    getNextStep(workflow) {
        const incompleteSteps = workflow.steps.filter(step => !step.isCompleted);
        if (incompleteSteps.length === 0)
            return undefined;
        // ‡∏´‡∏≤ step ‡∏ó‡∏µ‡πà dependencies ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
        const availableSteps = incompleteSteps.filter(step => {
            return step.dependencies.every(depId => {
                const depStep = workflow.steps.find(s => s.id === depId);
                return depStep && depStep.isCompleted;
            });
        });
        return availableSteps.length > 0 ? availableSteps[0].id : undefined;
    }
    /**
     * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
     */
    calculateProgress(workflow) {
        const completedSteps = workflow.steps.filter(step => step.isCompleted).length;
        return Math.round((completedSteps / workflow.steps.length) * 100);
    }
    /**
     * ‡πÄ‡∏°‡∏∑‡πà‡∏≠ workflow ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
     */
    async onWorkflowCompleted(workflow) {
        logger_1.logger.info(`üéâ Workflow ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${workflow.workflowName} (${workflow.id})`);
        try {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á To-dos ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á workflow
            if (workflow.groupId) {
                const todos = await this.checklistService.createProjectTodos(workflow.groupId, workflow.userId);
                workflow.todos = todos;
            }
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° memory ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö workflow ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
            this.memoryService.addMemory({
                type: 'note',
                title: `Workflow ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${workflow.workflowName}`,
                content: `Workflow ${workflow.workflowName} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${workflow.completedAt?.toLocaleDateString('th-TH')}`,
                tags: ['workflow', 'completed', workflow.workflowName.toLowerCase()],
                relatedRules: []
            });
        }
        catch (error) {
            logger_1.logger.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏á workflow ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô:', error);
        }
    }
    /**
     * ‡∏£‡∏±‡∏ö workflow ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
     */
    getActiveWorkflows(userId) {
        const activeWorkflows = Array.from(this.workflows.values()).filter(w => w.status === 'in-progress' || w.status === 'pending');
        if (userId) {
            return activeWorkflows.filter(w => w.userId === userId);
        }
        return activeWorkflows;
    }
    /**
     * ‡∏£‡∏±‡∏ö workflow ‡∏ï‡∏≤‡∏° ID
     */
    getWorkflow(workflowId) {
        return this.workflows.get(workflowId);
    }
    /**
     * ‡∏£‡∏±‡∏ö workflow templates ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
     */
    getActiveTemplates() {
        return Array.from(this.templates.values()).filter(t => t.isActive);
    }
    /**
     * ‡∏£‡∏±‡∏ö workflow template ‡∏ï‡∏≤‡∏° ID
     */
    getTemplate(templateId) {
        return this.templates.get(templateId);
    }
    /**
     * ‡∏´‡∏¢‡∏∏‡∏î workflow
     */
    stopWorkflow(workflowId, userId, reason) {
        const workflow = this.workflows.get(workflowId);
        if (!workflow)
            return false;
        if (workflow.userId !== userId) {
            throw new Error('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏´‡∏¢‡∏∏‡∏î workflow ‡∏ô‡∏µ‡πâ');
        }
        workflow.status = 'failed';
        workflow.completedAt = new Date();
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° memory ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö workflow ‡∏ó‡∏µ‡πà‡∏´‡∏¢‡∏∏‡∏î
        this.memoryService.addMemory({
            type: 'note',
            title: `Workflow ‡∏´‡∏¢‡∏∏‡∏î: ${workflow.workflowName}`,
            content: `Workflow ${workflow.workflowName} ‡∏´‡∏¢‡∏∏‡∏î‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${workflow.completedAt.toLocaleDateString('th-TH')} ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å: ${reason || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•'}`,
            tags: ['workflow', 'stopped', workflow.workflowName.toLowerCase()],
            relatedRules: []
        });
        logger_1.logger.info(`‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î workflow: ${workflow.workflowName} (${workflowId}) ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å: ${reason || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•'}`);
        return true;
    }
    /**
     * ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï workflow
     */
    resetWorkflow(workflowId, userId) {
        const workflow = this.workflows.get(workflowId);
        if (!workflow)
            return false;
        if (workflow.userId !== userId) {
            throw new Error('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï workflow ‡∏ô‡∏µ‡πâ');
        }
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï steps
        workflow.steps.forEach(step => {
            step.isCompleted = false;
            step.completedAt = undefined;
            step.completedBy = undefined;
            step.notes = undefined;
        });
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ workflow
        workflow.status = 'pending';
        workflow.currentStep = undefined;
        workflow.progress = 0;
        workflow.completedAt = undefined;
        logger_1.logger.info(`üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï workflow: ${workflow.workflowName} (${workflowId})`);
        return true;
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á workflow template ‡πÉ‡∏´‡∏°‡πà
     */
    createWorkflowTemplate(template) {
        const newTemplate = {
            ...template,
            id: `WF-${Date.now()}`
        };
        this.templates.set(newTemplate.id, newTemplate);
        logger_1.logger.info(`üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á workflow template ‡πÉ‡∏´‡∏°‡πà: ${newTemplate.name} (${newTemplate.id})`);
        return newTemplate;
    }
    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï workflow template
     */
    updateWorkflowTemplate(templateId, updates) {
        const template = this.templates.get(templateId);
        if (!template)
            return false;
        const updatedTemplate = { ...template, ...updates };
        this.templates.set(templateId, updatedTemplate);
        logger_1.logger.info(`üìã ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï workflow template: ${template.name} (${templateId})`);
        return true;
    }
    /**
     * ‡∏•‡∏ö workflow template
     */
    deleteWorkflowTemplate(templateId) {
        const template = this.templates.get(templateId);
        if (!template)
            return false;
        this.templates.delete(templateId);
        logger_1.logger.info(`üóëÔ∏è ‡∏•‡∏ö workflow template: ${template.name} (${templateId})`);
        return true;
    }
    /**
     * ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô workflow
     */
    generateWorkflowReport() {
        const workflows = Array.from(this.workflows.values());
        const templates = Array.from(this.templates.values());
        const workflowsByStatus = workflows.reduce((acc, w) => {
            if (!acc[w.status])
                acc[w.status] = [];
            acc[w.status].push(w);
            return acc;
        }, {});
        const templatesByCategory = templates.reduce((acc, t) => {
            if (!acc[t.category])
                acc[t.category] = [];
            acc[t.category].push(t);
            return acc;
        }, {});
        return {
            summary: {
                totalWorkflows: workflows.length,
                totalTemplates: templates.length,
                workflowsByStatus: Object.keys(workflowsByStatus).map(status => ({
                    status,
                    count: workflowsByStatus[status].length
                })),
                templatesByCategory: Object.keys(templatesByCategory).map(category => ({
                    category,
                    count: templatesByCategory[category].length
                }))
            },
            activeWorkflows: this.getActiveWorkflows(),
            recentWorkflows: workflows
                .sort((a, b) => b.startedAt.getTime() - a.startedAt.getTime())
                .slice(0, 10)
        };
    }
}
exports.ProjectWorkflowService = ProjectWorkflowService;
//# sourceMappingURL=ProjectWorkflowService.js.map