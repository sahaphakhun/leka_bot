"use strict";
// Cron Service - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CronService = void 0;
const node_cron_1 = __importDefault(require("node-cron"));
const moment_timezone_1 = __importDefault(require("moment-timezone"));
const config_1 = require("@/utils/config");
const TaskService_1 = require("./TaskService");
const NotificationService_1 = require("./NotificationService");
const KPIService_1 = require("./KPIService");
const FlexMessageTemplateService_1 = require("./FlexMessageTemplateService");
const FlexMessageDesignSystem_1 = require("./FlexMessageDesignSystem");
const FileBackupService_1 = require("./FileBackupService");
const RecurringTaskService_1 = require("./RecurringTaskService");
const database_1 = require("@/utils/database");
const models_1 = require("@/models");
class CronService {
    constructor() {
        this.jobs = new Map();
        this.isStarted = false;
        this.taskService = new TaskService_1.TaskService();
        this.notificationService = new NotificationService_1.NotificationService();
        this.kpiService = new KPIService_1.KPIService();
        this.fileBackupService = new FileBackupService_1.FileBackupService();
        this.recurringTaskService = new RecurringTaskService_1.RecurringTaskService();
    }
    start() {
        if (this.isStarted) {
            console.log('üîÑ Cron jobs already running, restarting...');
            this.stop();
        }
        console.log('üïê Starting cron jobs...');
        // ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î 1 ‡∏ß‡∏±‡∏ô: ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡πà‡∏ß‡∏á 1 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        const reminderOneDayJob = node_cron_1.default.schedule('0 * * * *', async () => {
            await this.processReminders(['P1D']);
        }, {
            scheduled: false,
            timezone: config_1.config.app.defaultTimezone
        });
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 9:00 ‡∏ô. (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
        const overdueJob = node_cron_1.default.schedule('0 9 * * *', async () => {
            await this.processOverdueTasks();
        }, {
            scheduled: false,
            timezone: config_1.config.app.defaultTimezone
        });
        // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 9:00 ‡∏ô.
        const dailyOverdueSummaryJob = node_cron_1.default.schedule('0 9 * * *', async () => {
            await this.sendDailyOverdueSummary();
        }, {
            scheduled: false,
            timezone: config_1.config.app.defaultTimezone
        });
        // ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (‡∏®‡∏∏‡∏Å‡∏£‡πå 13:00)
        const weeklyReportJob = node_cron_1.default.schedule('0 13 * * 5', async () => {
            await this.sendWeeklyReports();
        }, {
            scheduled: false,
            timezone: config_1.config.app.defaultTimezone
        });
        // ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô 08:00 ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
        const dailySummaryJob = node_cron_1.default.schedule('0 8 * * *', async () => {
            await this.sendDailyIncompleteTaskSummaries();
            // ‡∏¢‡πâ‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå
            // await this.sendManagerDailySummaries();
        }, {
            scheduled: false,
            timezone: config_1.config.app.defaultTimezone
        });
        // ‡∏™‡∏£‡∏∏‡∏õ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ï‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏≤‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå 08:00
        const supervisorSummaryJob = node_cron_1.default.schedule('0 8 * * 1', async () => {
            await this.sendSupervisorWeeklySummaries();
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°)
            await this.sendManagerWeeklySummaries();
        }, {
            scheduled: false,
            timezone: config_1.config.app.defaultTimezone
        });
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï KPI ‡πÅ‡∏•‡∏∞ Leaderboard ‡∏ó‡∏∏‡∏Å‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô
        const kpiUpdateJob = node_cron_1.default.schedule('0 0 * * *', async () => {
            await this.updateKPIRecords();
        }, {
            scheduled: false,
            timezone: config_1.config.app.defaultTimezone
        });
        // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 02:00 ‡∏ô.
        const fileBackupJob = node_cron_1.default.schedule('0 2 * * *', async () => {
            await this.runFileBackups();
        }, {
            scheduled: false,
            timezone: config_1.config.app.defaultTimezone
        });
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏†‡∏≤‡∏£‡∏∞‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö)
        const recurringJob = node_cron_1.default.schedule('*/5 * * * *', async () => {
            await this.processRecurringTasks();
        }, {
            scheduled: false,
            timezone: config_1.config.app.defaultTimezone
        });
        // ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 9:00 ‡∏ô.
        const reviewReminderJob = node_cron_1.default.schedule('0 9 * * *', async () => {
            await this.sendDailyReviewReminders();
        }, {
            scheduled: false,
            timezone: config_1.config.app.defaultTimezone
        });
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á Bot ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 10:00 ‡∏ô.
        const botMembershipCheckJob = node_cron_1.default.schedule('0 10 * * *', async () => {
            await this.checkBotMembershipAndCleanup();
        }, {
            scheduled: false,
            timezone: config_1.config.app.defaultTimezone
        });
        // ‡πÄ‡∏Å‡πá‡∏ö jobs ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö shutdown
        this.jobs.set('reminderOneDay', reminderOneDayJob);
        this.jobs.set('overdue', overdueJob);
        this.jobs.set('dailyOverdueSummary', dailyOverdueSummaryJob);
        this.jobs.set('weeklyReport', weeklyReportJob);
        this.jobs.set('dailySummary', dailySummaryJob);
        this.jobs.set('supervisorSummary', supervisorSummaryJob);
        this.jobs.set('kpiUpdate', kpiUpdateJob);
        this.jobs.set('fileBackup', fileBackupJob);
        this.jobs.set('recurring', recurringJob);
        this.jobs.set('reviewReminder', reviewReminderJob);
        this.jobs.set('botMembershipCheck', botMembershipCheckJob);
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        this.jobs.forEach((job, name) => {
            job.start();
            console.log(`‚úÖ Started cron job: ${name}`);
        });
        this.isStarted = true;
    }
    stop() {
        console.log('üõë Stopping cron jobs...');
        this.jobs.forEach((job, name) => {
            job.stop();
            console.log(`‚úÖ Stopped cron job: ${name}`);
        });
        this.jobs.clear();
        this.isStarted = false;
    }
    /**
     * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô
     */
    async processReminders(onlyIntervals) {
        try {
            console.log('üîî Processing task reminders...');
            const now = (0, moment_timezone_1.default)().tz(config_1.config.app.defaultTimezone);
            const upcomingTasks = await this.taskService.getTasksForReminder();
            for (const task of upcomingTasks) {
                const dueTime = (0, moment_timezone_1.default)(task.dueTime).tz(config_1.config.app.defaultTimezone);
                const timeDiff = dueTime.diff(now);
                // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                const reminderIntervals = onlyIntervals && onlyIntervals.length > 0
                    ? onlyIntervals
                    : ((task.customReminders && task.customReminders.length > 0)
                        ? task.customReminders
                        : config_1.config.app.defaultReminders);
                // ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 1 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
                for (const interval of reminderIntervals || []) {
                    const reminderTime = this.parseReminderInterval(interval);
                    const shouldSendAt = dueTime.clone().subtract(reminderTime.amount, reminderTime.unit);
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á (‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ñ‡πâ‡∏≤‡∏£‡∏±‡∏ô hourly)
                    if (now.isAfter(shouldSendAt) && now.isBefore(shouldSendAt.clone().add(60, 'minutes'))) {
                        const alreadySent = task.remindersSent.some(reminder => reminder.type === interval &&
                            (0, moment_timezone_1.default)(reminder.sentAt).isSame(now, 'hour'));
                        if (!alreadySent) {
                            await this.sendTaskReminder(task, interval);
                        }
                    }
                }
                // ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å‡πÄ‡∏ä‡πâ‡∏≤ 08:00 ‡∏ô. ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à: ‡πÅ‡∏¢‡∏Å‡πÑ‡∏õ‡∏£‡∏ß‡∏°‡∏£‡∏≠‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏•‡∏π‡∏õ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î O(n^2) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
            }
            // ‡πÄ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤ 08:00 ‡∏ô. ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
            // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å‡πÄ‡∏ä‡πâ‡∏≤ 08:00 ‡∏ô. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        }
        catch (error) {
            console.error('‚ùå Error processing reminders:', error);
        }
    }
    /**
     * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î
     */
    async processOverdueTasks() {
        try {
            console.log('‚è∞ Processing overdue tasks...');
            // ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
            const groups = await this.taskService.getAllGroups();
            for (const group of groups) {
                try {
                    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏∂‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á/‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏ï‡∏£‡∏ß‡∏à
                    const now = (0, moment_timezone_1.default)();
                    const candidates = await database_1.AppDataSource.getRepository(models_1.Task)
                        .createQueryBuilder('task')
                        .leftJoinAndSelect('task.assignedUsers', 'assignee')
                        .leftJoinAndSelect('task.group', 'grp')
                        .leftJoinAndSelect('task.attachedFiles', 'file')
                        .where('task.groupId = :gid', { gid: group.id })
                        .andWhere('task.status IN (:...st)', { st: ['pending', 'in_progress'] })
                        .andWhere('task.dueTime < :now', { now: now.toDate() })
                        .orderBy('task.dueTime', 'ASC')
                        .getMany();
                    for (const task of candidates) {
                        const wf = task.workflow || {};
                        const submissions = wf?.submissions;
                        const hasSubmission = Array.isArray(submissions)
                            ? submissions.length > 0
                            : submissions && typeof submissions === 'object'
                                ? Object.keys(submissions).length > 0
                                : false;
                        const review = wf?.review;
                        const reviewRequested = !!(review && (review.status === 'pending' || review.reviewRequestedAt));
                        const alreadySubmitted = !!task.submittedAt;
                        // ‡∏Ç‡πâ‡∏≤‡∏°‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå submission ‡πÅ‡∏ô‡∏ö‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô
                        const hasSubmissionFiles = Array.isArray(task.attachedFiles)
                            ? task.attachedFiles.some((f) => f?.attachmentType === 'submission')
                            : false;
                        if (hasSubmission || reviewRequested || alreadySubmitted || hasSubmissionFiles) {
                            continue;
                        }
                        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô overdue
                        await this.taskService.updateTaskStatus(task.id, 'overdue');
                        // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                        const overdueHours = (0, moment_timezone_1.default)().diff((0, moment_timezone_1.default)(task.dueTime), 'hours');
                        await this.notificationService.sendOverdueNotification({ task, overdueHours });
                        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å overdue KPI (0 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô) ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
                        const overdueDays = (0, moment_timezone_1.default)().diff((0, moment_timezone_1.default)(task.dueTime), 'days');
                        if (overdueDays >= 7 && task.status !== 'cancelled') {
                            await this.kpiService.recordOverdueKPI(task);
                        }
                    }
                }
                catch (err) {
                    console.warn('‚ö†Ô∏è Failed to process overdue tasks for group:', group.id, err);
                }
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏ß‡∏±‡∏ô
            const lateReviews = await this.taskService.getTasksLateForReview();
            for (const t of lateReviews) {
                await this.taskService.markLateReview(t.id);
            }
        }
        catch (error) {
            console.error('‚ùå Error processing overdue tasks:', error);
        }
    }
    /**
     * ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (‡∏®‡∏∏‡∏Å‡∏£‡πå 13:00)
     */
    async sendWeeklyReports() {
        try {
            console.log('üìä Sending weekly reports...');
            const groups = await this.taskService.getAllActiveGroups();
            for (const group of groups) {
                if (!group.settings.enableLeaderboard)
                    continue;
                const weeklyStats = await this.kpiService.getWeeklyStats(group.id);
                const leaderboard = await this.kpiService.getGroupLeaderboard(group.id, 'weekly');
                // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏õ‡∏Å‡∏ï‡∏¥
                await this.notificationService.sendWeeklyReport(group, weeklyStats, leaderboard);
                // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î Leaderboard ‡πÅ‡∏¢‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
                // ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡∏° (admin) ‡∏ó‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏î‡πâ‡∏ß‡∏¢
                try {
                    await this.notificationService.sendWeeklyReportToAdmins(group, weeklyStats, leaderboard);
                }
                catch (err) {
                    console.warn('‚ö†Ô∏è Failed to send weekly report to admins:', group.id, err);
                }
            }
        }
        catch (error) {
            console.error('‚ùå Error sending weekly reports:', error);
        }
    }
    /** ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô: ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏° ‡πÄ‡∏ß‡∏•‡∏≤ 08:00 ‡∏ô. */
    async sendDailyIncompleteTaskSummaries() {
        try {
            console.log('üóíÔ∏è Sending daily incomplete task summaries...');
            const groups = await this.taskService.getAllActiveGroups();
            for (const group of groups) {
                // ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ
                const tasks = await this.taskService.getIncompleteTasksOfGroup(group.lineGroupId);
                if (tasks.length === 0)
                    continue;
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
                const tz = group.timezone || config_1.config.app.defaultTimezone;
                const summaryFlexMessage = this.createDailySummaryFlexMessage(group, tasks, tz);
                // ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
                try {
                    await this.notificationService.lineService.pushMessage(group.lineGroupId, summaryFlexMessage);
                }
                catch (err) {
                    console.warn('‚ö†Ô∏è Failed to send daily summary to group:', group.lineGroupId, err);
                }
                // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏¢‡∏Å‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
                const tasksByAssignee = new Map();
                for (const task of tasks) {
                    const assignees = task.assignedUsers || [];
                    if (assignees.length === 0)
                        continue;
                    for (const assignee of assignees) {
                        const userTasks = tasksByAssignee.get(assignee.lineUserId) || [];
                        userTasks.push(task);
                        tasksByAssignee.set(assignee.lineUserId, userTasks);
                    }
                }
                for (const [assigneeId, userTasks] of tasksByAssignee.entries()) {
                    try {
                        const assignee = userTasks[0].assignedUsers?.find((u) => u.lineUserId === assigneeId);
                        if (!assignee)
                            continue;
                        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏á‡∏≤‡∏ô (Flex Message) ‡πÅ‡∏ó‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
                        const flexMessage = this.createPersonalDailyReportFlexMessage(group, assignee, userTasks, tz);
                        // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
                        await this.notificationService.lineService.pushMessage(assigneeId, flexMessage);
                        console.log(`‚úÖ Sent personal daily report to: ${assignee.displayName}`);
                    }
                    catch (err) {
                        console.warn('‚ö†Ô∏è Failed to send personal daily report:', assigneeId, err);
                    }
                }
            }
        }
        catch (error) {
            console.error('‚ùå Error sending daily incomplete task summaries:', error);
        }
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
     */
    createDailySummaryFlexMessage(group, tasks, timezone, viewerLineUserId) {
        return FlexMessageTemplateService_1.FlexMessageTemplateService.createDailySummaryCard(group, tasks, timezone, viewerLineUserId);
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
     */
    createPersonalDailyReportFlexMessage(group, assignee, tasks, timezone) {
        return FlexMessageTemplateService_1.FlexMessageTemplateService.createPersonalReportCard(assignee, tasks, timezone, group);
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• (Flex Message)
     */
    createPersonalTaskFlexMessage(assignee, tasks, timezone) {
        const header = `üìã ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• - ${assignee.displayName}`;
        const date = (0, moment_timezone_1.default)().tz(timezone).format('DD/MM/YYYY');
        const subtitle = `üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${date} | üìä ‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á ${tasks.length} ‡∏á‡∏≤‡∏ô`;
        // ‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        const overdueTasks = tasks.filter(t => t.status === 'overdue');
        const inProgressTasks = tasks.filter(t => t.status === 'in_progress');
        const pendingTasks = tasks.filter(t => t.status === 'pending');
        return FlexMessageTemplateService_1.FlexMessageTemplateService.createPersonalReportCard(assignee, tasks, timezone);
    }
    /** ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏∏‡∏Å‡πÄ‡∏ä‡πâ‡∏≤: ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á / ‡πÉ‡∏Ñ‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤ / ‡πÉ‡∏Ñ‡∏£‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à */
    async sendManagerDailySummaries() {
        try {
            console.log('üìä Sending manager daily summaries...');
            const groups = await this.taskService.getAllActiveGroups();
            for (const group of groups) {
                // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
                const stats = await this.kpiService.getDailyStats(group.id);
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
                const tz = group.timezone || config_1.config.app.defaultTimezone;
                const managerFlexMessage = this.createManagerDailyReportFlexMessage(group, stats, tz);
                // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
                // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ admin ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
                const members = await this.notificationService.userService.getGroupMembers(group.lineGroupId);
                const managers = members.filter((m) => m.role === 'admin');
                for (const manager of managers) {
                    try {
                        await this.notificationService.lineService.pushMessage(manager.lineUserId, managerFlexMessage);
                        console.log(`‚úÖ Sent manager daily report to: ${manager.displayName}`);
                    }
                    catch (err) {
                        console.warn('‚ö†Ô∏è Failed to send manager daily report:', manager.displayName, err);
                    }
                }
            }
        }
        catch (error) {
            console.error('‚ùå Error sending manager daily summaries:', error);
        }
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ (‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°)
     */
    async sendManagerWeeklySummaries() {
        try {
            console.log('üìä Sending manager weekly summaries (consolidated)...');
            const groups = await this.taskService.getAllActiveGroups();
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Map ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
            const managerGroups = new Map();
            for (const group of groups) {
                // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°
                const stats = await this.kpiService.getWeeklyStats(group.id);
                // ‡∏î‡∏∂‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô admin ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
                const members = await this.notificationService.userService.getGroupMembers(group.lineGroupId);
                const managers = members.filter((m) => m.role === 'admin');
                // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
                for (const manager of managers) {
                    if (!managerGroups.has(manager.lineUserId)) {
                        managerGroups.set(manager.lineUserId, []);
                    }
                    managerGroups.get(manager.lineUserId).push({ group, stats });
                }
            }
            // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
            for (const [managerLineUserId, groupData] of managerGroups) {
                try {
                    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ
                    const managerFlexMessage = this.createManagerWeeklyConsolidatedReportFlexMessage(groupData);
                    // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
                    await this.notificationService.lineService.pushMessage(managerLineUserId, managerFlexMessage);
                    console.log(`‚úÖ Sent consolidated manager weekly report to: ${managerLineUserId}`);
                }
                catch (err) {
                    console.warn('‚ö†Ô∏è Failed to send consolidated manager weekly report:', managerLineUserId, err);
                }
            }
        }
        catch (error) {
            console.error('‚ùå Error sending manager weekly summaries:', error);
        }
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ (‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°)
     */
    createManagerWeeklyConsolidatedReportFlexMessage(groupData) {
        const date = (0, moment_timezone_1.default)().tz(config_1.config.app.defaultTimezone).format('DD/MM/YYYY');
        const totalGroups = groupData.length;
        const totalMembers = groupData.reduce((sum, g) => sum + (g.stats.totalMembers || 0), 0);
        const totalCompletedTasks = groupData.reduce((sum, g) => sum + (g.stats.completedTasks || 0), 0);
        const totalOverdueTasks = groupData.reduce((sum, g) => sum + (g.stats.overdueTasks || 0), 0);
        const totalPendingReviewTasks = groupData.reduce((sum, g) => sum + (g.stats.pendingReviewTasks || 0), 0);
        const content = [
            { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° (${date})`, 'md', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary, 'bold'), align: 'center' },
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createSeparator('medium'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', [
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üë• ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalMembers} ‡∏Ñ‡∏ô`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary),
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìä ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß: ${totalCompletedTasks} ‡∏á‡∏≤‡∏ô`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.success),
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‚ö†Ô∏è ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${totalOverdueTasks} ‡∏á‡∏≤‡∏ô`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.danger),
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìù ‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à: ${totalPendingReviewTasks} ‡∏á‡∏≤‡∏ô`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.warning)
            ], 'small'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createSeparator('medium'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText('üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°', 'md', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary, 'bold'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', groupData.map((item, index) => {
                const group = item.group;
                const stats = item.stats;
                return FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('horizontal', [
                    { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`${index + 1}. ${group.name}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary, 'bold'), flex: 1 },
                    { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üë• ${stats.totalMembers || 0} ‡∏Ñ‡∏ô`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary), flex: 0 },
                    { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìä ${stats.completedTasks || 0} ‡∏á‡∏≤‡∏ô`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.success), flex: 0 },
                    { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‚ö†Ô∏è ${stats.overdueTasks || 0} ‡∏á‡∏≤‡∏ô`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.danger), flex: 0 },
                    { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìù ${stats.pendingReviewTasks || 0} ‡∏á‡∏≤‡∏ô`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.warning), flex: 0 }
                ], 'small');
            }), 'small')
        ];
        const buttons = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', 'uri', `${config_1.config.baseUrl}/dashboard?groupId=${groupData[0].group.id}#manager-reports`, // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ
            'primary')
        ];
        return FlexMessageDesignSystem_1.FlexMessageDesignSystem.createStandardTaskCard('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°', 'üìä', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.info, content, buttons, 'extraLarge');
    }
    /**
     * ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô
     */
    async sendSupervisorWeeklySummaries() {
        try {
            console.log('üìä Sending supervisor weekly summaries...');
            const groups = await this.taskService.getAllActiveGroups();
            for (const group of groups) {
                // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô
                const stats = await this.kpiService.getWeeklyStats(group.id);
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô
                const tz = group.timezone || config_1.config.app.defaultTimezone;
                const supervisorFlexMessage = this.createSupervisorWeeklyReportFlexMessage(group, stats, tz);
                // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
                // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ admin ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
                const members = await this.notificationService.userService.getGroupMembers(group.lineGroupId);
                const supervisors = members.filter((m) => m.role === 'admin');
                for (const supervisor of supervisors) {
                    try {
                        await this.notificationService.lineService.pushMessage(supervisor.lineUserId, supervisorFlexMessage);
                        console.log(`‚úÖ Sent supervisor weekly report to: ${supervisor.displayName}`);
                    }
                    catch (err) {
                        console.warn('‚ö†Ô∏è Failed to send supervisor weekly report:', supervisor.displayName, err);
                    }
                }
            }
        }
        catch (error) {
            console.error('‚ùå Error sending supervisor weekly summaries:', error);
        }
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô
     */
    createSupervisorWeeklyReportFlexMessage(group, stats, timezone) {
        const weekStart = (0, moment_timezone_1.default)().tz(timezone).startOf('week').format('DD/MM');
        const weekEnd = (0, moment_timezone_1.default)().tz(timezone).endOf('week').format('DD/MM');
        const content = [
            { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìÖ ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ${weekStart} - ${weekEnd}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary), align: 'center' },
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createSeparator('medium'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText('üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ï‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏≤', 'md', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary, 'bold'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', [
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üë• ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${stats.totalMembers || 0} ‡∏Ñ‡∏ô`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary),
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìä ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß: ${stats.completedTasks || 0} ‡∏á‡∏≤‡∏ô`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.success),
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‚ö†Ô∏è ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${stats.overdueTasks || 0} ‡∏á‡∏≤‡∏ô`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.danger),
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìù ‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à: ${stats.pendingReviewTasks || 0} ‡∏á‡∏≤‡∏ô`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.warning)
            ], 'small')
        ];
        const buttons = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton('‡∏î‡∏π Dashboard', 'uri', `${config_1.config.baseUrl}/dashboard?groupId=${group.id}`, 'primary')
        ];
        return FlexMessageDesignSystem_1.FlexMessageDesignSystem.createStandardTaskCard('üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô', 'üìä', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.neutral, content, buttons, 'extraLarge');
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
     */
    createManagerDailyReportFlexMessage(group, stats, timezone) {
        const date = (0, moment_timezone_1.default)().tz(timezone).format('DD/MM/YYYY');
        const content = [
            { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${date}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary), align: 'center' },
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createSeparator('medium'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('horizontal', [
                { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', [
                        FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText('üìã ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', 'xs', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary),
                        FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(stats.totalTasks?.toString() || '0', 'lg', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary, 'bold')
                    ]), flex: 1 },
                { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', [
                        FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText('‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß', 'xs', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary),
                        FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(stats.completedTasks?.toString() || '0', 'lg', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.success, 'bold')
                    ]), flex: 1 }
            ]),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('horizontal', [
                { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', [
                        FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText('‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î', 'xs', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary),
                        FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(stats.overdueTasks?.toString() || '0', 'lg', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.danger, 'bold')
                    ]), flex: 1 },
                { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', [
                        FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText('üìù ‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à', 'xs', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary),
                        FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(stats.pendingReviewTasks?.toString() || '0', 'lg', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.warning, 'bold')
                    ]), flex: 1 }
            ])
        ];
        const buttons = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton('‡∏î‡∏π Dashboard', 'uri', `${config_1.config.baseUrl}/dashboard?groupId=${group.id}`, 'primary')
        ];
        return FlexMessageDesignSystem_1.FlexMessageDesignSystem.createStandardTaskCard('üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£', 'üìä', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.info, content, buttons, 'extraLarge');
    }
    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï KPI ‡πÅ‡∏•‡∏∞ Leaderboard ‡∏ó‡∏∏‡∏Å‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô
     */
    async updateKPIRecords() {
        try {
            console.log('üîÑ Updating KPI records...');
            const groups = await this.taskService.getAllActiveGroups();
            for (const group of groups) {
                await this.kpiService.updateGroupStats(group.id);
                await this.kpiService.updateGroupLeaderboard(group.id, 'weekly');
            }
        }
        catch (error) {
            console.error('‚ùå Error updating KPI records:', error);
        }
    }
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÅ‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤
     */
    async processRecurringTasks() {
        try {
            console.log('üîÑ Processing recurring tasks...');
            // ‡∏î‡∏∂‡∏á‡πÅ‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
            const recurringTemplates = await database_1.AppDataSource.getRepository(models_1.RecurringTask)
                .createQueryBuilder('rt')
                .where('rt.active = :active', { active: true })
                .andWhere('rt.nextRunAt <= :now', { now: new Date() })
                .getMany();
            console.log(`üìã Found ${recurringTemplates.length} recurring tasks ready to run`);
            for (const template of recurringTemplates) {
                try {
                    console.log(`üîÑ Processing recurring task: ${template.title}`);
                    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (nextRunAt)
                    const tz = template.timezone || config_1.config.app.defaultTimezone;
                    const prevDue = (0, moment_timezone_1.default)(template.nextRunAt).tz(tz);
                    let nextDue = prevDue.clone();
                    if (template.recurrence === 'weekly') {
                        nextDue = prevDue.clone().add(1, 'week');
                    }
                    else if (template.recurrence === 'monthly') {
                        const dom = prevDue.date();
                        const candidate = prevDue.clone().add(1, 'month');
                        const clampedDay = Math.min(dom, candidate.daysInMonth());
                        nextDue = candidate.date(clampedDay);
                    }
                    else { // quarterly
                        const dom = prevDue.date();
                        const candidate = prevDue.clone().add(3, 'months');
                        const clampedDay = Math.min(dom, candidate.daysInMonth());
                        nextDue = candidate.date(clampedDay);
                    }
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ LINE User ID ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                    const createdByLineUserId = template.createdByLineUserId || template.assigneeLineUserIds?.[0];
                    if (!createdByLineUserId) {
                        console.warn(`‚ö†Ô∏è Skipping recurring task ${template.title}: no valid creator LINE User ID`);
                        continue;
                    }
                    const newTask = await this.taskService.createTask({
                        groupId: template.lineGroupId,
                        title: template.title,
                        description: template.description,
                        assigneeIds: template.assigneeLineUserIds,
                        createdBy: createdByLineUserId,
                        dueTime: nextDue.toDate(),
                        priority: template.priority,
                        tags: template.tags,
                        requireAttachment: template.requireAttachment,
                        reviewerUserId: template.reviewerLineUserId
                    });
                    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏°‡πà‡πÅ‡∏ö‡∏ö
                    await database_1.AppDataSource.getRepository(models_1.Task)
                        .createQueryBuilder()
                        .update()
                        .set({
                        recurringTaskId: template.id,
                        recurringInstance: (template.totalInstances || 0) + 1
                    })
                        .where('id = :taskId', { taskId: newTask.id })
                        .execute();
                    console.log(`üîó Linked task ${newTask.id} to recurring template ${template.id} (instance #${(template.totalInstances || 0) + 1});`);
                    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏°‡πà‡πÅ‡∏ö‡∏ö: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á nextRunAt = ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÉ‡∏ä‡πâ nextDue)
                    await this.recurringTaskService.update(template.id, {
                        lastRunAt: new Date(),
                        nextRunAt: nextDue.toDate(),
                        totalInstances: (template.totalInstances || 0) + 1
                    });
                    console.log(`‚úÖ Created recurring task: ${template.title} (Instance #${(template.totalInstances || 0) + 1})`);
                    console.log(`üìÖ Next trigger (current instance due): ${nextDue.toDate().toISOString()}`);
                }
                catch (taskError) {
                    console.error(`‚ùå Error processing recurring task ${template.id}:`, taskError);
                    // ‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                }
            }
        }
        catch (error) {
            console.error('‚ùå Error processing recurring tasks:', error);
        }
    }
    // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
    // ‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ processAutoApproveTasks() ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏£‡∏ß‡∏à 2 ‡∏ß‡∏±‡∏ô
    // ‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô 09:00 ‡πÅ‡∏ó‡∏ô (‡∏î‡∏π sendDailyReviewReminders)
    /**
     * ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
     */
    parseReminderInterval(interval) {
        if (interval === 'P1D' || interval === '1d')
            return { amount: 1, unit: 'days' };
        if (interval === 'PT3H' || interval === '3h')
            return { amount: 3, unit: 'hours' };
        // ‡πÄ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤ 08:00 ‡∏ô. ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
        // if (interval === 'daily_8am') return { amount: 0, unit: 'days' };
        // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        return { amount: 1, unit: 'days' };
    }
    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô
     */
    async sendTaskReminder(task, reminderType) {
        try {
            await this.notificationService.sendTaskReminder(task, reminderType);
        }
        catch (error) {
            console.error('‚ùå Error sending task reminder:', error);
        }
    }
    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
     */
    async sendDailyOverdueSummary() {
        try {
            console.log('üïê Starting daily overdue tasks summary...');
            await this.notificationService.sendDailyOverdueSummary();
        }
        catch (error) {
            console.error('‚ùå Error in daily overdue summary job:', error);
        }
    }
    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 9:00 ‡∏ô.
     */
    async sendDailyReviewReminders() {
        try {
            console.log('üìù Sending daily review reminders...');
            const pendingReviewTasks = await this.taskService.getTasksPendingReview();
            console.log(`üìã Found ${pendingReviewTasks.length} tasks pending review`);
            for (const task of pendingReviewTasks) {
                try {
                    const reviewerUserId = task?.workflow?.review?.reviewerUserId || task?.createdBy;
                    if (!reviewerUserId)
                        continue;
                    await this.notificationService.sendReviewRequest(task, reviewerUserId, {});
                    console.log(`‚úÖ Sent review reminder for task: ${task.id}`);
                }
                catch (err) {
                    console.warn('‚ö†Ô∏è Failed to send review reminder for task:', task?.id, err);
                }
            }
        }
        catch (error) {
            console.error('‚ùå Error sending daily review reminders:', error);
        }
    }
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á Bot ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 10:00 ‡∏ô.
     */
    async checkBotMembershipAndCleanup() {
        try {
            console.log('ü§ñ Starting daily bot membership check and cleanup...');
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏à‡∏≤‡∏Å TaskService
            const result = await this.taskService.checkAndCleanupInactiveGroups();
            console.log('üìä Bot membership check and cleanup completed:');
            console.log(`   üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°: ${result.checkedGroups} ‡∏Å‡∏•‡∏∏‡πà‡∏°`);
            console.log(`   üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°: ${result.cleanedGroups} ‡∏Å‡∏•‡∏∏‡πà‡∏°`);
            console.log(`   üóëÔ∏è ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${result.totalDeletedTasks} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
            if (result.errors.length > 0) {
                console.log(`   ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${result.errors.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
                result.errors.forEach((error, index) => {
                    console.log(`      ${index + 1}. ${error}`);
                });
            }
            // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ admin ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
            if (result.cleanedGroups > 0) {
                await this.sendCleanupNotification(result);
            }
        }
        catch (error) {
            console.error('‚ùå Error in bot membership check and cleanup:', error);
        }
    }
    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÉ‡∏´‡πâ admin
     */
    async sendCleanupNotification(result) {
        try {
            console.log('üì¢ Sending cleanup notification to admins...');
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            const message = `ü§ñ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bot

üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:
‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°: ${result.checkedGroups} ‡∏Å‡∏•‡∏∏‡πà‡∏°
‚Ä¢ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°: ${result.cleanedGroups} ‡∏Å‡∏•‡∏∏‡πà‡∏°
‚Ä¢ ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${result.totalDeletedTasks} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£

${result.errors.length > 0 ? `‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${result.errors.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£` : '‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}

üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á Bot ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 10:00 ‡∏ô. ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà Bot ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`;
            // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ admin ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô (‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ admin ‡πÄ‡∏â‡∏û‡∏≤‡∏∞)
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ log ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
            console.log('üì¢ Cleanup notification:', message);
        }
        catch (error) {
            console.error('‚ùå Error sending cleanup notification:', error);
        }
    }
    /**
     * ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
     */
    async runFileBackups() {
        try {
            console.log('üìÅ Starting automatic file backup to Google Drive...');
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤
            await this.fileBackupService.runScheduledBackups();
            console.log('‚úÖ Automatic file backup completed');
        }
        catch (error) {
            console.error('‚ùå Error in automatic file backup job:', error);
        }
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Leaderboard
     */
    createLeaderboardFlexMessage(group, leaderboard) {
        const content = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', leaderboard.slice(0, 5).map((user, index) => {
                const medal = ['ü•á', 'ü•à', 'ü•â', '4Ô∏è‚É£', '5Ô∏è‚É£'][index];
                const trend = user.trend === 'up' ? 'üìà' : user.trend === 'down' ? 'üìâ' : '‚û°Ô∏è';
                const totalScore = Number(user.totalScore ?? 0).toFixed(1);
                const onTimeRate = Math.round(user.onTimeRate ?? 0);
                const createdRate = Math.round(user.createdCompletedRate ?? 0);
                return FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', [
                    FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('horizontal', [
                        { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(medal, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary), flex: 0 },
                        { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(user.displayName, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary), flex: 1 },
                        { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`${totalScore} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary), flex: 0 },
                        { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(trend, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary), flex: 0 }
                    ], 'small'),
                    FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ${onTimeRate}% ‚Ä¢ ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${createdRate}% ‚Ä¢ ‡πÇ‡∏ó‡∏© ${Math.abs(Math.round(user.penaltyPoints ?? 0))} pts`, 'xs', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary)
                ], 'small');
            }), 'small')
        ];
        const buttons = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton('‡∏î‡∏π Leaderboard ‡∏â‡∏ö‡∏±‡∏ö‡πÄ‡∏ï‡πá‡∏°', 'uri', `${config_1.config.baseUrl}/dashboard?groupId=${group.lineGroupId}#leaderboard`, 'primary')
        ];
        return FlexMessageDesignSystem_1.FlexMessageDesignSystem.createStandardTaskCard('üèÜ Leaderboard', 'üèÜ', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.warning, content, buttons, 'extraLarge');
    }
}
exports.CronService = CronService;
//# sourceMappingURL=CronService.js.map