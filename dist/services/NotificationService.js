"use strict";
// Notification Service - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏•
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationService = void 0;
const LineService_1 = require("./LineService");
const UserService_1 = require("./UserService");
const EmailService_1 = require("./EmailService");
const FileService_1 = require("./FileService");
const FlexMessageTemplateService_1 = require("./FlexMessageTemplateService");
const FlexMessageDesignSystem_1 = require("./FlexMessageDesignSystem");
const config_1 = require("@/utils/config");
const moment_timezone_1 = __importDefault(require("moment-timezone"));
class NotificationService {
    constructor() {
        this.lineService = new LineService_1.LineService();
        this.userService = new UserService_1.UserService();
        this.emailService = new EmailService_1.EmailService();
        this.fileService = new FileService_1.FileService();
        this._sentNotifications = new Set();
    }
    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô
     */
    async sendTaskReminder(task, reminderType) {
        try {
            // Skip if task is not in an active status
            const inactiveStatuses = new Set(['completed', 'approved', 'reviewed', 'submitted', 'rejected', 'cancelled']);
            if (inactiveStatuses.has((task.status || '').toLowerCase())) {
                console.log(`‚ÑπÔ∏è Skip reminder for inactive task: ${task.id} (status: ${task.status})`);
                return;
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const notificationKey = `task_reminder_${task.id}_${reminderType}`;
            if (this._sentNotifications.has(notificationKey)) {
                console.log(`‚ö†Ô∏è Task reminder notification already sent for task: ${task.id}, type: ${reminderType}`);
                return;
            }
            const group = task.group;
            if (!group)
                return;
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô
            const flexMessage = this.createTaskReminderFlexMessage(task, group, reminderType);
            await this.lineService.pushMessage(group.lineGroupId, flexMessage);
            // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö
            const assignees = task.assignedUsers || [];
            for (const assignee of assignees) {
                try {
                    const personalFlexMessage = this.createPersonalTaskReminderFlexMessage(task, group, assignee, reminderType);
                    await this.lineService.pushMessage(assignee.lineUserId, personalFlexMessage);
                    console.log(`‚úÖ Sent personal task reminder to: ${assignee.displayName}`);
                }
                catch (err) {
                    console.warn('‚ö†Ô∏è Failed to send personal task reminder:', assignee.lineUserId, err);
                }
            }
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            this._sentNotifications.add(notificationKey);
            // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô)
            setTimeout(() => {
                this._sentNotifications.delete(notificationKey);
            }, 60 * 60 * 1000);
        }
        catch (error) {
            console.error('‚ùå Error sending task reminder:', error);
            throw error;
        }
    }
    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î
     */
    async sendOverdueNotification(data) {
        try {
            const { task, overdueHours } = data;
            // Skip if task no longer overdue/active
            const inactiveStatuses = new Set(['completed', 'approved', 'reviewed', 'submitted', 'rejected', 'cancelled']);
            if (inactiveStatuses.has((task.status || '').toLowerCase())) {
                console.log(`‚ÑπÔ∏è Skip overdue notification for inactive task: ${task.id} (status: ${task.status})`);
                return;
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const notificationKey = `task_overdue_${task.id}`;
            if (this._sentNotifications.has(notificationKey)) {
                console.log(`‚ö†Ô∏è Task overdue notification already sent for task: ${task.id}`);
                return;
            }
            const group = task.group;
            if (!group)
                return;
            // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°)
            const assignees = task.assignedUsers || [];
            for (const assignee of assignees) {
                try {
                    const personalFlexMessage = this.createPersonalOverdueTaskFlexMessage(task, group, assignee, overdueHours);
                    await this.lineService.pushMessage(assignee.lineUserId, personalFlexMessage);
                    console.log(`‚úÖ Sent personal overdue notification to: ${assignee.displayName}`);
                }
                catch (err) {
                    console.warn('‚ö†Ô∏è Failed to send personal overdue notification:', assignee.lineUserId, err);
                }
            }
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            this._sentNotifications.add(notificationKey);
            // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
            setTimeout(() => {
                this._sentNotifications.delete(notificationKey);
            }, 30 * 60 * 1000);
        }
        catch (error) {
            console.error('‚ùå Error sending overdue notification:', error);
            throw error;
        }
    }
    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
     */
    async sendTaskCreatedNotification(task) {
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const notificationKey = `task_created_${task.id}`;
            if (this._sentNotifications.has(notificationKey)) {
                console.log(`‚ö†Ô∏è Task created notification already sent for task: ${task.id}`);
                return;
            }
            const assignees = task.assignedUsers || [];
            const group = task.group;
            const creator = task.createdByUser;
            if (!group || assignees.length === 0) {
                console.log(`‚ö†Ô∏è Cannot send notification: missing group or assignees for task: ${task.id}`);
                return;
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE Group ID
            if (!group.lineGroupId) {
                console.log(`‚ö†Ô∏è Cannot send notification: missing lineGroupId for group: ${group.id}`);
                return;
            }
            const dueDate = (0, moment_timezone_1.default)(task.dueTime).tz(config_1.config.app.defaultTimezone).format('DD/MM/YYYY HH:mm');
            // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà (Flex) ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏ó‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
            try {
                const groupFlexMessage = this.createTaskCreatedFlexMessage(task, group, creator, dueDate);
                await this.lineService.pushMessage(group.lineGroupId, groupFlexMessage);
                console.log(`‚úÖ Sent group task created notification for task: ${task.id}`);
            }
            catch (err) {
                console.error('‚ùå Failed to send group task created notification:', err);
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error 400 ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
                if (err?.statusCode === 400 || err?.status === 400) {
                    try {
                        const simpleMessage = `üÜï ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà: ${task.title}\nüìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${dueDate}\nüë• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ${assignees.map(a => a.displayName).join(', ')}`;
                        await this.lineService.pushMessage(group.lineGroupId, simpleMessage);
                        console.log(`‚úÖ Sent simple group notification for task: ${task.id}`);
                    }
                    catch (simpleErr) {
                        console.error('‚ùå Failed to send simple group notification:', simpleErr);
                        // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
                    }
                }
                else {
                    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÉ‡∏´‡πâ throw ‡∏ï‡πà‡∏≠
                    throw err;
                }
            }
            // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏•‡∏ô‡πå‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
            for (const assignee of assignees) {
                try {
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE User ID
                    if (!assignee.lineUserId || assignee.lineUserId === 'unknown') {
                        console.warn(`‚ö†Ô∏è Skipping notification for assignee ${assignee.displayName}: invalid lineUserId`);
                        continue;
                    }
                    const personalFlexMessage = this.createPersonalTaskCreatedFlexMessage(task, group, assignee, creator, dueDate);
                    await this.lineService.pushMessage(assignee.lineUserId, personalFlexMessage);
                    console.log(`‚úÖ Sent personal task created notification to: ${assignee.displayName}`);
                }
                catch (err) {
                    console.warn('‚ö†Ô∏è Failed to send personal task created notification:', assignee.lineUserId, err);
                    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error 400 ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
                    if (err?.statusCode === 400 || err?.status === 400) {
                        try {
                            const simpleMessage = `üìã ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà: ${task.title}\nüìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${dueDate}\nüë§ ‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á: ${creator?.displayName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`;
                            await this.lineService.pushMessage(assignee.lineUserId, simpleMessage);
                            console.log(`‚úÖ Sent simple personal notification to: ${assignee.displayName}`);
                        }
                        catch (simpleErr) {
                            console.warn('‚ö†Ô∏è Failed to send simple personal notification:', assignee.lineUserId, simpleErr);
                        }
                    }
                }
            }
            // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢
            if (creator && creator.lineUserId && creator.lineUserId !== 'unknown') {
                try {
                    const creatorFlexMessage = this.createCreatorTaskCreatedFlexMessage(task, group, creator, dueDate);
                    await this.lineService.pushMessage(creator.lineUserId, creatorFlexMessage);
                    console.log(`‚úÖ Sent creator task created notification to: ${creator.displayName}`);
                }
                catch (err) {
                    console.warn('‚ö†Ô∏è Failed to send creator task created notification:', creator.lineUserId, err);
                    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error 400 ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
                    if (err?.statusCode === 400 || err?.status === 400) {
                        try {
                            const simpleMessage = `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${task.title}\nüìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${dueDate}\nüë• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ${assignees.map(a => a.displayName).join(', ')}`;
                            await this.lineService.pushMessage(creator.lineUserId, simpleMessage);
                            console.log(`‚úÖ Sent simple creator notification to: ${creator.displayName}`);
                        }
                        catch (simpleErr) {
                            console.warn('‚ö†Ô∏è Failed to send simple creator notification:', creator.lineUserId, simpleErr);
                        }
                    }
                }
            }
            // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•
            const reviewerId = this.getTaskReviewer(task);
            let reviewer = task.reviewerUser;
            if (!reviewer && reviewerId) {
                reviewer = await this.userService.findById(reviewerId);
            }
            const allUsers = [
                ...assignees,
                ...(reviewer ? [reviewer] : []),
                ...(creator ? [creator] : []),
            ];
            const seenEmails = new Set();
            const emailUsers = allUsers.filter((user) => {
                if (!user.email || !user.isVerified)
                    return false;
                if (seenEmails.has(user.email))
                    return false;
                seenEmails.add(user.email);
                return true;
            });
            for (const user of emailUsers) {
                await this.emailService.sendTaskCreatedNotification(user, task);
            }
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            this._sentNotifications.add(notificationKey);
            // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
            setTimeout(() => {
                this._sentNotifications.delete(notificationKey);
            }, 5 * 60 * 1000);
        }
        catch (error) {
            console.error('‚ùå Error sending task created notification:', error);
            throw error;
        }
    }
    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
     */
    async sendTaskCompletedNotification(task, completedBy) {
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const notificationKey = `task_completed_${task.id}`;
            if (this._sentNotifications.has(notificationKey)) {
                console.log(`‚ö†Ô∏è Task completed notification already sent for task: ${task.id}`);
                return;
            }
            const group = task.group;
            if (!group)
                return;
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            const flexMessage = this.createTaskCompletedFlexMessage(task, group, completedBy);
            await this.lineService.pushMessage(group.lineGroupId, flexMessage);
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            this._sentNotifications.add(notificationKey);
            // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
            setTimeout(() => {
                this._sentNotifications.delete(notificationKey);
            }, 10 * 60 * 1000);
        }
        catch (error) {
            console.error('‚ùå Error sending task completed notification:', error);
            throw error;
        }
    }
    /** ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß */
    async sendTaskDeletedNotification(task) {
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const notificationKey = `task_deleted_${task.id}`;
            if (this._sentNotifications.has(notificationKey)) {
                console.log(`‚ö†Ô∏è Task deleted notification already sent for task: ${task.id}`);
                return;
            }
            const group = task.group;
            if (!group)
                return;
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
            const flexMessage = this.createTaskDeletedFlexMessage(task, group);
            await this.lineService.pushMessage(group.lineGroupId, flexMessage);
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            this._sentNotifications.add(notificationKey);
            // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏•‡∏ö)
            setTimeout(() => {
                this._sentNotifications.delete(notificationKey);
            }, 5 * 60 * 1000);
        }
        catch (error) {
            console.error('‚ùå Error sending task deleted notification:', error);
            throw error;
        }
    }
    /** ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÅ‡∏Å‡πâ‡∏á‡∏≤‡∏ô/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô */
    async sendTaskUpdatedNotification(task, changes) {
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const notificationKey = `task_updated_${task.id}`;
            if (this._sentNotifications.has(notificationKey)) {
                console.log(`‚ö†Ô∏è Task updated notification already sent for task: ${task.id}`);
                return;
            }
            const group = task.group;
            if (!group)
                return;
            const changedFields = [];
            if (typeof changes.title === 'string')
                changedFields.push(`‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á`);
            if (typeof changes.description === 'string')
                changedFields.push(`‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢`);
            if (changes.dueTime)
                changedFields.push(`‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á`);
            if (changes.startTime)
                changedFields.push(`‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°`);
            if (changes.priority)
                changedFields.push(`‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç`);
            if (Array.isArray(changes.tags))
                changedFields.push(`‡πÅ‡∏ó‡πá‡∏Å`);
            if (changes.status)
                changedFields.push(`‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞`);
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
            const flexMessage = this.createTaskUpdatedFlexMessage(task, group, changes, changedFields);
            await this.lineService.pushMessage(group.lineGroupId, flexMessage);
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            this._sentNotifications.add(notificationKey);
            // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï)
            setTimeout(() => {
                this._sentNotifications.delete(notificationKey);
            }, 5 * 60 * 1000);
        }
        catch (error) {
            console.error('‚ùå Error sending task updated notification:', error);
            throw error;
        }
    }
    /** ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô (‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå/‡∏•‡∏¥‡∏á‡∏Å‡πå) */
    async sendTaskSubmittedNotification(task, submitterDisplayName, fileCount, links, comment) {
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const notificationKey = `task_submitted_${task.id}`;
            if (this._sentNotifications.has(notificationKey)) {
                console.log(`‚ö†Ô∏è Task submitted notification already sent for task: ${task.id}`);
                return;
            }
            const group = task.group;
            if (!group?.lineGroupId)
                return;
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô
            const flexMessage = await this.createTaskSubmittedFlexMessage(task, group, submitterDisplayName, fileCount, links, comment);
            // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
            await this.lineService.pushMessage(group.lineGroupId, flexMessage);
            // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏≤‡∏ô
            const reviewerUserId = this.getTaskReviewer(task);
            if (reviewerUserId) {
                const reviewer = await this.userService.findById(reviewerUserId);
                if (reviewer?.lineUserId) {
                    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à
                    const reviewCard = FlexMessageTemplateService_1.FlexMessageTemplateService.createReviewRequestCard(task, group, { submitterDisplayName, fileCount, links }, (0, moment_timezone_1.default)(task.dueTime).tz(config_1.config.app.defaultTimezone).format('DD/MM/YYYY HH:mm'), reviewer.lineUserId);
                    await this.lineService.pushMessage(reviewer.lineUserId, reviewCard);
                }
            }
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            this._sentNotifications.add(notificationKey);
            // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô)
            setTimeout(() => {
                this._sentNotifications.delete(notificationKey);
            }, 60 * 60 * 1000);
        }
        catch (error) {
            console.error('‚ùå Error sending task submitted notification:', error);
        }
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô
     */
    async createTaskSubmittedFlexMessage(task, group, submitterDisplayName, fileCount, links, comment) {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        let files = [];
        if (fileCount > 0) {
            try {
                files = await this.fileService.getTaskFiles(task.id);
            }
            catch (error) {
                console.warn('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÑ‡∏î‡πâ:', error);
            }
        }
        const content = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText('üì§ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà', 'md', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.success, 'bold'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìã ${task.title}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createSeparator('small'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üë§ ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: ${submitterDisplayName}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary),
            ...(comment ? [
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: ${comment.length > 200 ? comment.substring(0, 200) + '...' : comment}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary, undefined, true)
            ] : []),
            ...(fileCount > 0 ? [
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìé ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö: ${fileCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary, 'bold'),
                ...(files.length > 2 ? [
                    FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${files.length - 2} ‡πÑ‡∏ü‡∏•‡πå...`, 'xs', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary)
                ] : [])
            ] : []),
            ...(links && links.length > 0 ? [
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå: ${links.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary)
            ] : []),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createSeparator('small'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText('üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏†‡∏≤‡∏¢‡πÉ‡∏ô: 2 ‡∏ß‡∏±‡∏ô', 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary)
        ];
        const fileButtons = fileCount > 0
            ? files.slice(0, 2).map(file => FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton(`üì• ${file.originalName.substring(0, 8)}...`, 'uri', this.fileService.generateDownloadUrl(group.id, file.id), 'secondary'))
            : [];
        const buttons = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', 'uri', `${config_1.config.baseUrl}/dashboard?groupId=${group.id}&taskId=${task.id}&action=view`, 'primary'),
            ...fileButtons
        ];
        return FlexMessageDesignSystem_1.FlexMessageDesignSystem.createStandardTaskCard('üì§ ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà', 'üì§', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.success, content, buttons, 'extraLarge');
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à
     */
    createReviewRequestFlexMessage(task, group, details, dueText, viewerLineUserId) {
        return FlexMessageTemplateService_1.FlexMessageTemplateService.createReviewRequestCard(task, group, details, dueText, viewerLineUserId);
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
     */
    createTaskAutoApprovedFlexMessage(task, group, viewerLineUserId) {
        const assigneeNames = (task.assignedUsers || []).map((u) => u.displayName).join(', ') || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        const completedDate = (0, moment_timezone_1.default)(task.completedAt).tz(config_1.config.app.defaultTimezone).format('DD/MM/YYYY HH:mm');
        const content = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText('ü§ñ ‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥', 'md', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.success, 'bold'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìã ${task.title}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createSeparator('small'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üë• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ${assigneeNames}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${completedDate}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createSeparator('small'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText('‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏£‡∏ß‡∏à 2 ‡∏ß‡∏±‡∏ô', 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary)
        ];
        const buttons = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', 'uri', `${config_1.config.baseUrl}/dashboard?groupId=${group.id}&taskId=${task.id}&action=view${viewerLineUserId ? `&userId=${viewerLineUserId}` : ''}`, 'primary')
        ];
        return FlexMessageDesignSystem_1.FlexMessageDesignSystem.createStandardTaskCard('ü§ñ ‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥', 'ü§ñ', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.success, content, buttons, 'extraLarge');
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
     */
    createTaskRejectedFlexMessage(task, group, newDueTime, reviewerDisplayName, viewerLineUserId) {
        return FlexMessageTemplateService_1.FlexMessageTemplateService.createRejectedTaskCard(task, group, newDueTime, reviewerDisplayName, viewerLineUserId);
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
     */
    createExtensionApprovedFlexMessage(task, group, newDueTime, requesterDisplayName, viewerLineUserId) {
        return FlexMessageTemplateService_1.FlexMessageTemplateService.createExtensionApprovedCard(task, group, newDueTime, requesterDisplayName, viewerLineUserId);
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
     */
    createExtensionRejectedFlexMessage(task, group, requesterDisplayName, viewerLineUserId) {
        return FlexMessageTemplateService_1.FlexMessageTemplateService.createExtensionRejectedCard(task, group, requesterDisplayName, viewerLineUserId);
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô
     */
    createTaskReminderFlexMessage(task, group, reminderType, viewerLineUserId) {
        const reminderEmoji = this.getReminderEmoji(reminderType);
        const now = (0, moment_timezone_1.default)().tz(config_1.config.app.defaultTimezone);
        const dueMoment = (0, moment_timezone_1.default)(task.dueTime).tz(config_1.config.app.defaultTimezone);
        const remaining = moment_timezone_1.default.duration(dueMoment.diff(now));
        const remainingText = remaining.asDays() >= 1
            ? `${Math.floor(remaining.asDays())} ‡∏ß‡∏±‡∏ô${remaining.hours() > 0 ? ` ${remaining.hours()} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á` : ''}`
            : `${remaining.hours()} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`;
        const dueDate = dueMoment.format('DD/MM/YYYY HH:mm');
        const assigneeNames = (task.assignedUsers || []).map((u) => u.displayName).join(', ') || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        const content = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${dueDate}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‚è≥ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏µ‡∏Å ${remainingText}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üë• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ${assigneeNames}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üéØ ${this.getPriorityText(task.priority)}`, 'sm', this.getPriorityColor(task.priority), 'bold'),
            ...(task.description ? [FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìù ${task.description}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary, undefined, true)] : [])
        ];
        const buttons = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', 'uri', `${config_1.config.baseUrl}/dashboard?groupId=${group.id}&taskId=${task.id}&action=view${viewerLineUserId ? `&userId=${viewerLineUserId}` : ''}`, 'primary')
        ];
        return FlexMessageDesignSystem_1.FlexMessageDesignSystem.createStandardTaskCard(task.title, reminderEmoji, FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.warning, content, buttons, 'extraLarge');
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
     */
    createPersonalTaskReminderFlexMessage(task, group, assignee, reminderType) {
        const reminderText = this.getReminderTimeText(reminderType);
        const reminderEmoji = this.getReminderEmoji(reminderType);
        const now = (0, moment_timezone_1.default)().tz(config_1.config.app.defaultTimezone);
        const dueMoment = (0, moment_timezone_1.default)(task.dueTime).tz(config_1.config.app.defaultTimezone);
        const remaining = moment_timezone_1.default.duration(dueMoment.diff(now));
        const remainingText = remaining.asDays() >= 1
            ? `${Math.floor(remaining.asDays())} ‡∏ß‡∏±‡∏ô${remaining.hours() > 0 ? ` ${remaining.hours()} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á` : ''}`
            : `${remaining.hours()} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`;
        const dueDate = dueMoment.format('DD/MM/YYYY HH:mm');
        const content = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${dueDate}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‚è≥ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏µ‡∏Å ${remainingText}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üéØ ${this.getPriorityText(task.priority)}`, 'sm', this.getPriorityColor(task.priority), 'bold'),
            ...(task.description ? [FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìù ${task.description}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary, undefined, true)] : [])
        ];
        const buttons = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', 'uri', `${config_1.config.baseUrl}/dashboard?groupId=${group.id}&taskId=${task.id}&action=view${assignee?.lineUserId ? `&userId=${assignee.lineUserId}` : ''}`, 'primary'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton('‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô', 'uri', `${config_1.config.baseUrl}/dashboard/submit-tasks?userId=${assignee?.lineUserId || ''}`, 'secondary')
        ];
        return FlexMessageDesignSystem_1.FlexMessageDesignSystem.createStandardTaskCard(`üîî ${reminderText}: ${task.title}`, reminderEmoji, FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.warning, content, buttons, 'extraLarge');
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î
     */
    createOverdueTaskFlexMessage(task, group, overdueHours) {
        return FlexMessageTemplateService_1.FlexMessageTemplateService.createOverdueTaskCard(task, group, overdueHours);
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
     */
    createPersonalOverdueTaskFlexMessage(task, group, assignee, overdueHours) {
        const overdueText = overdueHours < 24
            ? `‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î ${overdueHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`
            : `‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î ${Math.floor(overdueHours / 24)} ‡∏ß‡∏±‡∏ô ${overdueHours % 24} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`;
        const dueDate = (0, moment_timezone_1.default)(task.dueTime).tz(config_1.config.app.defaultTimezone).format('DD/MM/YYYY HH:mm');
        const content = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${dueDate}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô: ${overdueText}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.danger, 'bold'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üéØ ${this.getPriorityText(task.priority)}`, 'sm', this.getPriorityColor(task.priority), 'bold'),
            ...(task.description ? [FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìù ${task.description}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary, undefined, true)] : [])
        ];
        const buttons = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', 'uri', `${config_1.config.baseUrl}/dashboard?groupId=${group.id}&taskId=${task.id}&action=view${assignee?.lineUserId ? `&userId=${assignee.lineUserId}` : ''}`, 'primary'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton('‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô', 'uri', `${config_1.config.baseUrl}/dashboard/submit-tasks?userId=${assignee?.lineUserId || ''}`, 'secondary')
        ];
        return FlexMessageDesignSystem_1.FlexMessageDesignSystem.createStandardTaskCard(`üö® ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${task.title}`, 'üö®', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.danger, content, buttons, 'extraLarge');
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
     */
    createTaskCreatedFlexMessage(task, group, creator, dueDate) {
        return FlexMessageTemplateService_1.FlexMessageTemplateService.createNewTaskCard(task, group, creator, dueDate);
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
     */
    createPersonalTaskCreatedFlexMessage(task, group, assignee, creator, dueDate) {
        const assigneeNames = (task.assignedUsers || []).map((u) => u.displayName).join(', ') || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        const tagsText = (task.tags && task.tags.length > 0) ? `üè∑Ô∏è ${task.tags.map((t) => `#${t}`).join(' ')}` : '';
        const priorityColor = this.getPriorityColor(task.priority);
        const priorityText = this.getPriorityText(task.priority);
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏ß‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const taskCreatedAt = new Date(task.createdAt);
        const oneDayLater = new Date(taskCreatedAt.getTime() + 24 * 60 * 60 * 1000);
        const now = new Date();
        const canRequestExtension = now < oneDayLater;
        const content = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${dueDate}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üë• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ${assigneeNames}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üë§ ‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á: ${creator?.displayName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary),
            ...(priorityText ? [FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üéØ ${priorityText}`, 'sm', priorityColor, 'bold')] : []),
            ...(task.description ? [FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìù ${task.description}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary, undefined, true)] : []),
            ...(tagsText ? [FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(tagsText, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary, undefined, true)] : [])
        ];
        const buttons = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', 'uri', `${config_1.config.baseUrl}/dashboard?groupId=${group.id}&taskId=${task.id}&action=view${assignee?.lineUserId ? `&userId=${assignee.lineUserId}` : ''}`, 'primary'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton('‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô', 'uri', `${config_1.config.baseUrl}/dashboard/submit-tasks?userId=${assignee?.lineUserId || ''}`, 'secondary')
        ];
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏ß‡∏±‡∏ô
        if (canRequestExtension) {
            buttons.push(FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton('‡∏Ç‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô', 'postback', `action=request_extension&taskId=${task.id}&groupId=${group.id}`, 'secondary'));
        }
        return FlexMessageDesignSystem_1.FlexMessageDesignSystem.createStandardTaskCard(`üìã ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà: ${task.title}`, 'üìã', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.primary, content, buttons, 'extraLarge');
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• (‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô)
     */
    createCreatorTaskCreatedFlexMessage(task, group, creator, dueDate) {
        const assigneeNames = (task.assignedUsers || []).map((u) => u.displayName).join(', ') || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        const tagsText = (task.tags && task.tags.length > 0) ? `üè∑Ô∏è ${task.tags.map((t) => `#${t}`).join(' ')}` : '';
        const priorityColor = this.getPriorityColor(task.priority);
        const priorityText = this.getPriorityText(task.priority);
        const content = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${dueDate}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üë• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ${assigneeNames}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üë§ ‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á: ${creator?.displayName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary),
            ...(priorityText ? [FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üéØ ${priorityText}`, 'sm', priorityColor, 'bold')] : []),
            ...(task.description ? [FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìù ${task.description}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary, undefined, true)] : []),
            ...(tagsText ? [FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(tagsText, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary, undefined, true)] : [])
        ];
        const buttons = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡∏≤‡∏ô', 'uri', `${config_1.config.baseUrl}/dashboard?groupId=${group.id}&taskId=${task.id}&action=edit&userId=${creator.lineUserId}`, 'primary')
        ];
        return FlexMessageDesignSystem_1.FlexMessageDesignSystem.createStandardTaskCard(`üìã ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á: ${task.title}`, 'üìã', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.primary, content, buttons, 'extraLarge');
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
     */
    createTaskCompletedFlexMessage(task, group, completedBy) {
        return FlexMessageTemplateService_1.FlexMessageTemplateService.createCompletedTaskCard(task, group, completedBy);
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
     */
    createTaskDeletedFlexMessage(task, group, viewerLineUserId) {
        return FlexMessageTemplateService_1.FlexMessageTemplateService.createDeletedTaskCard(task, group, viewerLineUserId);
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
     */
    createTaskUpdatedFlexMessage(task, group, changes, changedFields, viewerLineUserId) {
        return FlexMessageTemplateService_1.FlexMessageTemplateService.createUpdatedTaskCard(task, group, changes, changedFields, viewerLineUserId);
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏≤‡∏ô
     */
    getTaskReviewer(task) {
        return task.reviewerUserId || task.createdByUserId || null;
    }
    /**
     * ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
     */
    async sendWeeklyReport(group, stats, leaderboard) {
        try {
            const weekStart = (0, moment_timezone_1.default)().tz(config_1.config.app.defaultTimezone).startOf('week').format('DD/MM');
            const weekEnd = (0, moment_timezone_1.default)().tz(config_1.config.app.defaultTimezone).endOf('week').format('DD/MM');
            const flexMessage = this.createWeeklyReportFlexMessage(group, stats, leaderboard, weekStart, weekEnd);
            await this.lineService.pushMessage(group.lineGroupId, flexMessage);
            console.log(`‚úÖ Sent weekly report to group: ${group.name}`);
        }
        catch (error) {
            console.error('‚ùå Error sending weekly report:', error);
            throw error;
        }
    }
    /**
     * ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÉ‡∏´‡πâ admin
     */
    async sendWeeklyReportToAdmins(group, stats, leaderboard) {
        try {
            const weekStart = (0, moment_timezone_1.default)().tz(config_1.config.app.defaultTimezone).startOf('week').format('DD/MM');
            const weekEnd = (0, moment_timezone_1.default)().tz(config_1.config.app.defaultTimezone).endOf('week').format('DD/MM');
            const flexMessage = this.createAdminWeeklyReportFlexMessage(group, stats, leaderboard, weekStart, weekEnd);
            // ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ admin ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
            const admins = await this.userService.getGroupMembers(group.id);
            const adminUsers = admins.filter(member => member.role === 'admin');
            for (const admin of adminUsers) {
                if (admin.lineUserId) {
                    try {
                        await this.lineService.pushMessage(admin.lineUserId, flexMessage);
                        console.log(`‚úÖ Sent admin weekly report to: ${admin.displayName}`);
                    }
                    catch (err) {
                        console.warn('‚ö†Ô∏è Failed to send admin weekly report:', admin.lineUserId, err);
                    }
                }
            }
        }
        catch (error) {
            console.error('‚ùå Error sending admin weekly report:', error);
            throw error;
        }
    }
    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö
     */
    async sendTaskRejectedNotification(task, reviewer, extensionDays) {
        try {
            const group = task.group;
            if (!group)
                return;
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
            const newDueTime = new Date(task.dueTime.getTime() + parseInt(extensionDays) * 24 * 60 * 60 * 1000);
            const reviewerDisplayName = reviewer?.displayName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
            // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏•‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° (‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏ö userId -> ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï)
            const groupCard = this.createTaskRejectedFlexMessage(task, group, newDueTime, reviewerDisplayName);
            await this.lineService.pushMessage(group.lineGroupId, groupCard);
            // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡∏ö userId ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô
            const assignees = task.assignedUsers || [];
            for (const assignee of assignees) {
                try {
                    if (!assignee?.lineUserId)
                        continue;
                    const personalCard = this.createTaskRejectedFlexMessage(task, group, newDueTime, reviewerDisplayName, assignee.lineUserId);
                    await this.lineService.pushMessage(assignee.lineUserId, personalCard);
                }
                catch (err) {
                    console.warn('‚ö†Ô∏è Failed to send personal rejected card:', assignee?.lineUserId, err);
                }
            }
            console.log(`‚úÖ Sent task rejected notification for task: ${task.id}`);
        }
        catch (error) {
            console.error('‚ùå Error sending task rejected notification:', error);
            throw error;
        }
    }
    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
     */
    async sendExtensionApprovedNotification(task, requester, newDueTime) {
        try {
            const group = task.group;
            if (!group || !requester?.lineUserId)
                return;
            const requesterDisplayName = requester?.displayName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
            const personalCard = this.createExtensionApprovedFlexMessage(task, group, newDueTime, requesterDisplayName, requester.lineUserId);
            const groupCard = this.createExtensionApprovedFlexMessage(task, group, newDueTime, requesterDisplayName);
            // ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
            await this.lineService.pushMessage(requester.lineUserId, personalCard);
            // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ (‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏ö userId)
            await this.lineService.pushMessage(group.lineGroupId, groupCard);
            console.log(`‚úÖ Sent extension approved notification for task: ${task.id} to requester: ${requesterDisplayName}`);
        }
        catch (error) {
            console.error('‚ùå Error sending extension approved notification:', error);
            throw error;
        }
    }
    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
     */
    async sendExtensionRejectedNotification(task, requester) {
        try {
            const group = task.group;
            if (!group || !requester?.lineUserId)
                return;
            const requesterDisplayName = requester?.displayName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
            const personalCard = this.createExtensionRejectedFlexMessage(task, group, requesterDisplayName, requester.lineUserId);
            const groupCard = this.createExtensionRejectedFlexMessage(task, group, requesterDisplayName);
            // ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
            await this.lineService.pushMessage(requester.lineUserId, personalCard);
            // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ (‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏ö userId)
            await this.lineService.pushMessage(group.lineGroupId, groupCard);
            console.log(`‚úÖ Sent extension rejected notification for task: ${task.id} to requester: ${requesterDisplayName}`);
        }
        catch (error) {
            console.error('‚ùå Error sending extension rejected notification:', error);
            throw error;
        }
    }
    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
     */
    async sendTaskAutoApprovedNotification(task) {
        try {
            const group = task.group;
            if (!group)
                return;
            const flexMessage = this.createTaskAutoApprovedFlexMessage(task, group);
            await this.lineService.pushMessage(group.lineGroupId, flexMessage);
            console.log(`‚úÖ Sent task auto-approved notification for task: ${task.id}`);
        }
        catch (error) {
            console.error('‚ùå Error sending task auto-approved notification:', error);
            throw error;
        }
    }
    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏≤‡∏ô
     */
    async sendReviewRequest(task, reviewerUserId, details) {
        try {
            const group = task.group;
            if (!group)
                return;
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ reviewerUserId ‡πÄ‡∏õ‡πá‡∏ô LINE User ID ‡∏´‡∏£‡∏∑‡∏≠ database UUID
            let reviewer;
            if (reviewerUserId.startsWith('U')) {
                // ‡πÄ‡∏õ‡πá‡∏ô LINE User ID
                reviewer = await this.userService.findByLineUserId(reviewerUserId);
            }
            else {
                // ‡πÄ‡∏õ‡πá‡∏ô database UUID
                reviewer = await this.userService.findById(reviewerUserId);
            }
            if (!reviewer?.lineUserId)
                return;
            const dueText = (0, moment_timezone_1.default)(task.dueTime).tz(config_1.config.app.defaultTimezone).format('DD/MM/YYYY HH:mm');
            // ‡πÅ‡∏ô‡∏ö userId ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö (reviewer) ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î
            const flexMessage = this.createReviewRequestFlexMessage(task, group, details, dueText, reviewer.lineUserId);
            await this.lineService.pushMessage(reviewer.lineUserId, flexMessage);
            console.log(`‚úÖ Sent review request to: ${reviewer.displayName}`);
        }
        catch (error) {
            console.error('‚ùå Error sending review request:', error);
            throw error;
        }
    }
    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô
     */
    async sendApprovalRequest(task, approverUserId, reviewer) {
        try {
            const group = task.group;
            if (!group)
                return;
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ approverUserId ‡πÄ‡∏õ‡πá‡∏ô LINE User ID ‡∏´‡∏£‡∏∑‡∏≠ database UUID
            let approver;
            if (approverUserId.startsWith('U')) {
                // ‡πÄ‡∏õ‡πá‡∏ô LINE User ID
                approver = await this.userService.findByLineUserId(approverUserId);
            }
            else {
                // ‡πÄ‡∏õ‡πá‡∏ô database UUID
                approver = await this.userService.findById(approverUserId);
            }
            if (!approver?.lineUserId)
                return;
            const flexMessage = FlexMessageTemplateService_1.FlexMessageTemplateService.createApprovalRequestCard(task, group, reviewer, approver.lineUserId);
            await this.lineService.pushMessage(approver.lineUserId, flexMessage);
            console.log(`‚úÖ Sent approval request to: ${approver.displayName}`);
        }
        catch (error) {
            console.error('‚ùå Error sending approval request:', error);
            throw error;
        }
    }
    /**
     * Helper method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
     */
    getReminderTimeText(reminderType) {
        switch (reminderType) {
            case 'P1D':
            case '1d':
                return '‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ';
            case 'PT3H':
            case '3h':
                return '‡∏≠‡∏µ‡∏Å 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á';
            default:
                return '‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥';
        }
    }
    /**
     * Helper method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
     */
    getReminderEmoji(reminderType) {
        switch (reminderType) {
            case 'P1D':
            case '1d':
                return '‚è∞';
            case 'PT3H':
            case '3h':
                return '‚ö°';
            default:
                return 'üîî';
        }
    }
    /**
     * Helper method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
     */
    getPriorityColor(priority) {
        switch (priority) {
            case 'high':
                return '#F44336'; // Red
            case 'medium':
                return '#FF9800'; // Orange
            case 'low':
                return '#4CAF50'; // Green
            default:
                return '#9E9E9E'; // Gray
        }
    }
    /**
     * Helper method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
     */
    getPriorityText(priority) {
        switch (priority) {
            case 'high':
                return '‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å';
            case 'medium':
                return '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
            case 'low':
                return '‡∏ï‡πà‡∏≥';
            default:
                return '‡∏õ‡∏Å‡∏ï‡∏¥';
        }
    }
    /**
     * Helper method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
     */
    calculateCompletionScore(task) {
        const dueTime = (0, moment_timezone_1.default)(task.dueTime).tz(config_1.config.app.defaultTimezone);
        const completedTime = (0, moment_timezone_1.default)(task.completedAt).tz(config_1.config.app.defaultTimezone);
        const diff = completedTime.diff(dueTime, 'hours');
        if (diff <= -24)
            return 100; // ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        if (diff <= 24)
            return 90; // ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        if (diff <= 48)
            return 80; // ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ä‡πâ‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        if (diff <= 72)
            return 70; // ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ä‡πâ‡∏≤
        return 0; // ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ä‡πâ‡∏≤‡∏°‡∏≤‡∏Å
    }
    /** ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à */
    async sendReviewRequestNotification(task, details) {
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const notificationKey = `review_request_${task.id}`;
            if (this._sentNotifications.has(notificationKey)) {
                console.log(`‚ö†Ô∏è Review request notification already sent for task: ${task.id}`);
                return;
            }
            const group = task.group;
            if (!group)
                return;
            const dueText = (0, moment_timezone_1.default)(task.dueTime).tz(config_1.config.app.defaultTimezone).format('DD/MM/YYYY HH:mm');
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏≤‡∏ô
            const flexMessage = this.createReviewRequestFlexMessage(task, group, details, dueText);
            await this.lineService.pushMessage(group.lineGroupId, flexMessage);
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            this._sentNotifications.add(notificationKey);
            // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏≤‡∏ô)
            setTimeout(() => {
                this._sentNotifications.delete(notificationKey);
            }, 10 * 60 * 1000);
        }
        catch (error) {
            console.error('‚ùå Error sending review request notification:', error);
            throw error;
        }
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
     */
    createWeeklyReportFlexMessage(group, stats, leaderboard, weekStart, weekEnd) {
        // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç 1-3
        const medalFor = (rank) => {
            if (rank === 1)
                return 'ü•á';
            if (rank === 2)
                return 'ü•à';
            if (rank === 3)
                return 'ü•â';
            return `${rank}Ô∏è‚É£`;
        };
        const leaderboardContents = leaderboard.slice(0, 10).map((user, index) => {
            const rank = index + 1;
            const medal = medalFor(rank);
            const trend = user.trend === 'up' ? 'üìà' : user.trend === 'down' ? 'üìâ' : '‚û°Ô∏è';
            const totalScore = Number(user.totalScore ?? 0).toFixed(1);
            const scoreText = `${totalScore} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`;
            const onTimeRate = Math.round(user.onTimeRate ?? 0);
            const createdRate = Math.round(user.createdCompletedRate ?? 0);
            return FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', [
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('horizontal', [
                    { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(medal, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary), flex: 0 },
                    { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(user.displayName, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary), flex: 1 },
                    { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(scoreText, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary), flex: 0 },
                    { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(trend, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary), flex: 0 }
                ], 'small'),
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ${onTimeRate}% ‚Ä¢ ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${createdRate}% ‚Ä¢ ‡πÇ‡∏ó‡∏© ${Math.abs(Math.round(user.penaltyPoints ?? 0))} pts`, 'xs', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary)
            ], 'small');
        });
        const content = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', [
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText('üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏•‡∏∏‡πà‡∏°', 'md', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary, 'bold'),
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‚úÖ ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à: ${stats.completedTasks}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.success),
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‚è≥ ‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á: ${stats.pendingTasks}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.warning),
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‚ö†Ô∏è ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${stats.overdueTasks}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.danger)
            ], 'small'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createSeparator('medium'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', [
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText('üèÜ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ô‡∏Ç‡∏¢‡∏±‡∏ô', 'md', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary, 'bold'),
                ...leaderboardContents
            ], 'small')
        ];
        const buttons = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÄ‡∏ï‡πá‡∏°', 'uri', `${config_1.config.baseUrl}/dashboard?groupId=${group.lineGroupId}#leaderboard`, 'primary')
        ];
        return FlexMessageDesignSystem_1.FlexMessageDesignSystem.createStandardTaskCard(`üìä ${group.name}`, 'üìä', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.primary, content, buttons, 'extraLarge');
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÉ‡∏´‡πâ admin
     */
    createAdminWeeklyReportFlexMessage(group, stats, leaderboard, weekStart, weekEnd) {
        const leaderboardContents = leaderboard.slice(0, 5).map((user, index) => {
            const medal = ['ü•á', 'ü•à', 'ü•â', '4Ô∏è‚É£', '5Ô∏è‚É£'][index];
            const trend = user.trend === 'up' ? 'üìà' : user.trend === 'down' ? 'üìâ' : '‚û°Ô∏è';
            const totalScore = Number(user.totalScore ?? 0).toFixed(1);
            return FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', [
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('horizontal', [
                    { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(medal, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary), flex: 0 },
                    { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(user.displayName, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary), flex: 1 },
                    { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`${totalScore} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary), flex: 0 },
                    { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(trend, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary), flex: 0 }
                ], 'small'),
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ${Math.round(user.onTimeRate ?? 0)}% ‚Ä¢ ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${Math.round(user.createdCompletedRate ?? 0)}% ‚Ä¢ ‡πÇ‡∏ó‡∏© ${Math.abs(Math.round(user.penaltyPoints ?? 0))} pts`, 'xs', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary)
            ], 'small');
        });
        const content = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üë• ‡∏Å‡∏•‡∏∏‡πà‡∏°: ${group.name}`, 'md', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary, 'bold'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', [
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText('üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏•‡∏∏‡πà‡∏°', 'md', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary, 'bold'),
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‚úÖ ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à: ${stats.completedTasks}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.success),
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‚è≥ ‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á: ${stats.pendingTasks}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.warning),
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‚ö†Ô∏è ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${stats.overdueTasks}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.danger)
            ], 'small'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createSeparator('medium'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', [
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText('üèÜ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (Top 5)', 'md', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary, 'bold'),
                ...leaderboardContents
            ], 'small')
        ];
        const buttons = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÄ‡∏ï‡πá‡∏°', 'uri', `${config_1.config.baseUrl}/dashboard?groupId=${group.lineGroupId}#leaderboard`, 'primary')
        ];
        return FlexMessageDesignSystem_1.FlexMessageDesignSystem.createStandardTaskCard(`üìä ${group.name}`, 'üìä', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.info, content, buttons, 'extraLarge');
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
     */
    createDailyReportFlexMessage(group, tasks, timezone) {
        const overdueTasks = tasks.filter(t => t.status === 'overdue');
        const inProgressTasks = tasks.filter(t => t.status === 'in_progress');
        const pendingTasks = tasks.filter(t => t.status === 'pending');
        const date = (0, moment_timezone_1.default)().tz(timezone).format('DD/MM/YYYY');
        return FlexMessageTemplateService_1.FlexMessageTemplateService.createDailySummaryCard(group, tasks, timezone);
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
     */
    createPersonalDailyReportFlexMessage(assignee, tasks, timezone, group) {
        const overdueTasks = tasks.filter(t => t.status === 'overdue');
        const inProgressTasks = tasks.filter(t => t.status === 'in_progress');
        const pendingTasks = tasks.filter(t => t.status === 'pending');
        const date = (0, moment_timezone_1.default)().tz(timezone).format('DD/MM/YYYY');
        const header = `üìã ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• - ${assignee.displayName}`;
        const subtitle = `üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${date} | üìä ‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á ${tasks.length} ‡∏á‡∏≤‡∏ô`;
        return FlexMessageTemplateService_1.FlexMessageTemplateService.createPersonalReportCard(assignee, tasks, timezone, group);
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
     */
    createManagerDailyReportFlexMessage(group, stats, timezone) {
        const date = (0, moment_timezone_1.default)().tz(timezone).format('DD/MM/YYYY');
        const content = [
            { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${date}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary), align: 'center' },
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createSeparator('medium'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('horizontal', [
                { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', [
                        FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText('üìã ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', 'xs', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary),
                        FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(stats.totalTasks?.toString() || '0', 'lg', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary, 'bold')
                    ]), flex: 1 },
                { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', [
                        FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText('‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß', 'xs', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary),
                        FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(stats.completedTasks?.toString() || '0', 'lg', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.success, 'bold')
                    ]), flex: 1 }
            ]),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('horizontal', [
                { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', [
                        FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText('‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î', 'xs', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary),
                        FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(stats.overdueTasks?.toString() || '0', 'lg', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.danger, 'bold')
                    ]), flex: 1 },
                { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', [
                        FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText('üìù ‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à', 'xs', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary),
                        FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(stats.pendingReviewTasks?.toString() || '0', 'lg', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.warning, 'bold')
                    ]), flex: 1 }
            ])
        ];
        const buttons = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton('‡∏î‡∏π Dashboard', 'uri', `${config_1.config.baseUrl}/dashboard?groupId=${group.id}`, 'primary')
        ];
        return FlexMessageDesignSystem_1.FlexMessageDesignSystem.createStandardTaskCard('üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£', 'üìä', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.info, content, buttons, 'extraLarge');
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô
     */
    createSupervisorWeeklyReportFlexMessage(group, stats, timezone) {
        const weekStart = (0, moment_timezone_1.default)().tz(timezone).startOf('week').format('DD/MM');
        const weekEnd = (0, moment_timezone_1.default)().tz(timezone).endOf('week').format('DD/MM');
        const content = [
            { ...FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìÖ ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ${weekStart} - ${weekEnd}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary), align: 'center' },
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createSeparator('medium'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText('üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ï‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏≤', 'md', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary, 'bold'),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', [
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üë• ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${stats.totalMembers || 0} ‡∏Ñ‡∏ô`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary),
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìä ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß: ${stats.completedTasks || 0} ‡∏á‡∏≤‡∏ô`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.success),
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‚ö†Ô∏è ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${stats.overdueTasks || 0} ‡∏á‡∏≤‡∏ô`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.danger),
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`üìù ‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à: ${stats.pendingReviewTasks || 0} ‡∏á‡∏≤‡∏ô`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.warning)
            ], 'small')
        ];
        const buttons = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton('‡∏î‡∏π Dashboard', 'uri', `${config_1.config.baseUrl}/dashboard?groupId=${group.id}`, 'primary')
        ];
        return FlexMessageDesignSystem_1.FlexMessageDesignSystem.createStandardTaskCard('üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô', 'üìä', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.neutral, content, buttons, 'extraLarge');
    }
    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
     */
    async sendDailyOverdueSummary() {
        try {
            console.log('üïê Starting daily overdue tasks summary...');
            // ‡πÉ‡∏ä‡πâ TaskService ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const taskService = new (await Promise.resolve().then(() => __importStar(require('./TaskService')))).TaskService();
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            const groups = await taskService.getAllGroups();
            for (const group of groups) {
                try {
                    // ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
                    const overdueTasks = await taskService.getOverdueTasksByGroup(group.id);
                    if (overdueTasks.length === 0) {
                        console.log(`‚úÖ No overdue tasks in group: ${group.name}`);
                        continue;
                    }
                    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö
                    const tasksByAssignee = new Map();
                    for (const task of overdueTasks) {
                        const assignees = task.assignedUsers || [];
                        for (const assignee of assignees) {
                            if (!tasksByAssignee.has(assignee.id)) {
                                tasksByAssignee.set(assignee.id, []);
                            }
                            tasksByAssignee.get(assignee.id).push(task);
                        }
                    }
                    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏ß‡∏°‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
                    for (const [assigneeId, tasks] of tasksByAssignee) {
                        try {
                            const assignee = await this.userService.findById(assigneeId);
                            if (!assignee || !assignee.lineUserId)
                                continue;
                            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                            const tz = group.timezone || config_1.config.app.defaultTimezone;
                            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
                            const avgOverdueHours = Math.round(tasks.reduce((sum, t) => sum + (0, moment_timezone_1.default)().diff((0, moment_timezone_1.default)(t.dueTime), 'hours'), 0) / tasks.length);
                            const summaryCard = FlexMessageTemplateService_1.FlexMessageTemplateService.createOverdueTaskCard(assignee, tasks[0], avgOverdueHours);
                            // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
                            await this.lineService.pushMessage(assignee.lineUserId, summaryCard);
                            console.log(`‚úÖ Sent daily overdue summary to: ${assignee.displayName} (${tasks.length} tasks)`);
                        }
                        catch (err) {
                            console.warn('‚ö†Ô∏è Failed to send daily overdue summary to assignee:', assigneeId, err);
                        }
                    }
                    // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß)
                    console.log(`‚ÑπÔ∏è Skipped sending overdue summary to group: ${group.name} (${overdueTasks.length} tasks) - only personal notifications`);
                }
                catch (err) {
                    console.warn('‚ö†Ô∏è Failed to process group for daily overdue summary:', group.id, err);
                }
            }
            console.log('‚úÖ Daily overdue tasks summary completed');
        }
        catch (error) {
            console.error('‚ùå Error sending daily overdue summary:', error);
            throw error;
        }
    }
}
exports.NotificationService = NotificationService;
//# sourceMappingURL=NotificationService.js.map