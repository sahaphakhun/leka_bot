"use strict";
// Task Service - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskService = void 0;
const typeorm_1 = require("typeorm");
const database_1 = require("@/utils/database");
const models_1 = require("@/models");
const moment_timezone_1 = __importDefault(require("moment-timezone"));
const config_1 = require("@/utils/config");
const GoogleService_1 = require("./GoogleService");
const NotificationService_1 = require("./NotificationService");
const FileService_1 = require("./FileService");
const LineService_1 = require("./LineService");
const UserService_1 = require("./UserService");
const FileBackupService_1 = require("./FileBackupService");
class TaskService {
    constructor() {
        this.taskRepository = database_1.AppDataSource.getRepository(models_1.Task);
        this.groupRepository = database_1.AppDataSource.getRepository(models_1.Group);
        this.userRepository = database_1.AppDataSource.getRepository(models_1.User);
        this.googleService = new GoogleService_1.GoogleService();
        this.notificationService = new NotificationService_1.NotificationService();
        this.fileService = new FileService_1.FileService();
        this.lineService = new LineService_1.LineService();
        this.fileRepository = database_1.AppDataSource.getRepository(models_1.File);
        this.userService = new UserService_1.UserService();
        this.fileBackupService = new FileBackupService_1.FileBackupService();
    }
    /** ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏° ID ‡∏û‡∏£‡πâ‡∏≠‡∏° relations ‡∏´‡∏•‡∏±‡∏Å */
    async getTaskById(taskId) {
        try {
            // Validate UUID format as a safety measure
            const UUID_REGEX = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
            if (!UUID_REGEX.test(taskId)) {
                console.warn(`‚ö†Ô∏è Invalid UUID format for taskId: ${taskId}`);
                return null;
            }
            const task = await this.taskRepository.findOne({
                where: { id: taskId },
                relations: ['assignedUsers', 'createdByUser', 'group', 'attachedFiles']
            });
            return task || null;
        }
        catch (error) {
            console.error('‚ùå Error getting task by id:', error);
            throw error;
        }
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
     * @param data.groupId - LINE Group ID (‡πÄ‡∏ä‡πà‡∏ô "C5d6c442ec0b3287f71787fdd9437e520")
     * @param data.assigneeIds - LINE User IDs (‡πÄ‡∏ä‡πà‡∏ô ["Uc92411a226e4d4c9866adef05068bdf1"])
     * @param data.createdBy - LINE User ID (‡πÄ‡∏ä‡πà‡∏ô "Uc92411a226e4d4c9866adef05068bdf1")
     */
    async createTask(data) {
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if (!data.title || !data.title.trim()) {
                throw new Error('‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô');
            }
            if (!data.createdBy || !data.createdBy.trim()) {
                throw new Error('‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô (createdBy)');
            }
            if (!data.groupId || !data.groupId.trim()) {
                throw new Error('‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏Å‡∏•‡∏∏‡πà‡∏° (groupId)');
            }
            if (!data.assigneeIds || data.assigneeIds.length === 0) {
                throw new Error('‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏ô');
            }
            if (!data.dueTime) {
                throw new Error('‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á');
            }
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Group entity ‡∏à‡∏≤‡∏Å LINE Group ID ‡∏´‡∏£‡∏∑‡∏≠ internal UUID
            const isUuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(data.groupId);
            const group = isUuid
                ? await this.groupRepository.findOneBy({ id: data.groupId })
                : await this.groupRepository.findOneBy({ lineGroupId: data.groupId });
            if (!group) {
                throw new Error(`Group not found for LINE ID: ${data.groupId}`);
            }
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Creator User entity ‡∏à‡∏≤‡∏Å LINE User ID
            let creator = await this.userRepository.findOneBy({ lineUserId: data.createdBy });
            if (!creator) {
                console.error(`‚ùå Creator user not found for LINE ID: ${data.createdBy}`);
                // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ assignee ‡πÅ‡∏£‡∏Å‡πÅ‡∏ó‡∏ô
                if (data.assigneeIds && data.assigneeIds.length > 0) {
                    creator = await this.userRepository.findOneBy({ lineUserId: data.assigneeIds[0] });
                    if (creator) {
                        console.log(`‚úÖ Using fallback creator: ${creator.displayName} (${data.assigneeIds[0]})`);
                        data.createdBy = data.assigneeIds[0];
                    }
                    else {
                        throw new Error(`Creator user not found for LINE ID: ${data.createdBy}`);
                    }
                }
                else {
                    throw new Error(`Creator user not found for LINE ID: ${data.createdBy}`);
                }
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ 2 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ (‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ã‡πâ‡∏≥)
            const twoMinutesAgo = new Date(Date.now() - 2 * 60 * 1000);
            const existingTask = await this.taskRepository.findOne({
                where: {
                    groupId: group.id,
                    title: data.title.trim(), // ‡πÉ‡∏ä‡πâ trim ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
                    createdBy: creator.id,
                    createdAt: (0, typeorm_1.MoreThanOrEqual)(twoMinutesAgo)
                }
            });
            if (existingTask) {
                console.log(`‚ö†Ô∏è Duplicate task detected: ${data.title} by ${data.createdBy} in group ${data.groupId}`);
                throw new Error('‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏ô‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà');
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö _tempId ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å frontend)
            if (data._tempId) {
                const tempTask = await this.taskRepository.findOne({
                    where: {
                        groupId: group.id,
                        title: data.title.trim(),
                        createdBy: creator.id,
                        createdAt: (0, typeorm_1.MoreThanOrEqual)(twoMinutesAgo)
                    }
                });
                if (tempTask) {
                    console.log(`‚ö†Ô∏è Task with tempId ${data._tempId} already exists`);
                    throw new Error('‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà');
                }
            }
            // ‡πÅ‡∏õ‡∏•‡∏á reviewerUserId ‡∏à‡∏≤‡∏Å LINE ‚Üí internal ID ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            let reviewerInternalId = data.reviewerUserId;
            if (reviewerInternalId && reviewerInternalId.startsWith('U')) {
                const reviewer = await this.userRepository.findOneBy({ lineUserId: reviewerInternalId });
                reviewerInternalId = reviewer ? reviewer.id : undefined;
            }
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
            if (!reviewerInternalId) {
                reviewerInternalId = creator.id;
                console.log(`üìù No reviewer specified, creator ${creator.displayName} will be the reviewer`);
            }
            const task = this.taskRepository.create({
                groupId: group.id,
                title: data.title,
                description: data.description,
                dueTime: data.dueTime,
                startTime: data.startTime,
                createdBy: creator.id,
                priority: data.priority || 'medium',
                tags: data.tags || [],
                customReminders: data.customReminders,
                status: 'pending',
                requireAttachment: data.requireAttachment ?? false,
                workflow: {
                    review: {
                        reviewerUserId: reviewerInternalId,
                        status: 'not_requested'
                    },
                    history: [
                        { action: 'create', byUserId: creator.id, at: new Date() }
                    ]
                }
            });
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô
            const savedTask = await this.taskRepository.save(task);
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö
            if (data.assigneeIds.length > 0) {
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ assigneeIds ‡πÄ‡∏õ‡πá‡∏ô database user IDs ‡∏´‡∏£‡∏∑‡∏≠ LINE user IDs
                let assignees;
                // ‡∏ñ‡πâ‡∏≤ ID ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 'U' ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô LINE user ID, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô database user ID
                const isLineUserIds = data.assigneeIds.some(id => id.startsWith('U'));
                if (isLineUserIds) {
                    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å LINE user IDs
                    assignees = await this.userRepository.find({
                        where: {
                            lineUserId: (0, typeorm_1.In)(data.assigneeIds)
                        }
                    });
                }
                else {
                    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å database user IDs
                    assignees = await this.userRepository.find({
                        where: {
                            id: (0, typeorm_1.In)(data.assigneeIds)
                        }
                    });
                }
                if (assignees.length !== data.assigneeIds.length) {
                    const foundIds = isLineUserIds
                        ? assignees.map(u => u.lineUserId)
                        : assignees.map(u => u.id);
                    const missingIds = data.assigneeIds.filter(id => !foundIds.includes(id));
                    console.warn(`‚ö†Ô∏è Some assignees not found: ${missingIds.join(', ')}`);
                }
                savedTask.assignedUsers = assignees;
                await this.taskRepository.save(savedTask);
            }
            // ‡∏ú‡∏π‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô
            if (data.fileIds && data.fileIds.length > 0) {
                const queryRunner = database_1.AppDataSource.createQueryRunner();
                await queryRunner.connect();
                await queryRunner.startTransaction();
                try {
                    for (const fileId of data.fileIds) {
                        await this.fileService.linkFileToTask(fileId, savedTask.id, queryRunner);
                        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                        const file = await queryRunner.manager.findOne(models_1.File, { where: { id: fileId } });
                        if (file) {
                            file.groupId = group.id;
                            file.folderStatus = 'in_progress'; // ‡∏á‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
                            file.attachmentType = 'initial'; // ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô
                            await queryRunner.manager.save(file);
                        }
                    }
                    await queryRunner.commitTransaction();
                    console.log(`‚úÖ Linked ${data.fileIds.length} initial files to task: ${savedTask.title}`);
                    // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                    try {
                        console.log(`üìÅ Starting automatic backup for task creation: ${savedTask.id}`);
                        await this.fileBackupService.backupTaskAttachments(savedTask.id, new Date());
                        console.log(`‚úÖ Automatic backup completed for task creation: ${savedTask.id}`);
                    }
                    catch (err) {
                        console.error('‚ùå Failed to backup task creation files:', err);
                        // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô
                    }
                }
                catch (error) {
                    await queryRunner.rollbackTransaction();
                    console.warn('‚ö†Ô∏è Failed to link files to task. Transaction rolled back:', error);
                    // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
                }
                finally {
                    await queryRunner.release();
                }
            }
            // ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Calendar (‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•)
            try {
                if (!config_1.features.googleCalendar) {
                    console.log('‚ÑπÔ∏è Google Calendar feature is disabled - skipping calendar sync');
                }
                else {
                    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡πÉ‡∏´‡πâ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö/‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à
                    const eventMap = {};
                    const participantIds = new Map();
                    if (savedTask.assignedUsers) {
                        for (const u of savedTask.assignedUsers) {
                            participantIds.set(u.id, 'assignee');
                        }
                    }
                    if (creator?.id)
                        participantIds.set(creator.id, 'creator');
                    if (reviewerInternalId)
                        participantIds.set(reviewerInternalId, 'reviewer');
                    for (const [userId, role] of participantIds.entries()) {
                        try {
                            const { calendarId, eventId } = await this.googleService.syncTaskToUserCalendar(savedTask, userId);
                            eventMap[userId] = { calendarId, eventId };
                            console.log(`‚úÖ Synced task to user calendar (${role}): ${userId} (${eventId})`);
                        }
                        catch (err) {
                            console.warn(`‚ö†Ô∏è Failed to sync task to user calendar (${userId}):`, err);
                        }
                    }
                    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å mapping ‡∏•‡∏á‡∏á‡∏≤‡∏ô
                    savedTask.googleEventIds = eventMap;
                    await this.taskRepository.save(savedTask);
                }
            }
            catch (error) {
                console.warn('‚ö†Ô∏è Failed to sync task to personal calendars:', error);
            }
            // ‡πÇ‡∏´‡∏•‡∏î task ‡∏û‡∏£‡πâ‡∏≠‡∏° relations ‡πÄ‡∏û‡∏∑‡πà‡∏≠ return ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
            const taskWithRelations = await this.taskRepository.findOne({
                where: { id: savedTask.id },
                relations: ['assignedUsers', 'createdByUser', 'group', 'attachedFiles']
            });
            // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
            try {
                if (taskWithRelations) {
                    await this.notificationService.sendTaskCreatedNotification(taskWithRelations);
                }
            }
            catch (error) {
                console.warn('‚ö†Ô∏è Failed to send task created notification:', error);
            }
            return taskWithRelations || savedTask;
        }
        catch (error) {
            console.error('‚ùå Error creating task:', error);
            throw error;
        }
    }
    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏≤‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
     */
    async updateGroupSupervisors(lineGroupId, supervisorLineUserIds) {
        try {
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å LINE Group ID
            const group = await this.groupRepository.findOneBy({ lineGroupId });
            if (!group) {
                console.error('‚ùå Group not found for LINE ID:', lineGroupId);
                return false;
            }
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°
            const updatedSettings = {
                ...group.settings,
                supervisors: supervisorLineUserIds
            };
            group.settings = updatedSettings;
            await this.groupRepository.save(group);
            console.log(`‚úÖ Updated supervisors for group ${lineGroupId}:`, supervisorLineUserIds);
            return true;
        }
        catch (error) {
            console.error('‚ùå Error updating group supervisors:', error);
            return false;
        }
    }
    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏á‡∏≤‡∏ô
     */
    async updateTask(taskId, updates) {
        try {
            const task = await this.taskRepository.findOne({
                where: { id: taskId },
                relations: ['assignedUsers', 'group', 'createdByUser']
            });
            if (!task) {
                throw new Error('Task not found');
            }
            // ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥ diff ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            const prevParticipants = new Set();
            try {
                if (task.createdBy)
                    prevParticipants.add(task.createdBy);
                const prevReviewer = task.workflow?.review?.reviewerUserId;
                if (prevReviewer)
                    prevParticipants.add(prevReviewer);
                if (Array.isArray(task.assignedUsers)) {
                    task.assignedUsers.forEach(u => prevParticipants.add(u.id));
                }
            }
            catch { }
            // Prevent accidental overwrite of relations like attachedFiles
            const safeUpdates = { ...updates };
            if ('attachedFiles' in safeUpdates) {
                delete safeUpdates.attachedFiles;
            }
            // Apply primitive/field updates only
            Object.assign(task, safeUpdates);
            // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
            const assigneeUpdates = updates;
            if (assigneeUpdates.assigneeIds && Array.isArray(assigneeUpdates.assigneeIds)) {
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ assigneeIds ‡πÄ‡∏õ‡πá‡∏ô database user IDs ‡∏´‡∏£‡∏∑‡∏≠ LINE user IDs
                let assignees;
                const isLineUserIds = assigneeUpdates.assigneeIds.some((id) => id.startsWith('U'));
                if (isLineUserIds) {
                    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å LINE user IDs
                    assignees = await this.userRepository.find({
                        where: {
                            lineUserId: (0, typeorm_1.In)(assigneeUpdates.assigneeIds)
                        }
                    });
                }
                else {
                    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å database user IDs
                    assignees = await this.userRepository.find({
                        where: {
                            id: (0, typeorm_1.In)(assigneeUpdates.assigneeIds)
                        }
                    });
                }
                if (assignees.length !== assigneeUpdates.assigneeIds.length) {
                    const foundIds = isLineUserIds
                        ? assignees.map(u => u.lineUserId)
                        : assignees.map(u => u.id);
                    const missingIds = assigneeUpdates.assigneeIds.filter((id) => !foundIds.includes(id));
                    console.warn(`‚ö†Ô∏è Some assignees not found during update: ${missingIds.join(', ')}`);
                }
                task.assignedUsers = assignees;
            }
            // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏ú‡πà‡∏≤‡∏ô API ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÉ‡∏ô updates
            const anyUpdates = updates;
            if (anyUpdates && anyUpdates.reviewAction === 'revise') {
                const reviewerId = anyUpdates.reviewerUserId;
                const reviewerComment = anyUpdates.reviewerComment;
                const newDueTime = updates.dueTime;
                task.workflow = {
                    ...(task.workflow || {}),
                    review: {
                        ...(task.workflow?.review || {}),
                        status: 'rejected',
                        reviewerComment,
                        reviewedAt: new Date()
                    },
                    history: [
                        ...(task.workflow?.history || []),
                        { action: 'reject', byUserId: reviewerId || task.createdBy, at: new Date(), note: reviewerComment },
                        { action: 'revise_due', byUserId: reviewerId || task.createdBy, at: new Date(), note: newDueTime ? newDueTime.toISOString() : undefined }
                    ]
                };
                task.status = 'pending';
            }
            // If caller provides fileIds, link them additively (do not remove existing)
            const incomingFileIds = updates?.fileIds;
            if (incomingFileIds && Array.isArray(incomingFileIds) && incomingFileIds.length > 0) {
                for (const fid of incomingFileIds) {
                    try {
                        await this.fileService.linkFileToTask(fid, task.id);
                    }
                    catch (err) {
                        console.warn('‚ö†Ô∏è Failed to link file during updateTask:', fid, err);
                    }
                }
            }
            const updatedTask = await this.taskRepository.save(task);
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì diff ‡∏ú‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô (‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö)
            try {
                const nextParticipants = new Set();
                if (updatedTask.createdBy)
                    nextParticipants.add(updatedTask.createdBy);
                const nextReviewer = updatedTask.workflow?.review?.reviewerUserId;
                if (nextReviewer)
                    nextParticipants.add(nextReviewer);
                if (Array.isArray(updatedTask.assignedUsers)) {
                    updatedTask.assignedUsers.forEach((u) => nextParticipants.add(u.id));
                }
                const added = [];
                const removed = [];
                for (const id of nextParticipants) {
                    if (!prevParticipants.has(id))
                        added.push(id);
                }
                for (const id of prevParticipants) {
                    if (!nextParticipants.has(id))
                        removed.push(id);
                }
                const map = updatedTask.googleEventIds || {};
                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡πÉ‡∏´‡πâ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
                for (const userId of added) {
                    try {
                        const { calendarId, eventId } = await this.googleService.syncTaskToUserCalendar(updatedTask, userId);
                        map[userId] = { calendarId, eventId };
                    }
                    catch (err) {
                        console.warn(`‚ö†Ô∏è Failed to add user calendar event (${userId}):`, err);
                    }
                }
                // ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å ‚Üí ‡∏•‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                for (const userId of removed) {
                    try {
                        await this.googleService.removeTaskFromUserCalendar(updatedTask, userId);
                        delete map[userId];
                    }
                    catch (err) {
                        console.warn(`‚ö†Ô∏è Failed to remove user calendar event (${userId}):`, err);
                    }
                }
                updatedTask.googleEventIds = map;
                if (added.length > 0 || removed.length > 0) {
                    await this.taskRepository.save(updatedTask);
                }
            }
            catch (err) {
                console.warn('‚ö†Ô∏è Failed to diff participants for calendar sync:', err);
            }
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô Google Calendar
            try {
                await this.googleService.updateTaskInCalendar(task, updates);
            }
            catch (error) {
                console.warn('‚ö†Ô∏è Failed to update task in Google Calendar:', error);
            }
            // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
            try {
                const anyUpdates = updates;
                if (anyUpdates && anyUpdates.reviewAction === 'revise') {
                    const reviewerId = anyUpdates.reviewerUserId;
                    let reviewerDisplayName;
                    if (reviewerId) {
                        const reviewer = reviewerId.startsWith('U')
                            ? await this.userRepository.findOneBy({ lineUserId: reviewerId })
                            : await this.userRepository.findOneBy({ id: reviewerId });
                        reviewerDisplayName = reviewer?.displayName;
                    }
                    if (updates.dueTime) {
                        await this.notificationService.sendTaskRejectedNotification(updatedTask, reviewerDisplayName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏', updates.dueTime.toISOString());
                    }
                }
            }
            catch (err) {
                console.warn('‚ö†Ô∏è Failed to send task rejected notification:', err);
            }
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Google Calendar (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•/‡∏£‡∏≤‡∏¢‡∏Å‡∏•‡∏∏‡πà‡∏°)
            try {
                await this.googleService.updateTaskInCalendar(updatedTask, updates);
                console.log(`‚úÖ Updated task in Google Calendar: ${updatedTask.id}`);
            }
            catch (err) {
                console.warn('‚ö†Ô∏è Failed to update task in Google Calendar:', err);
            }
            // ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏á‡∏≤‡∏ô/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö ‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏µ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏•‡πâ‡∏ß)
            try {
                const anyUpdates2 = updates;
                if (!anyUpdates2 || anyUpdates2.reviewAction !== 'revise') {
                    await this.notificationService.sendTaskUpdatedNotification(updatedTask, updates);
                }
            }
            catch (err) {
                console.warn('‚ö†Ô∏è Failed to send task updated notification:', err);
            }
            return updatedTask;
        }
        catch (error) {
            console.error('‚ùå Error updating task:', error);
            throw error;
        }
    }
    /** ‡∏•‡∏ö‡∏á‡∏≤‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏ö Event ‡πÉ‡∏ô Google Calendar ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ */
    async deleteTask(taskId) {
        try {
            const task = await this.taskRepository.findOne({ where: { id: taskId }, relations: ['assignedUsers', 'group'] });
            if (!task)
                return;
            // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å Google Calendar ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ event
            try {
                await this.googleService.removeTaskFromCalendar(task);
            }
            catch (error) {
                console.warn('‚ö†Ô∏è Failed to remove task from Google Calendar:', error);
            }
            await this.taskRepository.delete({ id: taskId });
            // ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡πà‡∏≤‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            try {
                await this.notificationService.sendTaskDeletedNotification(task);
            }
            catch (err) {
                console.warn('‚ö†Ô∏è Failed to send task deleted notification:', err);
            }
        }
        catch (error) {
            console.error('‚ùå Error deleting task:', error);
            throw error;
        }
    }
    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô
     */
    async updateTaskStatus(taskId, status) {
        try {
            const task = await this.taskRepository.findOneBy({ id: taskId });
            if (!task) {
                throw new Error('Task not found');
            }
            task.status = status;
            if (status === 'completed') {
                task.completedAt = new Date();
                // ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå completed
                try {
                    const files = await database_1.AppDataSource
                        .getRepository('files')
                        .createQueryBuilder('file')
                        .leftJoin('file.linkedTasks', 'task')
                        .where('task.id = :taskId', { taskId })
                        .getMany();
                    for (const f of files) {
                        await database_1.AppDataSource
                            .createQueryBuilder()
                            .update('files')
                            .set({ folderStatus: 'completed' })
                            .where('id = :id', { id: f.id })
                            .execute();
                    }
                }
                catch (err) {
                    console.warn('‚ö†Ô∏è Failed to move files to completed folder:', err);
                }
            }
            const updatedTask = await this.taskRepository.save(task);
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Google Calendar (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•/‡∏£‡∏≤‡∏¢‡∏Å‡∏•‡∏∏‡πà‡∏°)
            try {
                await this.googleService.updateTaskInCalendar(updatedTask, { status });
                console.log(`‚úÖ Updated task status in Google Calendar: ${updatedTask.id}`);
            }
            catch (err) {
                console.warn('‚ö†Ô∏è Failed to update task status in Google Calendar:', err);
            }
            return updatedTask;
        }
        catch (error) {
            console.error('‚ùå Error updating task status:', error);
            throw error;
        }
    }
    /**
     * ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô
     */
    async completeTask(taskId, completedBy) {
        try {
            const task = await this.taskRepository.findOne({
                where: { id: taskId },
                relations: ['assignedUsers', 'attachedFiles', 'group']
            });
            if (!task) {
                throw new Error('Task not found');
            }
            // ‡πÅ‡∏õ‡∏•‡∏á LINE User ID ‚Üí internal user id ‡∏´‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô LINE ID
            let completedByInternalId = completedBy;
            if (completedByInternalId && completedByInternalId.startsWith('U')) {
                const user = await this.userRepository.findOneBy({ lineUserId: completedByInternalId });
                if (!user) {
                    throw new Error('CompletedBy user not found');
                }
                completedByInternalId = user.id;
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡πÉ‡∏´‡∏°‡πà
            if (task.status === 'pending' || task.status === 'in_progress') {
                // ‡∏Å‡∏£‡∏ì‡∏µ‡∏á‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                if (!this.checkApprovalPermission(task, completedByInternalId)) {
                    throw new Error('Only task reviewers or creators can approve tasks');
                }
            }
            else {
                // ‡∏Å‡∏£‡∏ì‡∏µ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô
                if (!this.checkCompletionPermission(task, completedByInternalId)) {
                    throw new Error('Only task reviewers can complete tasks');
                }
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö requireAttachment ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
            // if (task.requireAttachment) {
            //   const hasFile = (task.attachedFiles && task.attachedFiles.length > 0);
            //   if (!hasFile) {
            //     throw new Error('Attachment required to complete this task');
            //   }
            // }
            task.status = 'completed';
            task.completedAt = new Date();
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡πÇ‡∏ü‡∏•‡∏ß‡πå
            task.workflow = {
                ...(task.workflow || {}),
                review: {
                    ...task.workflow?.review,
                    status: 'approved',
                    reviewedAt: new Date()
                },
                history: [
                    ...(task.workflow?.history || []),
                    { action: 'approve', byUserId: completedByInternalId, at: new Date() }
                ]
            };
            const completedTask = await this.taskRepository.save(task);
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô Google Calendar
            try {
                await this.googleService.updateTaskInCalendar(task, {
                    status: 'completed',
                    completedAt: task.completedAt
                });
            }
            catch (error) {
                console.warn('‚ö†Ô∏è Failed to update completed task in Google Calendar:', error);
            }
            // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡πà‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            try {
                const completedByUser = await this.userRepository.findOneBy({ id: completedByInternalId });
                if (completedByUser) {
                    await this.notificationService.sendTaskCompletedNotification({ ...completedTask, group: task.group }, completedByUser);
                }
            }
            catch (err) {
                console.warn('‚ö†Ô∏è Failed to send task completed notification:', err);
            }
            return completedTask;
        }
        catch (error) {
            console.error('‚ùå Error completing task:', error);
            throw error;
        }
    }
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô
     */
    checkApprovalPermission(task, userId) {
        const isCreator = task.createdBy === userId;
        const isReviewer = task.workflow?.review?.reviewerUserId === userId;
        return isCreator || isReviewer;
    }
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô
     */
    checkCompletionPermission(task, userId) {
        const reviewerUserId = task.workflow?.review?.reviewerUserId;
        return reviewerUserId === userId;
    }
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô
     */
    checkTaskPermission(task, userId) {
        const isAssignee = task.assignedUsers.some(user => user.id === userId);
        const isCreator = task.createdBy === userId;
        const isReviewer = task.workflow?.review?.reviewerUserId === userId;
        return isAssignee || isCreator || isReviewer;
    }
    /** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏á‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô/‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô) */
    isTaskPendingAction(task) {
        if (!task) {
            return false;
        }
        const terminalStatuses = ['submitted', 'reviewed', 'approved', 'completed', 'cancelled'];
        if (terminalStatuses.includes(task.status)) {
            return false;
        }
        if (task.submittedAt) {
            return false;
        }
        if (this.taskHasSubmission(task)) {
            return false;
        }
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡πâ‡∏≤‡∏á (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ workflow/submittedAt ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å)
        const hasSubmissionFiles = Array.isArray(task.attachedFiles)
            ? task.attachedFiles.some((f) => f?.attachmentType === 'submission')
            : false;
        if (hasSubmissionFiles) {
            return false;
        }
        // Additional guard: if review has been requested, treat as not actionable for assignee
        const review = task.workflow?.review;
        if (review && (review.status === 'pending' || !!review.reviewRequestedAt)) {
            return false;
        }
        return true;
    }
    /** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å workflow ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà */
    taskHasSubmission(task) {
        if (!task || !task.workflow) {
            return false;
        }
        const workflow = task.workflow;
        const submissions = workflow.submissions;
        if (Array.isArray(submissions)) {
            return submissions.length > 0;
        }
        if (submissions && typeof submissions === 'object') {
            return Object.keys(submissions).length > 0;
        }
        return false;
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏≤‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
     */
    getTaskReviewer(task) {
        const reviewerUserId = task.workflow?.review?.reviewerUserId;
        return reviewerUserId || task.createdBy;
    }
    /** ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô (‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå) */
    async recordSubmission(taskId, submitterLineUserId, fileIds, comment, links) {
        const queryRunner = database_1.AppDataSource.createQueryRunner();
        await queryRunner.connect();
        await queryRunner.startTransaction();
        let saved;
        let task;
        let submitter;
        try {
            const foundTask = await queryRunner.manager.findOne(models_1.Task, {
                where: { id: taskId },
                relations: ['assignedUsers', 'group', 'attachedFiles']
            });
            if (!foundTask)
                throw new Error('Task not found');
            task = foundTask;
            // ‡πÅ‡∏õ‡∏•‡∏á LINE ‚Üí internal user id ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á temporary user
            let foundSubmitter = await queryRunner.manager.findOne(models_1.User, {
                where: { lineUserId: submitterLineUserId }
            });
            if (!foundSubmitter) {
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á temporary user ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô
                console.log(`‡∏™‡∏£‡πâ‡∏≤‡∏á temporary user ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô: ${submitterLineUserId}`);
                foundSubmitter = queryRunner.manager.create(models_1.User, {
                    lineUserId: submitterLineUserId,
                    displayName: `‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô (${submitterLineUserId.substring(0, 8)}...)`,
                    groupId: task.groupId,
                    role: 'member',
                    isActive: true
                });
                foundSubmitter = await queryRunner.manager.save(foundSubmitter);
            }
            submitter = foundSubmitter;
            // ‡∏ú‡∏π‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå
            for (const fid of fileIds) {
                await this.fileService.linkFileToTask(fid, task.id, queryRunner);
                const file = await queryRunner.manager.findOne(models_1.File, { where: { id: fid } });
                if (file) {
                    file.groupId = task.groupId;
                    file.folderStatus = 'completed';
                    file.attachmentType = 'submission'; // ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏ï‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô
                    await queryRunner.manager.save(file);
                }
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö requireAttachment
            if (task.requireAttachment && fileIds.length === 0) {
                throw new Error('‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô');
            }
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡πÇ‡∏ü‡∏•‡∏ß‡πå
            const now = new Date();
            const lateSubmission = task.dueTime < now;
            const existingSubmissions = task.workflow?.submissions || [];
            const submissions = existingSubmissions.concat({
                submittedByUserId: submitter.id,
                submittedAt: now,
                fileIds,
                comment,
                links: links || [],
                lateSubmission
            });
            const reviewDue = new Date(now.getTime() + 2 * 24 * 60 * 60 * 1000);
            // ‡πÉ‡∏ä‡πâ helper method ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à
            const reviewerUserId = this.getTaskReviewer(task);
            task.workflow = {
                ...(task.workflow || {}),
                submissions,
                review: {
                    reviewerUserId: reviewerUserId,
                    status: 'pending',
                    reviewRequestedAt: now,
                    reviewDueAt: reviewDue,
                    lateReview: false
                },
                history: [
                    ...(task.workflow?.history || []),
                    { action: 'submit', byUserId: submitter.id, at: now, note: `files=${fileIds.join(',')}` }
                ]
            };
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö workflow
            task.submittedAt = now;
            if (!['completed', 'approved'].includes(task.status)) {
                task.status = 'submitted';
            }
            saved = await queryRunner.manager.save(task);
            await queryRunner.commitTransaction();
        }
        catch (error) {
            await queryRunner.rollbackTransaction();
            console.error('‚ùå Error recording submission:', error);
            throw error;
        }
        finally {
            await queryRunner.release();
        }
        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à
        const fileLinks = fileIds.map(fid => this.fileService.generateDownloadUrl(task.group.id, fid));
        // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2 ‡∏ß‡∏±‡∏ô
        try {
            const reviewerInternalId = this.getTaskReviewer(saved);
            console.log(`üîç Looking for reviewer with ID: ${reviewerInternalId}`);
            const reviewer = await this.userRepository.findOneBy({ id: reviewerInternalId });
            if (reviewer) {
                console.log(`‚úÖ Found reviewer: ${reviewer.displayName} (${reviewer.lineUserId})`);
                await this.notificationService.sendReviewRequest(saved, reviewer.lineUserId, {
                    submitterDisplayName: submitter.displayName,
                    fileCount: fileIds.length,
                    links: (links && links.length > 0) ? links : fileLinks,
                    comment: comment || ''
                });
                console.log(`üì§ Review request sent to reviewer: ${reviewer.displayName}`);
            }
            else {
                console.warn(`‚ö†Ô∏è Reviewer not found for ID: ${reviewerInternalId}`);
            }
        }
        catch (err) {
            console.error('‚ùå Failed to send review request notification:', err);
            // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        }
        // ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô
        try {
            if (task.group) {
                console.log(`üì¢ Sending task submitted notification to group: ${task.group.name || task.group.id}`);
                await this.notificationService.sendTaskSubmittedNotification({ ...saved, group: task.group }, submitter.displayName, fileIds.length, links && links.length > 0 ? links : fileLinks, comment);
                console.log(`‚úÖ Task submitted notification sent to group`);
            }
            else {
                console.warn(`‚ö†Ô∏è Task has no group, skipping group notification`);
            }
        }
        catch (err) {
            console.error('‚ùå Failed to send task submitted notification:', err);
            // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        }
        // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        try {
            if (fileIds.length > 0) {
                console.log(`üìÅ Starting automatic backup for task submission: ${task.id}`);
                await this.fileBackupService.backupOnTaskSubmission(task.id, submitter.lineUserId || submitter.id, fileIds);
                console.log(`‚úÖ Automatic backup completed for task submission: ${task.id}`);
            }
        }
        catch (err) {
            console.error('‚ùå Failed to backup task submission files:', err);
            // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô
        }
        return saved;
    }
    /** ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡∏∞‡∏û‡πâ‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î 2 ‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß */
    async getTasksLateForReview() {
        try {
            const candidates = await this.taskRepository.createQueryBuilder('task')
                .leftJoinAndSelect('task.group', 'group')
                .where('task.status IN (:...statuses)', { statuses: ['pending', 'in_progress'] })
                .orderBy('task.updatedAt', 'DESC')
                .getMany();
            const now = new Date();
            return candidates.filter(t => {
                const rv = t.workflow?.review;
                if (!rv)
                    return false;
                return rv.status === 'pending' && rv.reviewDueAt && new Date(rv.reviewDueAt) < now && !rv.lateReview;
            });
        }
        catch (error) {
            console.error('‚ùå Error getting tasks late for review:', error);
            return [];
        }
    }
    /** ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à (review.status === 'pending') */
    async getTasksPendingReview() {
        try {
            const candidates = await this.taskRepository.createQueryBuilder('task')
                .leftJoinAndSelect('task.group', 'group')
                .where('task.status IN (:...statuses)', { statuses: ['pending', 'in_progress'] })
                .orderBy('task.updatedAt', 'DESC')
                .getMany();
            return candidates.filter(t => {
                const rv = t.workflow?.review;
                return !!rv && rv.status === 'pending';
            });
        }
        catch (error) {
            console.error('‚ùå Error getting tasks pending review:', error);
            return [];
        }
    }
    /** ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤ */
    async markLateReview(taskId) {
        try {
            const task = await this.taskRepository.findOneBy({ id: taskId });
            if (!task)
                return;
            const wf = task.workflow || {};
            if (wf.review) {
                wf.review.lateReview = true;
                wf.history = [...(wf.history || []), { action: 'reject', byUserId: this.getTaskReviewer(task), at: new Date(), note: 'late_review' }];
                task.workflow = wf;
                await this.taskRepository.save(task);
            }
        }
        catch (error) {
            console.error('‚ùå Error marking late review:', error);
        }
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
     * @param groupId - LINE Group ID (‡πÄ‡∏ä‡πà‡∏ô "C5d6c442ec0b3287f71787fdd9437e520")
     * @param options.assigneeId - LINE User ID (‡πÄ‡∏ä‡πà‡∏ô "Uc92411a226e4d4c9866adef05068bdf1")
     */
    async getGroupTasks(groupId, options = {}) {
        try {
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Group entity ‡∏à‡∏≤‡∏Å LINE Group ID ‡∏´‡∏£‡∏∑‡∏≠ UUID
            const isUuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(groupId);
            const group = isUuid
                ? await this.groupRepository.findOneBy({ id: groupId })
                : await this.groupRepository.findOneBy({ lineGroupId: groupId });
            if (!group) {
                throw new Error(`Group not found for LINE ID: ${groupId}`);
            }
            const queryBuilder = this.taskRepository.createQueryBuilder('task')
                .leftJoinAndSelect('task.assignedUsers', 'assignee')
                .leftJoinAndSelect('task.createdByUser', 'creator')
                .leftJoinAndSelect('task.attachedFiles', 'file')
                .where('task.groupId = :groupId', { groupId: group.id });
            if (options.status) {
                queryBuilder.andWhere('task.status = :status', { status: options.status });
            }
            if (options.assigneeId) {
                // ‡πÅ‡∏õ‡∏•‡∏á LINE User ID ‡πÄ‡∏õ‡πá‡∏ô internal UUID
                const assignee = await this.userRepository.findOneBy({ lineUserId: options.assigneeId });
                if (assignee) {
                    queryBuilder.andWhere('assignee.id = :assigneeId', { assigneeId: assignee.id });
                }
                else {
                    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ user ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ tasks ‡πÉ‡∏î‡πÜ
                    queryBuilder.andWhere('1 = 0'); // Force empty result
                }
            }
            if (options.requireAttachmentOnly) {
                queryBuilder.andWhere('task.requireAttachment = TRUE');
            }
            if (options.tags && options.tags.length > 0) {
                queryBuilder.andWhere('task.tags && :tags', { tags: options.tags });
            }
            if (options.startDate) {
                queryBuilder.andWhere('task.dueTime >= :startDate', { startDate: options.startDate });
            }
            if (options.endDate) {
                queryBuilder.andWhere('task.dueTime <= :endDate', { endDate: options.endDate });
            }
            queryBuilder.orderBy('task.dueTime', 'ASC');
            const total = await queryBuilder.getCount();
            if (options.limit) {
                queryBuilder.limit(options.limit);
            }
            if (options.offset) {
                queryBuilder.offset(options.offset);
            }
            const tasks = await queryBuilder.getMany();
            return { tasks, total };
        }
        catch (error) {
            console.error('‚ùå Error getting group tasks:', error);
            throw error;
        }
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
     */
    async getTasksForReminder() {
        try {
            const now = new Date();
            const next24Hours = (0, moment_timezone_1.default)().add(24, 'hours').toDate();
            return await this.taskRepository.createQueryBuilder('task')
                .leftJoinAndSelect('task.assignedUsers', 'assignee')
                .leftJoinAndSelect('task.group', 'group')
                .where('task.status IN (:...statuses)', { statuses: ['pending', 'in_progress'] })
                .andWhere('task.dueTime BETWEEN :now AND :next24Hours', { now, next24Hours })
                .getMany();
        }
        catch (error) {
            console.error('‚ùå Error getting tasks for reminder:', error);
            throw error;
        }
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
     */
    async getUserTasks(userId, statuses = ['pending', 'in_progress']) {
        try {
            console.log('üîç getUserTasks called with:', { userId, statuses });
            // Validate input parameters
            if (!userId) {
                throw new Error('User ID is required');
            }
            if (!statuses || statuses.length === 0) {
                console.warn('‚ö†Ô∏è No statuses provided, using default: ["pending", "in_progress"]');
                statuses = ['pending', 'in_progress'];
            }
            // Validate statuses against known enum values
            const validStatuses = ['pending', 'in_progress', 'submitted', 'reviewed', 'approved', 'completed', 'rejected', 'cancelled', 'overdue'];
            const invalidStatuses = statuses.filter(status => !validStatuses.includes(status));
            if (invalidStatuses.length > 0) {
                console.warn(`‚ö†Ô∏è Invalid statuses found: ${invalidStatuses.join(', ')}. Filtering them out.`);
                statuses = statuses.filter(status => validStatuses.includes(status));
            }
            if (statuses.length === 0) {
                console.warn('‚ö†Ô∏è No valid statuses remaining, returning empty array');
                return [];
            }
            console.log('üìä Executing query with validated parameters:', { userId, statuses });
            // Try a more defensive approach with error handling for each step
            try {
                // First, verify the user exists in our records
                const userExists = await this.userRepository.findOneBy({ id: userId });
                if (!userExists) {
                    console.warn(`‚ö†Ô∏è User ${userId} not found in database`);
                    return [];
                }
                console.log('‚úÖ User verification passed');
                // Try a simpler query first to isolate the issue
                console.log('üîç Attempting simple task count query...');
                const taskCount = await this.taskRepository
                    .createQueryBuilder('task')
                    .leftJoin('task.assignedUsers', 'assignee')
                    .where('assignee.id = :userId', { userId })
                    .getCount();
                console.log(`üìä Found ${taskCount} total tasks assigned to user`);
                if (taskCount === 0) {
                    console.log('‚ÑπÔ∏è No tasks assigned to user, returning empty array');
                    return [];
                }
                // Now try the full query with relations
                console.log('üîç Attempting full query with relations...');
                const queryBuilder = this.taskRepository.createQueryBuilder('task')
                    .leftJoinAndSelect('task.assignedUsers', 'assignee')
                    .leftJoinAndSelect('task.group', 'group')
                    .where('assignee.id = :userId', { userId })
                    .andWhere('task.status IN (:...statuses)', { statuses })
                    .orderBy('task.dueTime', 'ASC');
                // Log the generated SQL for debugging
                console.log('üìù Generated SQL:', queryBuilder.getSql());
                console.log('üìã Query parameters:', queryBuilder.getParameters());
                const tasks = await queryBuilder.getMany();
                console.log(`‚úÖ getUserTasks completed successfully. Found ${tasks.length} tasks`);
                return tasks;
            }
            catch (queryError) {
                console.error('‚ùå Query execution error:', queryError);
                // Try an even simpler fallback query using raw SQL
                console.log('üîÑ Attempting fallback raw SQL query...');
                try {
                    const rawTasks = await this.taskRepository.query(`
            SELECT 
              t.id,
              t.title,
              t.status,
              t."dueTime",
              t."groupId"
            FROM tasks t
            INNER JOIN task_assignees ta ON t.id = ta."taskId"
            WHERE ta."userId" = $1
              AND t.status = ANY($2::text[])
            ORDER BY t."dueTime" ASC
          `, [userId, statuses]);
                    console.log(`‚úÖ Fallback query returned ${rawTasks.length} tasks`);
                    // Convert raw results to Task entities (simplified)
                    // Using any type to bypass complex Task entity creation issues
                    return rawTasks.map((row) => {
                        // Create a simplified task object that satisfies the Task interface
                        return {
                            id: row.id,
                            title: row.title,
                            status: row.status,
                            dueTime: row.dueTime,
                            groupId: row.groupId,
                            description: null,
                            priority: 'medium',
                            tags: [],
                            requireAttachment: false,
                            createdBy: '',
                            remindersSent: [],
                            workflow: {},
                            createdAt: new Date(),
                            updatedAt: new Date(),
                            assignedUsers: [],
                            attachedFiles: [],
                            group: null,
                            createdByUser: null,
                            kpiRecords: []
                        }; // Use any to bypass strict type checking during migration
                    });
                }
                catch (fallbackError) {
                    console.error('‚ùå Fallback query also failed:', fallbackError);
                    throw queryError; // Throw the original error
                }
            }
        }
        catch (error) {
            console.error('‚ùå Error getting user tasks:', {
                userId,
                statuses,
                error: error instanceof Error ? {
                    message: error.message,
                    stack: error.stack,
                    name: error.name
                } : error
            });
            throw error;
        }
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å‡πÄ‡∏ä‡πâ‡∏≤ (08:00)
     * ‡∏£‡∏ß‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: pending, in_progress, overdue
     *
     * ‚ö†Ô∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤ 08:00 ‡∏ô. ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
     * @deprecated ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤ 08:00 ‡∏ô. ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
     */
    async getTasksForDailyMorningReminder() {
        try {
            return await this.taskRepository.createQueryBuilder('task')
                .leftJoinAndSelect('task.assignedUsers', 'assignee')
                .leftJoinAndSelect('task.group', 'group')
                .where('task.status IN (:...statuses)', { statuses: ['pending', 'in_progress', 'overdue'] })
                .getMany();
        }
        catch (error) {
            console.error('‚ùå Error getting tasks for daily morning reminder:', error);
            throw error;
        }
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
     */
    async getOverdueTasksByGroup(groupId) {
        try {
            return await this.taskRepository.find({
                where: {
                    groupId,
                    status: 'overdue'
                },
                relations: ['assignedUsers', 'group']
            });
        }
        catch (error) {
            console.error('‚ùå Error getting overdue tasks by group:', error);
            throw error;
        }
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
     */
    async getAllGroups() {
        try {
            return await this.groupRepository.find();
        }
        catch (error) {
            console.error('‚ùå Error getting all groups:', error);
            throw error;
        }
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
     */
    async getActiveTasks(groupId) {
        try {
            console.log(`üîç Looking for group with ID: ${groupId}`);
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Group entity ‡∏à‡∏≤‡∏Å LINE Group ID ‡∏´‡∏£‡∏∑‡∏≠ UUID
            const isUuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(groupId);
            const group = isUuid
                ? await this.groupRepository.findOneBy({ id: groupId })
                : await this.groupRepository.findOneBy({ lineGroupId: groupId });
            if (!group) {
                console.error(`‚ùå Group not found for ID: ${groupId}`);
                throw new Error(`Group not found for LINE ID: ${groupId}`);
            }
            console.log(`‚úÖ Found group: ${group.id} (${group.name})`);
            return await this.taskRepository.find({
                where: {
                    groupId: group.id,
                    status: 'in_progress'
                },
                relations: ['assignedUsers', 'attachedFiles'],
                order: {
                    dueTime: 'ASC'
                }
            });
        }
        catch (error) {
            console.error('‚ùå Error getting active tasks:', error);
            throw error;
        }
    }
    /** ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à */
    async getUserIncompleteTasks(lineUserId) {
        try {
            // ‡∏´‡∏≤ user ‡∏à‡∏≤‡∏Å LINE User ID
            const user = await this.userRepository.findOneBy({ lineUserId });
            if (!user) {
                return [];
            }
            // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ enum values ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å enum ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            const tasks = await this.taskRepository.createQueryBuilder('task')
                .leftJoinAndSelect('task.assignedUsers', 'assignee')
                .leftJoinAndSelect('task.group', 'group')
                .leftJoinAndSelect('task.attachedFiles', 'file')
                .where('assignee.id = :userId', { userId: user.id })
                .andWhere('task.status IN (:...statuses)', { statuses: ['pending', 'in_progress', 'overdue'] })
                .orderBy('task.dueTime', 'ASC')
                .getMany();
            return tasks.filter(task => this.isTaskPendingAction(task));
        }
        catch (error) {
            console.error('‚ùå Error getting user incomplete tasks:', error);
            throw error;
        }
    }
    /** ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° (pending, in_progress, overdue) ‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏∏ LINE Group ID */
    async getIncompleteTasksOfGroup(lineGroupId) {
        try {
            // ‡∏´‡∏≤ internal group UUID ‡∏à‡∏≤‡∏Å LINE Group ID ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ UUID ‡∏ï‡∏£‡∏á ‡πÜ
            const isUuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(lineGroupId);
            const group = isUuid ? await this.groupRepository.findOneBy({ id: lineGroupId }) : await this.groupRepository.findOneBy({ lineGroupId });
            if (!group) {
                throw new Error(`Group not found for LINE ID: ${lineGroupId}`);
            }
            // ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
            const allTasks = await this.taskRepository.createQueryBuilder('task')
                .leftJoinAndSelect('task.assignedUsers', 'assignee')
                .leftJoinAndSelect('task.group', 'group')
                .leftJoinAndSelect('task.attachedFiles', 'file')
                .where('task.groupId = :gid', { gid: group.id })
                .andWhere('task.status IN (:...statuses)', { statuses: ['pending', 'in_progress', 'overdue'] })
                .orderBy('task.dueTime', 'ASC')
                .getMany();
            // ‡∏Å‡∏£‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å (‡∏°‡∏µ workflow.submissions)
            const incompleteTasks = allTasks.filter(task => this.isTaskPendingAction(task));
            console.log(`üìä Filtered incomplete tasks: ${allTasks.length} ‚Üí ${incompleteTasks.length} (removed ${allTasks.length - incompleteTasks.length} submitted tasks)`);
            return incompleteTasks;
        }
        catch (error) {
            console.error('‚ùå Error getting incomplete tasks of group:', error);
            throw error;
        }
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
     */
    async getAllActiveGroups() {
        try {
            return await this.groupRepository.find({
                relations: ['members']
            });
        }
        catch (error) {
            console.error('‚ùå Error getting active groups:', error);
            throw error;
        }
    }
    /**
     * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
     */
    async recordReminderSent(taskId, reminderType) {
        try {
            const task = await this.taskRepository.findOneBy({ id: taskId });
            if (!task) {
                throw new Error('Task not found');
            }
            task.remindersSent.push({
                type: reminderType,
                sentAt: new Date(),
                channels: ['line', 'email']
            });
            await this.taskRepository.save(task);
        }
        catch (error) {
            console.error('‚ùå Error recording reminder sent:', error);
            throw error;
        }
    }
    /**
     * ‡πÅ‡∏õ‡∏•‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô Calendar Event
     */
    async getCalendarEvents(groupId, startDate, endDate) {
        try {
            const { tasks } = await this.getGroupTasks(groupId, { startDate, endDate });
            return tasks.map(task => ({
                id: task.id,
                title: task.title,
                start: task.startTime || task.dueTime,
                end: task.dueTime,
                allDay: false,
                assignees: task.assignedUsers?.map(user => ({
                    id: user.id,
                    name: user.displayName
                })) || [],
                status: task.status,
                priority: task.priority,
                tags: task.tags
            }));
        }
        catch (error) {
            console.error('‚ùå Error getting calendar events:', error);
            throw error;
        }
    }
    /**
     * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô
     */
    async searchTasks(groupId, query, options = {}) {
        try {
            // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô LINE Group ID ‡∏´‡∏£‡∏∑‡∏≠ internal UUID
            let internalGroupId = groupId;
            const isUuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(groupId);
            if (!isUuid) {
                const group = await this.groupRepository.findOne({ where: { lineGroupId: groupId } });
                internalGroupId = group ? group.id : null;
            }
            if (!internalGroupId) {
                // ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤ group ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÇ‡∏¢‡∏ô error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á 22P02
                return { tasks: [], total: 0 };
            }
            const queryBuilder = this.taskRepository.createQueryBuilder('task')
                .leftJoinAndSelect('task.assignedUsers', 'assignee')
                .leftJoinAndSelect('task.createdByUser', 'creator')
                .where('task.groupId = :groupId', { groupId: internalGroupId })
                .andWhere(`(
            task.title ILIKE :query 
            OR task.description ILIKE :query 
            OR :query = ANY(task.tags)
            OR CAST(task.id AS TEXT) ILIKE :idQuery
          )`, { query: `%${query}%`, idQuery: `${query}%` });
            const total = await queryBuilder.getCount();
            queryBuilder.orderBy('task.dueTime', 'DESC');
            if (options.limit) {
                queryBuilder.limit(options.limit);
            }
            if (options.offset) {
                queryBuilder.offset(options.offset);
            }
            const tasks = await queryBuilder.getMany();
            return { tasks, total };
        }
        catch (error) {
            console.error('‚ùå Error searching tasks:', error);
            throw error;
        }
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
     */
    async getAllRecurringTasks() {
        try {
            // ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏à‡∏≥
            const recurringTasks = await this.taskRepository.find({
                where: {
                    // ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏à‡∏≥ (‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° field recurring)
                    status: (0, typeorm_1.In)(['pending', 'in_progress'])
                },
                relations: ['group', 'assignedUsers', 'createdByUser']
            });
            return recurringTasks;
        }
        catch (error) {
            console.error('‚ùå Error getting recurring tasks:', error);
            return [];
        }
    }
    /**
     * ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥
     */
    async executeRecurringTask(taskId) {
        try {
            const task = await this.taskRepository.findOne({
                where: { id: taskId },
                relations: ['group', 'assignedUsers']
            });
            if (!task) {
                console.warn(`‚ö†Ô∏è Task not found: ${taskId}`);
                return;
            }
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥
            const newTask = await this.createTask({
                groupId: task.group.lineGroupId,
                title: task.title,
                description: task.description,
                assigneeIds: task.assignedUsers.map(u => u.lineUserId),
                createdBy: task.createdByUser.lineUserId,
                dueTime: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 ‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ
                priority: task.priority,
                tags: task.tags,
                customReminders: task.customReminders,
                requireAttachment: false
            });
            console.log(`‚úÖ Created recurring task: ${newTask.title}`);
        }
        catch (error) {
            console.error('‚ùå Error executing recurring task:', error);
        }
    }
    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥
     */
    async updateRecurringTaskNextRunAt(taskId) {
        try {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° field nextRunAt)
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï updatedAt
            await this.taskRepository.update(taskId, {
                updatedAt: new Date()
            });
            console.log(`‚úÖ Updated recurring task next run time: ${taskId}`);
        }
        catch (error) {
            console.error('‚ùå Error updating recurring task next run time:', error);
        }
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥
     */
    async getTasksByRecurringId(recurringId, options = {}) {
        try {
            const queryBuilder = this.taskRepository.createQueryBuilder('task')
                .leftJoinAndSelect('task.assignedUsers', 'assignee')
                .leftJoinAndSelect('task.createdByUser', 'creator')
                .leftJoinAndSelect('task.group', 'group')
                .where('task.recurringTaskId = :recurringId', { recurringId })
                .orderBy('task.createdAt', 'DESC');
            const total = await queryBuilder.getCount();
            if (options.limit) {
                queryBuilder.limit(options.limit);
            }
            if (options.offset) {
                queryBuilder.offset(options.offset);
            }
            const tasks = await queryBuilder.getMany();
            return { tasks, total };
        }
        catch (error) {
            console.error('‚ùå Error getting tasks by recurring ID:', error);
            return { tasks: [], total: 0 };
        }
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥
     */
    async getRecurringTaskStats(recurringId) {
        try {
            const { tasks } = await this.getTasksByRecurringId(recurringId);
            const stats = {
                totalInstances: tasks.length,
                completed: tasks.filter(t => t.status === 'completed').length,
                pending: tasks.filter(t => ['pending', 'in_progress'].includes(t.status)).length,
                overdue: tasks.filter(t => t.status === 'overdue').length,
                onTime: 0,
                late: 0,
                early: 0
            };
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô
            for (const task of tasks.filter(t => t.status === 'completed' && t.completedAt)) {
                const dueTime = new Date(task.dueTime);
                const completedTime = new Date(task.completedAt);
                const diffHours = (completedTime.getTime() - dueTime.getTime()) / (1000 * 60 * 60);
                if (diffHours <= 0) {
                    stats.early++;
                }
                else if (diffHours <= 24) {
                    stats.onTime++;
                }
                else {
                    stats.late++;
                }
            }
            return stats;
        }
        catch (error) {
            console.error('‚ùå Error getting recurring task stats:', error);
            return { totalInstances: 0, completed: 0, pending: 0, overdue: 0, onTime: 0, late: 0, early: 0 };
        }
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
     */
    async getGroupRecurringStats(groupId) {
        try {
            // ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
            const tasks = await this.taskRepository
                .createQueryBuilder('task')
                .where('task.groupId = :groupId', { groupId })
                .andWhere('task.recurringTaskId IS NOT NULL')
                .leftJoinAndSelect('task.group', 'group')
                .getMany();
            const stats = {
                totalRecurringTasks: new Set(tasks.map(t => t.recurringTaskId)).size,
                totalInstances: tasks.length,
                completed: tasks.filter(t => t.status === 'completed').length,
                pending: tasks.filter(t => ['pending', 'in_progress'].includes(t.status)).length,
                overdue: tasks.filter(t => t.status === 'overdue').length
            };
            return stats;
        }
        catch (error) {
            console.error('‚ùå Error getting group recurring stats:', error);
            return { totalRecurringTasks: 0, totalInstances: 0, completed: 0, pending: 0, overdue: 0 };
        }
    }
    /**
     * ‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤
     */
    async rejectTaskAndExtendDeadline(taskId, rejectedBy, extensionDays = 3) {
        try {
            const task = await this.taskRepository.findOne({
                where: { id: taskId },
                relations: ['assignedUsers', 'attachedFiles', 'group']
            });
            if (!task) {
                throw new Error('Task not found');
            }
            // ‡πÅ‡∏õ‡∏•‡∏á LINE User ID ‚Üí internal user id ‡∏´‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô LINE ID
            let rejectedByInternalId = rejectedBy;
            if (rejectedByInternalId && rejectedByInternalId.startsWith('U')) {
                const user = await this.userRepository.findOneBy({ lineUserId: rejectedByInternalId });
                if (!user) {
                    throw new Error('RejectedBy user not found');
                }
                rejectedByInternalId = user.id;
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
            if (!this.checkApprovalPermission(task, rejectedByInternalId)) {
                throw new Error('Only task reviewers or creators can reject tasks');
            }
            // ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
            const newDueTime = new Date(task.dueTime.getTime() + extensionDays * 24 * 60 * 60 * 1000);
            task.dueTime = newDueTime;
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡πÇ‡∏ü‡∏•‡∏ß‡πå
            const now = new Date();
            task.workflow = {
                ...(task.workflow || {}),
                review: {
                    ...task.workflow?.review,
                    status: 'rejected',
                    reviewedAt: now,
                    rejectionReason: `‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏î‡∏¢ ${rejectedByInternalId} ‡πÅ‡∏•‡∏∞‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ ${extensionDays} ‡∏ß‡∏±‡∏ô`
                },
                history: [
                    ...(task.workflow?.history || []),
                    {
                        action: 'reject',
                        byUserId: rejectedByInternalId,
                        at: now,
                        note: `extend_deadline_${extensionDays}_days`
                    }
                ]
            };
            // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô pending
            task.status = 'pending';
            const updatedTask = await this.taskRepository.save(task);
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô Google Calendar
            try {
                await this.googleService.updateTaskInCalendar(task, {
                    status: 'pending',
                    dueTime: newDueTime
                });
            }
            catch (error) {
                console.warn('‚ö†Ô∏è Failed to update rejected task in Google Calendar:', error);
            }
            // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤
            try {
                const rejectedByUser = await this.userRepository.findOneBy({ id: rejectedByInternalId });
                if (rejectedByUser) {
                    await this.notificationService.sendTaskRejectedNotification({ ...updatedTask, group: task.group }, rejectedByUser, extensionDays.toString());
                }
            }
            catch (err) {
                console.warn('‚ö†Ô∏è Failed to send task rejected notification:', err);
            }
            return updatedTask;
        }
        catch (error) {
            console.error('‚ùå Error rejecting task and extending deadline:', error);
            throw error;
        }
    }
    /**
     * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
     */
    async sendExtensionApprovalNotification(taskId, newDueTime) {
        try {
            const task = await this.taskRepository.findOne({
                where: { id: taskId },
                relations: ['group', 'assignedUsers', 'createdByUser']
            });
            if (!task) {
                throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
            }
            // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å workflow history
            const extensionRequester = this.findExtensionRequester(task);
            if (extensionRequester) {
                // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                await this.notificationService.sendExtensionApprovedNotification(task, extensionRequester, newDueTime);
            }
        }
        catch (error) {
            console.error('‚ùå Error sending extension approval notification:', error);
            throw error;
        }
    }
    /**
     * ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å workflow history
     */
    findExtensionRequester(task) {
        try {
            const workflow = task.workflow;
            if (workflow && workflow.history) {
                // ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô request_extension
                const extensionRequest = workflow.history
                    .reverse()
                    .find((entry) => entry.action === 'request_extension');
                if (extensionRequest && extensionRequest.byUserId) {
                    // ‡∏´‡∏≤ user ‡∏à‡∏≤‡∏Å assignedUsers ‡∏´‡∏£‡∏∑‡∏≠ createdByUser
                    const requester = task.assignedUsers?.find((user) => user.id === extensionRequest.byUserId) ||
                        (task.createdByUser?.id === extensionRequest.byUserId ? task.createdByUser : null);
                    return requester;
                }
            }
        }
        catch (error) {
            console.warn('‚ö†Ô∏è Could not find extension requester:', error);
        }
        return null;
    }
    /**
     * ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏≤‡∏ô
     */
    async approveReview(taskId, approvedBy) {
        try {
            const task = await this.taskRepository.findOne({
                where: { id: taskId },
                relations: ['assignedUsers', 'attachedFiles', 'group', 'createdByUser']
            });
            if (!task) {
                throw new Error('Task not found');
            }
            // ‡πÅ‡∏õ‡∏•‡∏á LINE User ID ‚Üí internal user id ‡∏´‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô LINE ID
            let approvedByInternalId = approvedBy;
            if (approvedByInternalId && approvedByInternalId.startsWith('U')) {
                const user = await this.userRepository.findOneBy({ lineUserId: approvedByInternalId });
                if (!user) {
                    throw new Error('ApprovedBy user not found');
                }
                approvedByInternalId = user.id;
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
            if (!this.checkApprovalPermission(task, approvedByInternalId)) {
                throw new Error('Only task reviewers or creators can approve reviews');
            }
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡πÇ‡∏ü‡∏•‡∏ß‡πå
            const now = new Date();
            task.workflow = {
                ...(task.workflow || {}),
                review: {
                    ...task.workflow?.review,
                    status: 'approved',
                    reviewedAt: now
                },
                history: [
                    ...(task.workflow?.history || []),
                    {
                        action: 'review_approved',
                        byUserId: approvedByInternalId,
                        at: now,
                        note: '‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß'
                    }
                ]
            };
            // ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ enum
            // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏ß‡πâ‡πÉ‡∏ô workflow ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô 'submitted' ‡∏´‡∏£‡∏∑‡∏≠ 'in_progress' ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
            const updatedTask = await this.taskRepository.save(task);
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô Google Calendar (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞)
            try {
                await this.googleService.updateTaskInCalendar(task, {
                // ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ
                });
            }
            catch (error) {
                console.warn('‚ö†Ô∏è Failed to update reviewed task in Google Calendar:', error);
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const isReviewerCreator = approvedByInternalId === task.createdBy;
            if (isReviewerCreator) {
                // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                console.log(`‚úÖ Reviewer is creator, auto-approving completion for task: ${task.title}`);
                return await this.completeTask(taskId, approvedByInternalId);
            }
            else {
                // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô
                try {
                    const reviewer = await this.userRepository.findOneBy({ id: approvedByInternalId });
                    if (reviewer && task.createdByUser) {
                        await this.notificationService.sendApprovalRequest(updatedTask, task.createdBy, reviewer);
                        console.log(`üì§ Sent approval request to task creator: ${task.createdByUser.displayName}`);
                    }
                }
                catch (err) {
                    console.warn('‚ö†Ô∏è Failed to send approval request:', err);
                }
            }
            return updatedTask;
        }
        catch (error) {
            console.error('‚ùå Error approving review:', error);
            throw error;
        }
    }
    /**
     * ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß)
     */
    async approveCompletion(taskId, approvedBy) {
        try {
            const task = await this.taskRepository.findOne({
                where: { id: taskId },
                relations: ['assignedUsers', 'attachedFiles', 'group', 'createdByUser']
            });
            if (!task) {
                throw new Error('Task not found');
            }
            // ‡πÅ‡∏õ‡∏•‡∏á LINE User ID ‚Üí internal user id ‡∏´‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô LINE ID
            let approvedByInternalId = approvedBy;
            if (approvedByInternalId && approvedByInternalId.startsWith('U')) {
                const user = await this.userRepository.findOneBy({ lineUserId: approvedByInternalId });
                if (!user) {
                    throw new Error('ApprovedBy user not found');
                }
                approvedByInternalId = user.id;
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô (‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô)
            if (approvedByInternalId !== task.createdBy) {
                throw new Error('Only task creator can approve completion');
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const reviewStatus = task.workflow?.review?.status;
            if (reviewStatus !== 'approved') {
                throw new Error('Task must be reviewed before completion can be approved');
            }
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡πÇ‡∏ü‡∏•‡∏ß‡πå
            const now = new Date();
            task.workflow = {
                ...(task.workflow || {}),
                approval: {
                    ...task.workflow?.approval,
                    status: 'approved',
                    approvedAt: now
                },
                history: [
                    ...(task.workflow?.history || []),
                    {
                        action: 'completion_approved',
                        byUserId: approvedByInternalId,
                        at: now,
                        note: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
                    }
                ]
            };
            // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô completed (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
            task.status = 'completed';
            task.completedAt = now;
            const updatedTask = await this.taskRepository.save(task);
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô Google Calendar
            try {
                await this.googleService.updateTaskInCalendar(task, {
                    status: 'completed',
                    completedAt: now
                });
            }
            catch (error) {
                console.warn('‚ö†Ô∏è Failed to update completed task in Google Calendar:', error);
            }
            // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡πà‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            try {
                const approvedByUser = await this.userRepository.findOneBy({ id: approvedByInternalId });
                if (approvedByUser) {
                    await this.notificationService.sendTaskCompletedNotification({ ...updatedTask, group: task.group }, approvedByUser);
                }
            }
            catch (err) {
                console.warn('‚ö†Ô∏è Failed to send task completed notification:', err);
            }
            return updatedTask;
        }
        catch (error) {
            console.error('‚ùå Error approving completion:', error);
            throw error;
        }
    }
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Bot ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
     */
    async checkBotMembershipInGroup(groupId) {
        try {
            // ‡πÉ‡∏ä‡πâ LineService ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
            const lineService = new (await Promise.resolve().then(() => __importStar(require('./LineService')))).LineService();
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
            let isInGroup = true;
            try {
                await lineService.getGroupMemberUserIds(groupId);
                isInGroup = true;
            }
            catch (e) {
                // ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
                if (e?.status === 403 || e?.status === 404) {
                    isInGroup = false;
                }
                else {
                    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á API
                    isInGroup = true;
                }
            }
            if (isInGroup) {
                console.log(`‚úÖ Bot ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°: ${groupId}`);
                return true;
            }
            else {
                console.log(`üö´ Bot ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°: ${groupId}`);
                return false;
            }
        }
        catch (error) {
            console.error(`‚ùå Error checking bot membership for group ${groupId}:`, error);
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ Bot ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
            return true;
        }
    }
    /**
     * ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà Bot ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß)
     */
    async deleteAllTasksInGroup(groupId) {
        try {
            console.log(`üóëÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°: ${groupId}`);
            // ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
            const { tasks } = await this.getGroupTasks(groupId);
            if (tasks.length === 0) {
                console.log(`üìã ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ${groupId} ‡πÉ‡∏´‡πâ‡∏•‡∏ö`);
                return {
                    success: true,
                    deletedCount: 0,
                    errors: []
                };
            }
            console.log(`üìä ‡∏û‡∏ö‡∏á‡∏≤‡∏ô ${tasks.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ${groupId}`);
            let deletedCount = 0;
            const errors = [];
            // ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            for (const task of tasks) {
                try {
                    await this.deleteTask(task.id);
                    deletedCount++;
                    console.log(`‚úÖ ‡∏•‡∏ö‡∏á‡∏≤‡∏ô ${task.id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
                }
                catch (error) {
                    const errorMsg = `Failed to delete task ${task.id}: ${error instanceof Error ? error.message : 'Unknown error'}`;
                    errors.push(errorMsg);
                    console.error(`‚ùå ${errorMsg}`);
                }
            }
            console.log(`üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ${groupId}:`);
            console.log(`   ‚úÖ ‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
            console.log(`   ‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${errors.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
            return {
                success: errors.length === 0,
                deletedCount,
                errors
            };
        }
        catch (error) {
            console.error(`‚ùå Error deleting all tasks in group ${groupId}:`, error);
            return {
                success: false,
                deletedCount: 0,
                errors: [error instanceof Error ? error.message : 'Unknown error']
            };
        }
    }
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà Bot ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
     */
    async checkAndCleanupInactiveGroups() {
        try {
            console.log('üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà Bot ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß...');
            // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const groups = await this.groupRepository.find();
            console.log(`üìä ‡∏û‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° ${groups.length} ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`);
            let checkedGroups = 0;
            let cleanedGroups = 0;
            let totalDeletedTasks = 0;
            const errors = [];
            for (const group of groups) {
                try {
                    checkedGroups++;
                    console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° ${checkedGroups}/${groups.length}: ${group.lineGroupId || group.id}`);
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Bot ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    const isBotInGroup = await this.checkBotMembershipInGroup(group.lineGroupId || group.id);
                    if (!isBotInGroup) {
                        console.log(`üßπ Bot ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ${group.lineGroupId || group.id} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô...`);
                        // ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
                        const deleteResult = await this.deleteAllTasksInGroup(group.lineGroupId || group.id);
                        if (deleteResult.success) {
                            cleanedGroups++;
                            totalDeletedTasks += deleteResult.deletedCount;
                            console.log(`‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ${group.lineGroupId || group.id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${deleteResult.deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`);
                        }
                        else {
                            errors.push(`Failed to clean up group ${group.lineGroupId || group.id}: ${deleteResult.errors.join(', ')}`);
                        }
                    }
                    else {
                        console.log(`‚úÖ Bot ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ${group.lineGroupId || group.id}`);
                    }
                }
                catch (error) {
                    const errorMsg = `Error processing group ${group.lineGroupId || group.id}: ${error instanceof Error ? error.message : 'Unknown error'}`;
                    errors.push(errorMsg);
                    console.error(`‚ùå ${errorMsg}`);
                }
            }
            console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°:');
            console.log(`   üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°: ${checkedGroups} ‡∏Å‡∏•‡∏∏‡πà‡∏°`);
            console.log(`   üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°: ${cleanedGroups} ‡∏Å‡∏•‡∏∏‡πà‡∏°`);
            console.log(`   üóëÔ∏è ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalDeletedTasks} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
            console.log(`   ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errors.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
            return {
                checkedGroups,
                cleanedGroups,
                totalDeletedTasks,
                errors
            };
        }
        catch (error) {
            console.error('‚ùå Error in checkAndCleanupInactiveGroups:', error);
            return {
                checkedGroups: 0,
                cleanedGroups: 0,
                totalDeletedTasks: 0,
                errors: [error instanceof Error ? error.message : 'Unknown error']
            };
        }
    }
    /**
     * ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏£‡∏ß‡∏à 2 ‡∏ß‡∏±‡∏ô
     */
    async autoApproveTaskAfterDeadline(taskId) {
        try {
            const task = await this.taskRepository.findOne({
                where: { id: taskId },
                relations: ['assignedUsers', 'attachedFiles', 'group']
            });
            if (!task) {
                throw new Error('Task not found');
            }
            const wf = task.workflow || {};
            if (!wf.review || wf.review.status !== 'pending') {
                throw new Error('Task is not pending review');
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏£‡∏ß‡∏à 2 ‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const now = new Date();
            const reviewDue = new Date(wf.review.reviewDueAt);
            if (now < reviewDue) {
                throw new Error('Review deadline not reached yet');
            }
            // ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            task.status = 'completed';
            task.completedAt = new Date();
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡πÇ‡∏ü‡∏•‡∏ß‡πå
            task.workflow = {
                ...wf,
                review: {
                    ...wf.review,
                    status: 'auto_approved',
                    reviewedAt: now,
                    autoApproved: true
                },
                history: [
                    ...(wf.history || []),
                    {
                        action: 'auto_approve',
                        byUserId: 'system',
                        at: now,
                        note: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏£‡∏ß‡∏à 2 ‡∏ß‡∏±‡∏ô'
                    }
                ]
            };
            const updatedTask = await this.taskRepository.save(task);
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô Google Calendar
            try {
                await this.googleService.updateTaskInCalendar(task, {
                    status: 'completed',
                    completedAt: task.completedAt
                });
            }
            catch (error) {
                console.warn('‚ö†Ô∏è Failed to update auto-approved task in Google Calendar:', error);
            }
            // ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡πà‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
            try {
                if (task.group) {
                    await this.notificationService.sendTaskAutoApprovedNotification({ ...updatedTask, group: task.group });
                }
            }
            catch (err) {
                console.warn('‚ö†Ô∏è Failed to send task auto-approved notification:', err);
            }
            return updatedTask;
        }
        catch (error) {
            console.error('‚ùå Error auto-approving task:', error);
            throw error;
        }
    }
}
exports.TaskService = TaskService;
//# sourceMappingURL=TaskService.js.map