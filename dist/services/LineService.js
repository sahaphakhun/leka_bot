"use strict";
// LINE Bot Service - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞ API ‡∏Ç‡∏≠‡∏á LINE
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LineService = void 0;
const bot_sdk_1 = require("@line/bot-sdk");
const config_1 = require("@/utils/config");
const FlexMessageDesignSystem_1 = require("./FlexMessageDesignSystem");
const crypto_1 = require("crypto");
const moment_timezone_1 = __importDefault(require("moment-timezone"));
const UserService_1 = require("./UserService");
class LineService {
    constructor() {
        this.client = new bot_sdk_1.Client({
            channelAccessToken: config_1.config.line.channelAccessToken,
            channelSecret: config_1.config.line.channelSecret,
        });
        this.userService = new UserService_1.UserService();
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ configure ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏ç‡∏´‡∏≤ LINE API Error 400
        // LINE Bot SDK ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ HTTP configuration ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
    }
    async initialize() {
        try {
            // Test the connection
            await this.client.getBotInfo();
            console.log('‚úÖ LINE Bot connection verified');
        }
        catch (error) {
            console.error('‚ùå LINE Bot connection failed:', error);
            throw error;
        }
    }
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ validate webhook signature
     */
    validateSignature(body, signature) {
        try {
            if (!signature || !config_1.config.line.channelSecret)
                return false;
            const mac = (0, crypto_1.createHmac)('sha256', config_1.config.line.channelSecret);
            mac.update(body);
            const expected = mac.digest('base64');
            // ‡πÉ‡∏ä‡πâ timingSafeEqual ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
            if (expected.length === signature.length) {
                try {
                    return (0, crypto_1.timingSafeEqual)(Buffer.from(expected), Buffer.from(signature));
                }
                catch {
                    return expected === signature;
                }
            }
            return expected === signature;
        }
        catch (error) {
            console.error('‚ùå Signature validation failed:', error);
            return false;
        }
    }
    /**
     * ‡πÅ‡∏¢‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
     */
    parseCommand(text, event) {
        let cleanText = text.trim();
        let isMentioned = false;
        const mentions = [];
        console.log('üîç Parsing command:', { text, eventType: event.message.type });
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ mention ‡πÉ‡∏ô LINE ‡∏à‡∏£‡∏¥‡∏á‡πÜ
        if (event.message.type === 'text') {
            const textMessage = event.message;
            // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å mention structure ‡∏Ç‡∏≠‡∏á LINE
            if (textMessage.mention && textMessage.mention.mentionees) {
                console.log('üì± Found mentions:', textMessage.mention.mentionees);
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏ó‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡πá‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                const botMentions = textMessage.mention.mentionees.filter((mention) => {
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
                    return mention.isSelf ||
                        (config_1.config.line.botUserId && mention.userId === config_1.config.line.botUserId) ||
                        mention.type === 'bot';
                });
                if (botMentions.length > 0) {
                    isMentioned = true;
                    console.log('‚úÖ Bot mentioned via LINE mention (isSelf or botUserId match)');
                    // ‡∏•‡∏ö mention text ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                    botMentions.forEach((botMention) => {
                        // ‡∏´‡∏≤ display name ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÉ‡∏ô mention ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
                        const mentionStartIndex = botMention.index || 0;
                        const mentionLength = botMention.length || 0;
                        if (mentionStartIndex >= 0 && mentionLength > 0) {
                            const beforeMention = cleanText.substring(0, mentionStartIndex);
                            const afterMention = cleanText.substring(mentionStartIndex + mentionLength);
                            cleanText = (beforeMention + afterMention).trim();
                        }
                    });
                }
                // ‡πÄ‡∏Å‡πá‡∏ö mentions ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ö‡∏≠‡∏ó)
                textMessage.mention.mentionees.forEach((mention) => {
                    if (!mention.isSelf &&
                        !(config_1.config.line.botUserId && mention.userId === config_1.config.line.botUserId) &&
                        mention.type !== 'bot') {
                        mentions.push(mention.userId);
                    }
                });
            }
        }
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ mention ‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ @‡πÄ‡∏•‡∏Ç‡∏≤
        const botMention = '@‡πÄ‡∏•‡∏Ç‡∏≤';
        if (text.includes(botMention)) {
            cleanText = text.replace(botMention, '').trim();
            isMentioned = true;
            console.log('‚úÖ Bot mentioned via @‡πÄ‡∏•‡∏Ç‡∏≤');
        }
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ / ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
        if (!isMentioned && (text.startsWith('/') || this.isValidBotCommand(text))) {
            isMentioned = true;
            console.log('‚úÖ Bot command detected:', text.substring(0, 20));
        }
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ö‡∏≠‡∏ó ‡πÉ‡∏´‡πâ return null
        if (!isMentioned) {
            console.log('‚ùå Not a bot command, ignoring');
            return null;
        }
        console.log('ü§ñ Processing bot command');
        // ‡πÅ‡∏¢‡∏Å mentions ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå @username ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤)
        const additionalMentionRegex = /@(\w+|me)/g;
        let additionalMatch;
        const additionalMentions = [];
        // Reset regex lastIndex
        additionalMentionRegex.lastIndex = 0;
        while ((additionalMatch = additionalMentionRegex.exec(cleanText)) !== null) {
            const mentionText = additionalMatch[1];
            if (mentionText !== '‡πÄ‡∏•‡∏Ç‡∏≤') { // ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£ mention ‡∏ö‡∏≠‡∏ó
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô @me ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ userId ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                if (mentionText === 'me') {
                    additionalMentions.push(event.source.userId);
                }
                else {
                    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö @username ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô displayName (‡∏à‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)
                    additionalMentions.push(mentionText);
                }
            }
        }
        // ‡∏£‡∏ß‡∏° mentions ‡∏à‡∏≤‡∏Å LINE mention ‡πÅ‡∏•‡∏∞ text mention
        mentions.push(...additionalMentions);
        // ‡∏•‡∏ö mentions ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÉ‡∏ä‡πâ regex ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ lastIndex)
        cleanText = cleanText.replace(/@(\w+|me)/g, '').trim();
        cleanText = cleanText.replace(/@‡πÄ‡∏•‡∏Ç‡∏≤/g, '').trim();
        // ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å
        cleanText = cleanText.replace(/\s+/g, ' ').trim();
        // ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞ arguments
        const parts = cleanText.split(' ').filter(part => part.length > 0);
        if (parts.length === 0) {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£ mention ‡∏ö‡∏≠‡∏ó ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
            console.log('üìã No command found, showing help');
            return {
                command: 'help',
                args: [],
                mentions,
                groupId: event.source.type === 'group' ? event.source.groupId : '',
                userId: event.source.userId,
                originalText: text
            };
        }
        const command = parts[0].toLowerCase();
        const args = parts.slice(1);
        console.log('‚úÖ Command parsed:', { command, args, mentions });
        return {
            command,
            args,
            mentions,
            groupId: event.source.type === 'group' ? event.source.groupId : '',
            userId: event.source.userId,
            originalText: text
        };
    }
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ö‡∏≠‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
     */
    isValidBotCommand(text) {
        const trimmedText = text.trim().toLowerCase();
        // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ /
        if (trimmedText.startsWith('/')) {
            return true;
        }
        // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
        const thaiCommands = [
            '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô', '‡πÉ‡∏™‡πà‡∏á‡∏≤‡∏ô', '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô', '‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà',
            '‡∏î‡∏π‡∏á‡∏≤‡∏ô', '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô', '‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
            '‡∏•‡∏ö‡∏á‡∏≤‡∏ô', '‡πÄ‡∏≠‡∏≤‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å', '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô',
            '‡πÅ‡∏Å‡πâ‡∏á‡∏≤‡∏ô', '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡∏≤‡∏ô', '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏á‡∏≤‡∏ô',
            '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏á‡∏≤‡∏ô', '‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à', '‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô',
            '‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå', '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå', '‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
            '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤', 'setup', 'config',
            '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠', 'help', '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á'
        ];
        return thaiCommands.some(cmd => trimmedText.startsWith(cmd));
    }
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á message object
     */
    validateMessage(message) {
        try {
            if (Array.isArray(message)) {
                return message.length > 0 && message.every(m => this.validateMessage(m));
            }
            if (typeof message === 'string') {
                const trimmedMessage = message.trim();
                return trimmedMessage.length > 0 && trimmedMessage.length <= 5000; // LINE limit
            }
            if (typeof message === 'object' && message !== null) {
                if (message.type === 'text') {
                    const text = message.text?.trim();
                    return !!text && text.length > 0 && text.length <= 5000; // LINE limit
                }
                if (message.type === 'flex') {
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Flex Message size (LINE limit: 50KB)
                    const messageSize = JSON.stringify(message).length;
                    if (messageSize > 50000) {
                        console.warn(`‚ö†Ô∏è Flex Message too large: ${messageSize} bytes (limit: 50KB)`);
                        return false;
                    }
                    return !!(message.altText && message.contents);
                }
            }
            return false;
        }
        catch (error) {
            console.error('‚ùå Message validation failed:', error);
            return false;
        }
    }
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö LINE ID
     */
    isValidLineId(id) {
        if (!id || typeof id !== 'string')
            return false;
        // LINE User ID: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ U + 32 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
        // LINE Group ID: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ C + 32 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£  
        // LINE Room ID: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ R + 32 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
        const lineIdPattern = /^[UCR][a-f0-9]{32}$/i;
        return lineIdPattern.test(id);
    }
    /**
     * ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤ LINE API
     */
    sanitizeMessage(message) {
        try {
            // ‡∏•‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            let sanitized = message
                .replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, '') // ‡∏•‡∏ö control characters
                .replace(/\uFFFE|\uFFFF/g, '') // ‡∏•‡∏ö BOM characters
                .trim();
            // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
            if (sanitized.length > 5000) {
                sanitized = sanitized.substring(0, 4997) + '...';
            }
            return sanitized;
        }
        catch (error) {
            console.error('‚ùå Message sanitization failed:', error);
            return '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà';
        }
    }
    /**
     * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° reply
     */
    async replyMessage(replyToken, message) {
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö replyToken
            if (!replyToken || replyToken.trim() === '') {
                console.error('‚ùå Invalid replyToken:', replyToken);
                throw new Error('Invalid replyToken');
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö message
            if (!this.validateMessage(message)) {
                console.error('‚ùå Invalid message:', message);
                throw new Error('Invalid message format');
            }
            const messagesArray = Array.isArray(message) ? message : [message];
            const formatted = messagesArray.map(msg => typeof msg === 'string'
                ? { type: 'text', text: this.sanitizeMessage(msg) }
                : msg);
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° logging ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
            formatted.forEach(msg => {
                if (msg.type === 'text') {
                    console.log('üìù Sending Text Message:', msg.text);
                }
                else {
                    console.log('üé¥ Sending Flex Message:', {
                        type: msg.type,
                        altText: msg.altText,
                        hasContents: !!msg.contents,
                    });
                }
            });
            await this.client.replyMessage(replyToken, formatted.length === 1 ? formatted[0] : formatted);
            console.log('‚úÖ Message sent successfully');
        }
        catch (error) {
            console.error('‚ùå Failed to reply message:', error);
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
            console.error('‚ùå Debug info:', {
                replyToken: replyToken?.substring(0, 10) + '...',
                messageType: Array.isArray(message) ? 'array' : typeof message,
                messageLength: Array.isArray(message)
                    ? message.length
                    : typeof message === 'string'
                        ? message.length
                        : 'N/A',
            });
            throw error;
        }
    }
    /**
     * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
     */
    async pushMessage(groupId, message) {
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö groupId
            if (!groupId || groupId.trim() === '') {
                console.error('‚ùå Invalid groupId:', groupId);
                throw new Error('Invalid groupId');
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö LINE ID
            if (!this.isValidLineId(groupId)) {
                console.error('‚ùå Invalid LINE ID format:', groupId);
                throw new Error('Invalid LINE ID format');
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö message
            if (!this.validateMessage(message)) {
                console.error('‚ùå Invalid message:', message);
                throw new Error('Invalid message format');
            }
            const messageObj = typeof message === 'string'
                ? { type: 'text', text: this.sanitizeMessage(message) }
                : message;
            await this.client.pushMessage(groupId, messageObj);
            console.log('‚úÖ Push message sent successfully to group:', groupId.substring(0, 10) + '...');
        }
        catch (error) {
            console.error('‚ùå Failed to push message:', error);
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
            console.error('‚ùå Debug info:', {
                groupId: groupId?.substring(0, 10) + '...',
                messageType: typeof message,
                messageLength: typeof message === 'string' ? message.length : 'N/A',
                errorStatus: error?.statusCode || error?.status,
                errorMessage: error?.message,
                responseData: error?.originalError?.response?.data || error?.response?.data || null
            });
            // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error 400 ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
            if (error?.statusCode === 400 || error?.status === 400) {
                console.error('‚ùå LINE API 400 Error - Possible causes:');
                console.error('  - Invalid message format');
                console.error('  - Message too large');
                console.error('  - Invalid LINE ID');
                console.error('  - Bot not in group or user blocked bot');
                // ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÅ‡∏ó‡∏ô Flex Message
                if (typeof message === 'object' && message.type === 'flex') {
                    console.log('üîÑ Attempting to send simple text message instead...');
                    try {
                        const simpleMessage = `üìã ${message.altText || '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô'}`;
                        await this.client.pushMessage(groupId, { type: 'text', text: simpleMessage });
                        console.log('‚úÖ Fallback text message sent successfully');
                        return;
                    }
                    catch (fallbackError) {
                        console.error('‚ùå Fallback message also failed:', fallbackError);
                        console.error('‚ùå Fallback response data:', fallbackError?.originalError?.response?.data || fallbackError?.response?.data || null);
                    }
                }
            }
            throw error;
        }
    }
    /**
     * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° mention
     */
    async sendNotificationWithMention(groupId, userIds, message) {
        try {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ mention
            const mentions = userIds.map(userId => ({
                index: message.indexOf(`@${userId}`),
                length: userId.length + 1, // +1 for @
                userId
            })).filter(mention => mention.index !== -1);
            const textMessage = {
                type: 'text',
                text: message,
                ...(mentions.length > 0 && {
                    mention: {
                        mentionees: mentions
                    }
                })
            };
            await this.client.pushMessage(groupId, textMessage);
        }
        catch (error) {
            console.error('‚ùå Failed to send notification with mention:', error);
            throw error;
        }
    }
    /**
     * ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å LINE
     */
    async downloadContent(messageId) {
        try {
            const stream = await this.client.getMessageContent(messageId);
            const chunks = [];
            return new Promise((resolve, reject) => {
                stream.on('data', (chunk) => {
                    chunks.push(chunk);
                });
                stream.on('end', () => {
                    resolve(Buffer.concat(chunks));
                });
                stream.on('error', (error) => {
                    reject(error);
                });
            });
        }
        catch (error) {
            console.error('‚ùå Failed to download content:', error);
            throw error;
        }
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
     */
    async getUserProfile(userId) {
        try {
            return await this.client.getProfile(userId);
        }
        catch (error) {
            console.error('‚ùå Failed to get user profile:', error);
            throw error;
        }
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
     */
    async getGroupMemberProfile(groupId, userId) {
        try {
            return await this.client.getGroupMemberProfile(groupId, userId);
        }
        catch (error) {
            console.error('‚ùå Failed to get group member profile:', error);
            throw error;
        }
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å LINE API
     */
    async getGroupMemberUserIds(groupId) {
        try {
            const result = await this.client.getGroupMemberIds(groupId);
            return result;
        }
        catch (error) {
            // Clearer permission error message
            if (error.status === 403) {
                console.warn('üö´ ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå "Get member user IDs")');
            }
            else {
                console.error('‚ùå Failed to get group member user IDs:', error);
            }
            throw error;
        }
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
     */
    async getGroupIds() {
        // LINE Bot SDK ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏°‡∏µ API ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ group IDs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ß‡πà‡∏≤‡∏á
        // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏∏ groupId ‡πÅ‡∏ó‡∏ô (getGroupMemberUserIds)
        console.warn('‚ÑπÔ∏è getGroupIds() ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÇ‡∏î‡∏¢ LINE API ‚Äì ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ß‡πà‡∏≤‡∏á');
        return [];
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å LINE API
     * ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á
     */
    async getGroupInformation(groupId) {
        try {
            console.log('üîç ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏° ' + groupId + ' ‡∏à‡∏≤‡∏Å LINE API');
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô personal chat ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (groupId.startsWith('personal_')) {
                console.log('‚ÑπÔ∏è Personal chat detected');
                return {
                    groupId,
                    name: '‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß',
                    source: 'fallback'
                };
            }
            // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ getGroupSummary ‡∏´‡∏≤‡∏Å‡∏°‡∏µ (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡πÉ‡∏ô LINE Bot SDK ‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà)
            try {
                if (typeof this.client.getGroupSummary === 'function') {
                    console.log('üÜï ‡πÉ‡∏ä‡πâ getGroupSummary API');
                    const groupSummary = await this.client.getGroupSummary(groupId);
                    if (groupSummary && groupSummary.groupName) {
                        console.log('‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å LINE API: ' + groupSummary.groupName);
                        return {
                            groupId,
                            name: groupSummary.groupName,
                            source: 'line_api'
                        };
                    }
                }
            }
            catch (summaryError) {
                console.log('‚ÑπÔ∏è getGroupSummary ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', summaryError?.message || summaryError);
            }
            // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ getGroupMemberUserIds ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
            try {
                console.log('üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡πà‡∏≤‡∏ô getGroupMemberUserIds');
                await this.getGroupMemberUserIds(groupId);
                // ‡∏ñ‡πâ‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
                // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°
                // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ getGroupSummary (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                try {
                    if (typeof this.client.getGroupSummary === 'function') {
                        const groupSummary = await this.client.getGroupSummary(groupId);
                        if (groupSummary && groupSummary.groupName) {
                            console.log('‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å LINE API: ' + groupSummary.groupName);
                            return {
                                groupId,
                                name: groupSummary.groupName,
                                source: 'line_api'
                            };
                        }
                    }
                }
                catch (error) {
                    console.log('‚ÑπÔ∏è getGroupSummary ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ');
                }
                // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ getGroupMemberProfile (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                try {
                    if (typeof this.client.getGroupMemberProfile === 'function') {
                        const memberIds = await this.getGroupMemberUserIds(groupId);
                        if (memberIds.length > 0) {
                            // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°
                            const firstMember = await this.client.getGroupMemberProfile(groupId, memberIds[0]);
                            if (firstMember && firstMember.displayName) {
                                console.log(`‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
                                // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
                                return {
                                    groupId,
                                    name: `‡∏Å‡∏•‡∏∏‡πà‡∏° ${firstMember.displayName}`,
                                    source: 'fallback'
                                };
                            }
                        }
                    }
                }
                catch (error) {
                    console.log('‚ÑπÔ∏è getGroupMemberProfile ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ');
                }
                // ‡∏ñ‡πâ‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ
                console.log('‚ÑπÔ∏è ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å LINE API ‡πÑ‡∏î‡πâ');
            }
            catch (accessError) {
                if (accessError.status === 403) {
                    console.log('üö´ ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Bot)');
                }
                else {
                    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ:', accessError?.message || accessError);
                }
            }
            console.log('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å LINE API ‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô');
            // Fallback: ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏Å‡∏ß‡πà‡∏≤
            const shortId = groupId.length > 8 ? groupId.substring(0, 8) : groupId;
            return {
                groupId,
                name: `‡∏Å‡∏•‡∏∏‡πà‡∏° ${shortId}`,
                source: 'fallback'
            };
        }
        catch (error) {
            console.error('‚ùå Failed to get group information:', error);
            // Fallback ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            const shortId = groupId.length > 8 ? groupId.substring(0, 8) : groupId;
            return {
                groupId,
                name: `‡∏Å‡∏•‡∏∏‡πà‡∏° ${shortId}`,
                source: 'fallback'
            };
        }
    }
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏î‡πâ‡∏ß‡∏¢ LINE API: GET /v2/bot/group/{groupId}/summary
     * - ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ inGroup=true ‡∏ñ‡πâ‡∏≤‡∏î‡∏∂‡∏á summary ‡πÑ‡∏î‡πâ
     * - ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ inGroup=false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ 404 (‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°)
     * - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
     */
    async isBotInGroupViaSummary(groupId) {
        try {
            const clientAny = this.client;
            if (typeof clientAny.getGroupSummary !== 'function') {
                return { inGroup: true, reason: 'getGroupSummary_not_supported' };
            }
            const summary = await clientAny.getGroupSummary(groupId);
            if (summary && summary.groupId) {
                return { inGroup: true };
            }
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏î‡πÜ ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‚Üí ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
            return { inGroup: true, reason: 'empty_summary' };
        }
        catch (err) {
            const status = err?.status || err?.statusCode;
            if (status === 404) {
                return { inGroup: false, status };
            }
            return { inGroup: true, status, reason: err?.message || 'unknown_error' };
        }
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
     */
    async getAllGroupMembers(groupId) {
        try {
            console.log('üîÑ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° ' + groupId + ' ‡∏à‡∏≤‡∏Å LINE API');
            // ‡∏î‡∏∂‡∏á user IDs ‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
            const userIds = await this.getGroupMemberUserIds(groupId);
            console.log('üìä ‡∏û‡∏ö user IDs: ' + userIds.length + ' ‡∏Ñ‡∏ô');
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• profile ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
            const memberPromises = userIds.map(async (userId) => {
                const clientAny = this.client;
                try {
                    // ‡∏´‡∏≤‡∏Å SDK ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ getGroupMemberProfile ‡∏ã‡∏∂‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Å‡∏•‡∏∏‡πà‡∏°
                    if (typeof clientAny.getGroupMemberProfile === 'function') {
                        const profile = await clientAny.getGroupMemberProfile(groupId, userId);
                        return {
                            userId,
                            displayName: profile.displayName,
                            pictureUrl: profile.pictureUrl
                        };
                    }
                    // fallback: ‡πÉ‡∏ä‡πâ getProfile (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ä‡∏ó 1:1 ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó)
                    const profile = await this.client.getProfile(userId);
                    return {
                        userId,
                        displayName: profile.displayName,
                        pictureUrl: profile.pictureUrl
                    };
                }
                catch (error) {
                    const status = error?.status || error?.statusCode;
                    if (status === 403) {
                        console.log('üö´ ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á profile ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏ó‡∏ô)');
                        return {
                            userId,
                            displayName: 'User ' + userId,
                            pictureUrl: undefined
                        };
                    }
                    if (status === 404) {
                        console.log('üîé ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• profile ‡∏ú‡πà‡∏≤‡∏ô endpoint ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ ‡∏•‡∏≠‡∏á fallback ‡πÅ‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô');
                        return {
                            userId,
                            displayName: 'User ' + userId,
                            pictureUrl: undefined
                        };
                    }
                    throw error;
                }
            });
            const members = await Promise.all(memberPromises);
            return members;
        }
        catch (error) {
            if (error.status === 403) {
                console.log('üö´ ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå "Get group member profile")');
            }
            else {
                console.error('‚ùå Failed to get all group members:', error);
            }
            throw error;
        }
    }
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô
     */
    createTaskFlexMessage(task) {
        const statusText = FlexMessageDesignSystem_1.FlexMessageDesignSystem.getStatusText(task.status);
        const priorityColor = FlexMessageDesignSystem_1.FlexMessageDesignSystem.getPriorityColor(task.priority);
        const content = [
            ...(task.description ? [FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(task.description, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary, undefined, true, 'small')] : []),
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createBox('vertical', [
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${(0, moment_timezone_1.default)(task.dueTime).tz('Asia/Bangkok').format('DD/MM/YYYY HH:mm')}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary),
                FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ${task.assignees.join(', ')}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textPrimary),
                ...(task.tags.length > 0 ? [FlexMessageDesignSystem_1.FlexMessageDesignSystem.createText(`‡πÅ‡∏ó‡πá‡∏Å: ${task.tags.map(tag => `#${tag}`).join(' ')}`, 'sm', FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.textSecondary)] : [])
            ], undefined, 'medium')
        ];
        const buttons = [
            FlexMessageDesignSystem_1.FlexMessageDesignSystem.createButton('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', 'uri', `${config_1.config.baseUrl}/dashboard?taskId=${task.id}&action=view`, 'primary')
        ];
        return FlexMessageDesignSystem_1.FlexMessageDesignSystem.createStandardTaskCard(task.title, FlexMessageDesignSystem_1.FlexMessageDesignSystem.emojis.task, FlexMessageDesignSystem_1.FlexMessageDesignSystem.colors.lightGray, content, buttons, 'extraLarge');
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏ö‡∏ö hybrid (LINE API + ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
     * ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ LINE API ‡∏Å‡πà‡∏≠‡∏ô ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡∏ô
     */
    async getGroupMembersHybrid(groupId) {
        try {
            // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ LINE API ‡∏Å‡πà‡∏≠‡∏ô (‡∏ß‡∏¥‡∏ò‡∏µ 1.3)
            console.log('üîÑ ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° ' + groupId + ' ‡∏à‡∏≤‡∏Å LINE API');
            const lineMembers = await this.getAllGroupMembers(groupId);
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° source ‡πÅ‡∏•‡∏∞ timestamp
            const membersWithSource = lineMembers.map(member => ({
                ...member,
                source: 'line_api',
                lastUpdated: new Date()
            }));
            console.log('‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LINE API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + membersWithSource.length + ' ‡∏Ñ‡∏ô');
            // Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            await this.syncGroupMembersToDatabase(groupId, membersWithSource);
            return membersWithSource;
        }
        catch (error) {
            // Reduce verbose logging for known issues to prevent Railway rate limiting
            if (error.status === 403) {
                console.warn('üö´ ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Bot)');
            }
            else {
                console.warn(`‚ö†Ô∏è LINE API error for group ${groupId}: ${error.status || 'unknown'}`);
            }
            // Fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const dbMembers = await this.getAllGroupMembersFromDatabase(groupId);
            if (dbMembers.length > 0) {
                console.log(`üìä Using database fallback: ${dbMembers.length} members`);
                // ‡πÅ‡∏õ‡∏•‡∏á source ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° type
                const membersWithCorrectSource = dbMembers.map(member => ({
                    ...member,
                    source: (member.source === 'webhook' ? 'webhook' : 'database')
                }));
                return membersWithCorrectSource;
            }
            else {
                console.log('‚ÑπÔ∏è No database fallback available - returning empty array');
                return [];
            }
        }
    }
    /**
     * Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏à‡∏≤‡∏Å LINE API ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
     * ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏¥‡∏ò‡∏µ 1.3 (Verified/Premium Bot) ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
     */
    async syncGroupMembersToDatabase(groupId, members) {
        try {
            console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° ' + groupId + ' ‡∏à‡∏≤‡∏Å LINE API');
            let lineMembers = members;
            // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö members ‡∏°‡∏≤ ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å LINE API
            if (!lineMembers) {
                try {
                    lineMembers = await this.getAllGroupMembers(groupId);
                }
                catch (error) {
                    if (error.status === 403) {
                        console.log('üö´ ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Bot)');
                        console.log('‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£ sync ‡∏à‡∏≤‡∏Å LINE API');
                        return {
                            success: false,
                            totalMembers: 0,
                            syncedMembers: 0,
                            errors: ['Bot ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°']
                        };
                    }
                    throw error;
                }
            }
            console.log('üìä ‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ' + lineMembers.length + ' ‡∏Ñ‡∏ô‡πÉ‡∏ô LINE API');
            // TODO: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ UserService ‡πÄ‡∏û‡∏∑‡πà‡∏≠ sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            // const syncResult = await this.userService.syncGroupMembers(groupId, lineMembers);
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
            lineMembers.forEach(member => {
                console.log('üìù Sync: ' + member.userId + ' - ' + member.displayName);
            });
            console.log('‚úÖ Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ' + lineMembers.length + ' ‡∏Ñ‡∏ô');
            return {
                success: true,
                totalMembers: lineMembers.length,
                syncedMembers: lineMembers.length,
                errors: []
            };
        }
        catch (error) {
            console.error('‚ùå Failed to sync group members:', error);
            return {
                success: false,
                totalMembers: 0,
                syncedMembers: 0,
                errors: [error.message || 'Unknown error']
            };
        }
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (fallback ‡πÄ‡∏°‡∏∑‡πà‡∏≠ LINE API ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)
     */
    async getGroupMembersFromDatabase(groupId) {
        try {
            console.log('üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° ' + groupId + ' ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
            // TODO: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ UserService ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            // const members = await this.userService.getGroupMembers(groupId);
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
            console.warn('‚ö†Ô∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
            console.warn('‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å');
            return [];
        }
        catch (error) {
            console.error('‚ùå Failed to get group members from database:', error);
            return [];
        }
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏£‡∏ß‡∏° source ‡πÅ‡∏•‡∏∞ timestamp)
     */
    async getAllGroupMembersFromDatabase(groupId) {
        try {
            console.log('üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° ' + groupId + ' ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ UserService ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const members = await this.userService.getGroupMembers(groupId);
            if (members.length > 0) {
                console.log('‚úÖ ‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ' + members.length + ' ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
                // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö format ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                return members.map(member => ({
                    userId: member.lineUserId,
                    displayName: member.displayName,
                    pictureUrl: undefined, // User model ‡πÑ‡∏°‡πà‡∏°‡∏µ profilePictureUrl
                    source: 'database',
                    lastUpdated: member.updatedAt || member.createdAt
                }));
            }
            else {
                console.log('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° ' + groupId);
                return [];
            }
        }
        catch (error) {
            console.error('‚ùå Failed to get all group members from database:', error);
            return [];
        }
    }
    /**
     * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (public method)
     */
    async getMemberFromDatabase(groupId, userId) {
        try {
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ UserService ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const members = await this.userService.getGroupMembers(groupId);
            const member = members.find(m => m.lineUserId === userId);
            if (member) {
                console.log('‚úÖ ‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + member.displayName);
                return {
                    userId: member.lineUserId,
                    displayName: member.displayName,
                    pictureUrl: undefined, // User model ‡πÑ‡∏°‡πà‡∏°‡∏µ profilePictureUrl
                    source: 'database',
                    lastUpdated: member.updatedAt || member.createdAt
                };
            }
            else {
                console.log('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ' + userId + ' ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
                return null;
            }
        }
        catch (error) {
            console.error('‚ùå Failed to get member from database:', error);
            return null;
        }
    }
    /**
     * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
     */
    async saveMemberToDatabase(groupId, member) {
        try {
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ UserService ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            let user = await this.userService.findByLineUserId(member.userId);
            if (!user) {
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
                user = await this.userService.createUser({
                    lineUserId: member.userId,
                    displayName: member.displayName,
                    realName: member.displayName
                });
                console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà: ' + member.displayName);
            }
            else {
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° profilePictureUrl ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô User model)
                await this.userService.updateUser(user.id, {
                    displayName: member.displayName
                });
                console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ' + member.displayName);
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            let group = await this.userService.findGroupByLineId(groupId);
            if (!group) {
                // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å LINE API ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                const groupInfo = await this.getGroupInformation(groupId);
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
                group = await this.userService.createGroup({
                    lineGroupId: groupId,
                    name: groupInfo.name
                });
                console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà: ' + groupInfo.name + ' (' + groupInfo.source + ')');
            }
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
            try {
                await this.userService.addGroupMember(group.id, user.id);
                console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°: ' + member.displayName);
            }
            catch (error) {
                if (error.message.includes('already exists')) {
                    console.log('‚ÑπÔ∏è ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ' + member.displayName + ' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß');
                }
                else {
                    throw error;
                }
            }
            console.log('üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + member.userId + ' - ' + member.displayName + ' (' + member.source + ')');
        }
        catch (error) {
            console.error('‚ùå Failed to save member to database:', error);
        }
    }
    /**
     * ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
     */
    async removeMemberFromDatabase(groupId, userId) {
        try {
            // TODO: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ UserService ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            // await this.userService.removeGroupMember(groupId, userId);
            console.log('üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + userId);
        }
        catch (error) {
            console.error('‚ùå Failed to remove member from database:', error);
        }
    }
    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏à‡∏≤‡∏Å webhook events
     * ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
     */
    async updateMemberFromWebhook(groupId, userId, eventType) {
        try {
            console.log('üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏à‡∏≤‡∏Å webhook: ' + eventType + ' - ' + userId + ' ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ' + groupId);
            if (eventType === 'join') {
                // ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°
                try {
                    const profile = await this.client.getProfile(userId);
                    const newMember = {
                        userId,
                        displayName: profile.displayName,
                        pictureUrl: profile.pictureUrl,
                        source: 'webhook',
                        lastUpdated: new Date()
                    };
                    await this.saveMemberToDatabase(groupId, newMember);
                    console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å webhook: ${profile.displayName}`);
                }
                catch (error) {
                    if (error.status === 403) {
                        console.log('üö´ ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á profile ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏ó‡∏ô)');
                        const basicMember = {
                            userId,
                            displayName: 'User ' + userId,
                            pictureUrl: undefined,
                            source: 'webhook_basic',
                            lastUpdated: new Date()
                        };
                        await this.saveMemberToDatabase(groupId, basicMember);
                    }
                    else if (error.status === 404) {
                        console.log('üö´ LINE API 404: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô LINE API ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà');
                        console.log(`‚ÑπÔ∏è ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ${userId} ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö LINE ‡πÅ‡∏•‡πâ‡∏ß`);
                        // ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
                    }
                    else {
                        throw error;
                    }
                }
            }
            else if (eventType === 'leave') {
                // ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
                console.log('üëã ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ' + userId + ' ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° ' + groupId);
                // TODO: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô inactive)
                // await this.userService.updateMemberStatus(groupId, userId, 'inactive');
            }
        }
        catch (error) {
            console.error('‚ùå Failed to update member from webhook:', error);
        }
    }
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
     */
    async checkAndSaveNewMember(groupId, userId) {
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const existingMember = await this.getMemberFromDatabase(groupId, userId);
            if (existingMember) {
                console.log('‚ÑπÔ∏è ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ' + existingMember.displayName + ' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß');
                // ‡∏´‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö" ‡πÉ‡∏´‡πâ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LINE ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                const unknownNames = ['‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö', '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠', ''];
                if (unknownNames.includes(existingMember.displayName)) {
                    try {
                        const profile = await this.client.getProfile(userId);
                        if (profile.displayName && !unknownNames.includes(profile.displayName)) {
                            const userEntity = await this.userService.findByLineUserId(userId);
                            if (userEntity) {
                                await this.userService.updateUser(userEntity.id, {
                                    displayName: profile.displayName,
                                    realName: profile.displayName
                                });
                                existingMember.displayName = profile.displayName;
                                console.log('üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å \'‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö\' ‡πÄ‡∏õ‡πá‡∏ô ' + profile.displayName);
                            }
                        }
                    }
                    catch (error) {
                        if (error.status === 404) {
                            console.warn('üö´ LINE API 404: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô LINE API ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ');
                        }
                        else {
                            console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å LINE API ‡πÑ‡∏î‡πâ:', error);
                        }
                    }
                }
                return {
                    isNewMember: false,
                    memberInfo: existingMember
                };
            }
            // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• profile ‡∏à‡∏≤‡∏Å LINE API
            try {
                const profile = await this.client.getProfile(userId);
                const newMember = {
                    userId,
                    displayName: profile.displayName,
                    pictureUrl: profile.pictureUrl,
                    source: 'message_webhook',
                    lastUpdated: new Date()
                };
                await this.saveMemberToDatabase(groupId, newMember);
                console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ' + profile.displayName);
                return {
                    isNewMember: true,
                    memberInfo: newMember
                };
            }
            catch (error) {
                if (error.status === 403) {
                    console.log('üö´ ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á profile ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏ó‡∏ô)');
                    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                    const basicMember = {
                        userId,
                        displayName: 'User ' + userId,
                        pictureUrl: undefined,
                        source: 'message_webhook_basic',
                        lastUpdated: new Date()
                    };
                    await this.saveMemberToDatabase(groupId, basicMember);
                    return {
                        isNewMember: true,
                        memberInfo: basicMember
                    };
                }
                else if (error.status === 404) {
                    console.log('üö´ LINE API 404: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
                    console.log('‚ÑπÔ∏è User ID: ' + userId + ' ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô:');
                    console.log('   - ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE ‡πÅ‡∏•‡πâ‡∏ß');
                    console.log('   - ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Ñ LINE Bot');
                    console.log('   - User ID ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
                    // ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ
                    return {
                        isNewMember: false
                    };
                }
                else {
                    console.error('‚ùå Failed to get member profile:', error);
                    console.error('‚ùå Error details: Status ' + error.status + ' - ' + error.statusMessage);
                    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                    return {
                        isNewMember: false
                    };
                }
            }
        }
        catch (error) {
            console.error('‚ùå Failed to check and save new member:', error);
            return {
                isNewMember: false
            };
        }
    }
}
exports.LineService = LineService;
//# sourceMappingURL=LineService.js.map