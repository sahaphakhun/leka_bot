"use strict";
// Flex Message Design System - ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE
// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏µ ‡∏Ç‡∏ô‡∏≤‡∏î layout ‡πÅ‡∏•‡∏∞ template ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlexMessageDesignSystem = void 0;
class FlexMessageDesignSystem {
    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏•‡∏ö control characters ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ LINE ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
    static sanitizeText(text) {
        try {
            if (typeof text !== 'string')
                return '';
            let sanitized = text
                .replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, '')
                .replace(/\uFFFE|\uFFFF/g, '')
                .trim();
            return sanitized;
        }
        catch {
            return '';
        }
    }
    // ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô
    static getStatusColor(status) {
        switch (status) {
            case 'pending':
                return this.colors.primary;
            case 'in_progress':
                return this.colors.warning;
            case 'completed':
                return this.colors.success;
            case 'cancelled':
                return this.colors.neutral;
            case 'overdue':
                return this.colors.danger;
            default:
                return this.colors.primary;
        }
    }
    // ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    static getPriorityColor(priority) {
        switch (priority) {
            case 'high':
                return this.colors.priorityHigh;
            case 'medium':
                return this.colors.priorityMedium;
            case 'low':
                return this.colors.priorityLow;
            default:
                return this.colors.priorityLow;
        }
    }
    // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    static getStatusText(status) {
        switch (status) {
            case 'pending':
                return '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£';
            case 'in_progress':
                return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£';
            case 'completed':
                return '‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß';
            case 'cancelled':
                return '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å';
            case 'overdue':
                return '‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î';
            default:
                return status;
        }
    }
    // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    static getPriorityText(priority) {
        switch (priority) {
            case 'high':
                return '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á';
            case 'medium':
                return '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
            case 'low':
                return '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡πà‡∏≥';
            default:
                return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        }
    }
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
    static createButton(label, action, data, style = 'primary', height = 'sm') {
        return {
            type: 'button',
            style,
            height,
            action: {
                type: action,
                label,
                ...(action === 'postback'
                    ? { data: typeof data === 'string' ? data : JSON.stringify(data) }
                    : { uri: data })
            }
        };
    }
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
    static createText(text, size = 'sm', color = this.colors.textPrimary, weight, wrap, margin) {
        return {
            type: 'text',
            text: this.sanitizeText(text),
            size: this.textSizes[size],
            color,
            ...(weight && { weight }),
            ...(wrap && { wrap }),
            ...(margin && { margin: this.padding[margin] })
        };
    }
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á separator ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
    static createSeparator(margin = 'medium') {
        return {
            type: 'separator',
            margin: this.padding[margin]
        };
    }
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á box ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
    static createBox(layout, contents, spacing, padding, backgroundColor, cornerRadius) {
        return {
            type: 'box',
            layout,
            contents,
            ...(spacing && { spacing: this.spacing[spacing] }),
            ...(padding && { paddingAll: this.padding[padding] }),
            ...(backgroundColor && { backgroundColor }),
            ...(cornerRadius && { cornerRadius })
        };
    }
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á template ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏á‡∏≤‡∏ô
    static createStandardTaskCard(title, emoji, color, content, // ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á text, separator, ‡πÅ‡∏•‡∏∞ box components
    buttons, size = 'extraLarge') {
        return {
            type: 'flex',
            altText: this.sanitizeText(title),
            contents: {
                type: 'bubble',
                ...(size !== 'default' && { size: this.sizes[size] }),
                header: {
                    type: 'box',
                    layout: this.layouts.header,
                    contents: [
                        this.createText(`${emoji} ${title}`, 'lg', this.colors.white, 'bold')
                    ],
                    backgroundColor: color,
                    paddingAll: this.padding.medium
                },
                body: {
                    type: 'box',
                    layout: this.layouts.body,
                    spacing: this.spacing.medium,
                    contents: content,
                    paddingAll: this.padding.medium
                },
                ...(buttons.length > 0 && {
                    footer: {
                        type: 'box',
                        layout: this.layouts.footer,
                        spacing: this.spacing.small,
                        contents: buttons,
                        paddingAll: this.padding.medium
                    }
                })
            }
        };
    }
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô
    static createTaskInfoCard(taskData, type) {
        const { title, description, dueTime, assignees, priority, tags, status, fileCount } = taskData;
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        const typeConfig = this.getTypeConfig(type);
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
        const content = [];
        if (dueTime) {
            content.push(this.createText(`üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${this.formatDate(dueTime)}`, 'sm', this.colors.textPrimary));
        }
        if (assignees && assignees.length > 0) {
            content.push(this.createText(`üë• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ${assignees.join(', ')}`, 'sm', this.colors.textPrimary));
        }
        if (priority) {
            content.push(this.createText(`üéØ ${this.getPriorityText(priority)}`, 'sm', this.getPriorityColor(priority), 'bold'));
        }
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        const { initialFiles, submissionFiles, attachedFiles: allAttachedFiles } = taskData;
        const totalFiles = fileCount || (allAttachedFiles ? allAttachedFiles.length : 0);
        if (totalFiles > 0) {
            // ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô
            if (initialFiles && initialFiles.length > 0) {
                content.push(this.createText(`üìã ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${initialFiles.length} ‡πÑ‡∏ü‡∏•‡πå`, 'sm', this.colors.primary, 'bold'));
                const filesToShow = initialFiles.slice(0, 2);
                for (const file of filesToShow) {
                    content.push(this.createText(`  ‚Ä¢ ${file.originalName || file.fileName}`, 'xs', this.colors.textSecondary));
                }
                if (initialFiles.length > 2) {
                    content.push(this.createText(`  ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${initialFiles.length - 2} ‡πÑ‡∏ü‡∏•‡πå...`, 'xs', this.colors.textSecondary));
                }
            }
            // ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏ï‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô
            if (submissionFiles && submissionFiles.length > 0) {
                content.push(this.createText(`üì§ ‡πÑ‡∏ü‡∏•‡πå‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô: ${submissionFiles.length} ‡πÑ‡∏ü‡∏•‡πå`, 'sm', this.colors.success, 'bold'));
                const filesToShow = submissionFiles.slice(0, 2);
                for (const file of filesToShow) {
                    content.push(this.createText(`  ‚Ä¢ ${file.originalName || file.fileName}`, 'xs', this.colors.textSecondary));
                }
                if (submissionFiles.length > 2) {
                    content.push(this.createText(`  ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${submissionFiles.length - 2} ‡πÑ‡∏ü‡∏•‡πå...`, 'xs', this.colors.textSecondary));
                }
            }
            // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏ß‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            if (initialFiles && submissionFiles && initialFiles.length > 0 && submissionFiles.length > 0) {
                content.push(this.createText(`üìé ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalFiles} ‡πÑ‡∏ü‡∏•‡πå`, 'sm', this.colors.textPrimary));
            }
            else if (!initialFiles && !submissionFiles && allAttachedFiles && allAttachedFiles.length > 0) {
                // fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ attachmentType
                content.push(this.createText(`üìé ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö: ${totalFiles} ‡πÑ‡∏ü‡∏•‡πå`, 'sm', this.colors.textPrimary, 'bold'));
                const filesToShow = allAttachedFiles.slice(0, 3);
                for (const file of filesToShow) {
                    content.push(this.createText(`  ‚Ä¢ ${file.originalName || file.fileName}`, 'xs', this.colors.textSecondary));
                }
                if (allAttachedFiles.length > 3) {
                    content.push(this.createText(`  ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${allAttachedFiles.length - 3} ‡πÑ‡∏ü‡∏•‡πå...`, 'xs', this.colors.textSecondary));
                }
            }
        }
        if (tags && tags.length > 0) {
            content.push(this.createText(`üè∑Ô∏è ${tags.map(tag => `#${tag}`).join(' ')}`, 'sm', this.colors.textSecondary, undefined, true));
        }
        if (description) {
            content.push(this.createText(`üìù ${description}`, 'sm', this.colors.textSecondary, undefined, true));
        }
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
        const buttons = [
            this.createButton('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', 'uri', `${this.getBaseUrl()}/dashboard?taskId=${taskData.id}&action=view`, 'primary')
        ];
        return this.createStandardTaskCard(title, typeConfig.emoji, typeConfig.color, content, buttons, 'extraLarge');
    }
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πå‡∏î
    static getTypeConfig(type) {
        switch (type) {
            case 'new':
                return { emoji: this.emojis.newTask, color: this.colors.primary };
            case 'overdue':
                return { emoji: this.emojis.overdue, color: this.colors.danger };
            case 'completed':
                return { emoji: this.emojis.completed, color: this.colors.success };
            case 'updated':
                return { emoji: this.emojis.updated, color: this.colors.primary };
            case 'deleted':
                return { emoji: this.emojis.deleted, color: this.colors.neutral };
            case 'submitted':
                return { emoji: this.emojis.submitted, color: this.colors.info };
            case 'review':
                return { emoji: this.emojis.review, color: this.colors.primary };
            case 'rejected':
                return { emoji: this.emojis.rejected, color: this.colors.danger };
            case 'report':
                return { emoji: this.emojis.report, color: this.colors.success };
            case 'personal':
                return { emoji: this.emojis.personal, color: this.colors.success };
            default:
                return { emoji: this.emojis.task, color: this.colors.primary };
        }
    }
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    static formatDate(date) {
        const moment = require('moment-timezone');
        return moment(date).tz('Asia/Bangkok').format('DD/MM/YYYY HH:mm');
    }
    // ‡∏£‡∏±‡∏ö base URL
    static getBaseUrl() {
        const config = require('@/utils/config').default;
        return config.baseUrl;
    }
}
exports.FlexMessageDesignSystem = FlexMessageDesignSystem;
// ‡∏™‡∏µ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πå‡∏î
FlexMessageDesignSystem.colors = {
    // ‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å
    primary: '#2196F3', // ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï/‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à
    success: '#4CAF50', // ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à/‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    warning: '#FF9800', // ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô/‡∏á‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
    danger: '#F44336', // ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î/‡∏ñ‡∏π‡∏Å‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö
    info: '#9C27B0', // ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á
    neutral: '#9E9E9E', // ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
    // ‡∏™‡∏µ‡∏£‡∏≠‡∏á
    lightGray: '#F8F9FA', // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≠‡∏ô
    darkGray: '#666666', // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≠‡∏á
    textPrimary: '#333333', // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å
    textSecondary: '#666666', // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≠‡∏á
    white: '#FFFFFF', // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≤‡∏ß
    // ‡∏™‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    priorityHigh: '#FF5551',
    priorityMedium: '#FFA500',
    priorityLow: '#00C851'
};
// ‡∏Ç‡∏ô‡∏≤‡∏î‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
FlexMessageDesignSystem.sizes = {
    default: undefined, // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
    compact: 'kilo', // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏∞‡∏ó‡∏±‡∏î‡∏£‡∏±‡∏î
    large: 'mega', // ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
    extraLarge: 'giga' // ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å
};
// Layout ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
FlexMessageDesignSystem.layouts = {
    header: 'vertical',
    body: 'vertical',
    footer: 'horizontal'
};
// Padding ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
FlexMessageDesignSystem.padding = {
    small: 'sm',
    medium: 'md',
    large: 'lg'
};
// Spacing ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
FlexMessageDesignSystem.spacing = {
    small: 'sm',
    medium: 'md',
    large: 'lg'
};
// ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
FlexMessageDesignSystem.textSizes = {
    xs: 'xs',
    sm: 'sm',
    md: 'md',
    lg: 'lg',
    xl: 'xl'
};
// ‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πå‡∏î
FlexMessageDesignSystem.emojis = {
    newTask: 'üÜï',
    overdue: '‚ö†Ô∏è',
    completed: '‚úÖ',
    updated: '‚úèÔ∏è',
    deleted: 'üóëÔ∏è',
    submitted: 'üìé',
    review: 'üìù',
    rejected: '‚ùå',
    report: 'üìä',
    personal: 'üìã',
    file: 'üìÅ',
    task: 'üìã',
    reminder: '‚è∞',
    meeting: 'üìÖ',
    approval: 'üìã'
};
//# sourceMappingURL=FlexMessageDesignSystem.js.map