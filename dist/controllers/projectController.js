"use strict";
// Project Controller
// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ API endpoints ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Rules ‡πÅ‡∏•‡∏∞ Memory
Object.defineProperty(exports, "__esModule", { value: true });
exports.projectRouter = void 0;
const express_1 = require("express");
const logger_1 = require("@/utils/logger");
const serviceContainer_1 = require("@/utils/serviceContainer");
exports.projectRouter = (0, express_1.Router)();
// Services
const checklistService = serviceContainer_1.serviceContainer.get('ProjectChecklistService');
const memoryService = serviceContainer_1.serviceContainer.get('ProjectMemoryService');
const workflowService = serviceContainer_1.serviceContainer.get('ProjectWorkflowService');
// ==================== PROJECT STATUS & CHECKLIST ====================
/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å
 * GET /api/project/status
 */
exports.projectRouter.get('/status', async (req, res) => {
    try {
        logger_1.logger.info('üîç API: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å');
        const status = await checklistService.checkProjectStatus();
        res.json({
            success: true,
            data: status,
            message: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        });
    }
    catch (error) {
        logger_1.logger.error('‚ùå API Error: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å:', error);
        res.status(500).json({
            success: false,
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * ‡∏£‡∏±‡∏ô checklist
 * POST /api/project/checklist/:checklistId/run
 */
exports.projectRouter.post('/checklist/:checklistId/run', async (req, res) => {
    try {
        const { checklistId } = req.params;
        const { userId } = req.body;
        if (!userId) {
            return res.status(400).json({
                success: false,
                error: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ userId'
            });
        }
        logger_1.logger.info(`üìã API: ‡∏£‡∏±‡∏ô checklist ${checklistId} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId}`);
        const result = await checklistService.runChecklist(checklistId, userId);
        res.json({
            success: true,
            data: result,
            message: `‡∏£‡∏±‡∏ô checklist ${result.checklistName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
        });
    }
    catch (error) {
        logger_1.logger.error('‚ùå API Error: ‡∏£‡∏±‡∏ô checklist:', error);
        res.status(500).json({
            success: false,
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô checklist',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * ‡∏£‡∏±‡∏ö checklist ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * GET /api/project/checklist
 */
exports.projectRouter.get('/checklist', async (req, res) => {
    try {
        logger_1.logger.info('üìã API: ‡∏£‡∏±‡∏ö checklist ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
        const checklists = checklistService.getActiveChecklists();
        res.json({
            success: true,
            data: checklists,
            message: '‡∏£‡∏±‡∏ö checklist ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        });
    }
    catch (error) {
        logger_1.logger.error('‚ùå API Error: ‡∏£‡∏±‡∏ö checklist:', error);
        res.status(500).json({
            success: false,
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö checklist',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * ‡∏£‡∏±‡∏ö checklist ‡∏ï‡∏≤‡∏° ID
 * GET /api/project/checklist/:checklistId
 */
exports.projectRouter.get('/checklist/:checklistId', async (req, res) => {
    try {
        const { checklistId } = req.params;
        logger_1.logger.info(`üìã API: ‡∏£‡∏±‡∏ö checklist ${checklistId}`);
        const checklist = checklistService.getChecklist(checklistId);
        if (!checklist) {
            return res.status(404).json({
                success: false,
                error: '‡πÑ‡∏°‡πà‡∏û‡∏ö checklist ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'
            });
        }
        res.json({
            success: true,
            data: checklist,
            message: '‡∏£‡∏±‡∏ö checklist ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        });
    }
    catch (error) {
        logger_1.logger.error('‚ùå API Error: ‡∏£‡∏±‡∏ö checklist:', error);
        res.status(500).json({
            success: false,
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö checklist',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
// ==================== PROJECT RULES & MEMORIES ====================
/**
 * ‡∏£‡∏±‡∏ö rules ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * GET /api/project/rules
 */
exports.projectRouter.get('/rules', async (req, res) => {
    try {
        const { category, priority } = req.query;
        logger_1.logger.info('üìã API: ‡∏£‡∏±‡∏ö rules ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
        let rules = memoryService.getAllRules();
        if (category) {
            rules = rules.filter(rule => rule.category === category);
        }
        if (priority) {
            rules = rules.filter(rule => rule.priority === priority);
        }
        res.json({
            success: true,
            data: rules,
            message: '‡∏£‡∏±‡∏ö rules ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        });
    }
    catch (error) {
        logger_1.logger.error('‚ùå API Error: ‡∏£‡∏±‡∏ö rules:', error);
        res.status(500).json({
            success: false,
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö rules',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * ‡∏£‡∏±‡∏ö memories ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * GET /api/project/memories
 */
exports.projectRouter.get('/memories', async (req, res) => {
    try {
        const { type, tags } = req.query;
        logger_1.logger.info('üß† API: ‡∏£‡∏±‡∏ö memories ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
        let memories = memoryService.getAllMemories();
        if (type) {
            memories = memories.filter(memory => memory.type === type);
        }
        if (tags) {
            const tagArray = Array.isArray(tags) ? tags : [tags];
            memories = memories.filter(memory => tagArray.some(tag => memory.tags.includes(tag)));
        }
        res.json({
            success: true,
            data: memories,
            message: '‡∏£‡∏±‡∏ö memories ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        });
    }
    catch (error) {
        logger_1.logger.error('‚ùå API Error: ‡∏£‡∏±‡∏ö memories:', error);
        res.status(500).json({
            success: false,
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö memories',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ memories ‡πÅ‡∏•‡∏∞ rules
 * GET /api/project/search
 */
exports.projectRouter.get('/search', async (req, res) => {
    try {
        const { q, tags } = req.query;
        if (!q) {
            return res.status(400).json({
                success: false,
                error: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (q)'
            });
        }
        logger_1.logger.info(`üîç API: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ "${q}"`);
        const tagArray = tags ? (Array.isArray(tags) ? tags : [tags]) : [];
        const result = memoryService.searchMemories(q, tagArray);
        res.json({
            success: true,
            data: result,
            message: `‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏û‡∏ö ${result.totalResults} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`
        });
    }
    catch (error) {
        logger_1.logger.error('‚ùå API Error: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:', error);
        res.status(500).json({
            success: false,
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * ‡∏£‡∏±‡∏ö rule recommendations
 * GET /api/project/recommendations
 */
exports.projectRouter.get('/recommendations', async (req, res) => {
    try {
        const { context } = req.query;
        if (!context) {
            return res.status(400).json({
                success: false,
                error: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ context'
            });
        }
        logger_1.logger.info(`üí° API: ‡∏£‡∏±‡∏ö recommendations ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö context: ${context}`);
        const recommendations = memoryService.getRuleRecommendations(context);
        res.json({
            success: true,
            data: recommendations,
            message: '‡∏£‡∏±‡∏ö recommendations ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        });
    }
    catch (error) {
        logger_1.logger.error('‚ùå API Error: ‡∏£‡∏±‡∏ö recommendations:', error);
        res.status(500).json({
            success: false,
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö recommendations',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏° rule ‡πÉ‡∏´‡∏°‡πà
 * POST /api/project/rules
 */
exports.projectRouter.post('/rules', async (req, res) => {
    try {
        const ruleData = req.body;
        logger_1.logger.info('üìã API: ‡πÄ‡∏û‡∏¥‡πà‡∏° rule ‡πÉ‡∏´‡∏°‡πà');
        const newRule = memoryService.addRule(ruleData);
        res.status(201).json({
            success: true,
            data: newRule,
            message: '‡πÄ‡∏û‡∏¥‡πà‡∏° rule ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        });
    }
    catch (error) {
        logger_1.logger.error('‚ùå API Error: ‡πÄ‡∏û‡∏¥‡πà‡∏° rule:', error);
        res.status(500).json({
            success: false,
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° rule',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏° memory ‡πÉ‡∏´‡∏°‡πà
 * POST /api/project/memories
 */
exports.projectRouter.post('/memories', async (req, res) => {
    try {
        const memoryData = req.body;
        logger_1.logger.info('üß† API: ‡πÄ‡∏û‡∏¥‡πà‡∏° memory ‡πÉ‡∏´‡∏°‡πà');
        const newMemory = memoryService.addMemory(memoryData);
        res.status(201).json({
            success: true,
            data: newMemory,
            message: '‡πÄ‡∏û‡∏¥‡πà‡∏° memory ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        });
    }
    catch (error) {
        logger_1.logger.error('‚ùå API Error: ‡πÄ‡∏û‡∏¥‡πà‡∏° memory:', error);
        res.status(500).json({
            success: false,
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° memory',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
// ==================== PROJECT WORKFLOW ====================
/**
 * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô workflow ‡πÉ‡∏´‡∏°‡πà
 * POST /api/project/workflow/start
 */
exports.projectRouter.post('/workflow/start', async (req, res) => {
    try {
        const { templateId, userId, groupId } = req.body;
        if (!templateId || !userId) {
            return res.status(400).json({
                success: false,
                error: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ templateId ‡πÅ‡∏•‡∏∞ userId'
            });
        }
        logger_1.logger.info(`üöÄ API: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô workflow ${templateId} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId}`);
        const workflow = await workflowService.startWorkflow(templateId, userId, groupId);
        res.status(201).json({
            success: true,
            data: workflow,
            message: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô workflow ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        });
    }
    catch (error) {
        logger_1.logger.error('‚ùå API Error: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô workflow:', error);
        res.status(500).json({
            success: false,
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô workflow',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ workflow step
 * POST /api/project/workflow/:workflowId/step/:stepId
 */
exports.projectRouter.post('/workflow/:workflowId/step/:stepId', async (req, res) => {
    try {
        const { workflowId, stepId } = req.params;
        const { userId, notes } = req.body;
        if (!userId) {
            return res.status(400).json({
                success: false,
                error: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ userId'
            });
        }
        logger_1.logger.info(`‚úÖ API: ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ step ${stepId} ‡πÉ‡∏ô workflow ${workflowId}`);
        const workflow = await workflowService.executeWorkflowStep(workflowId, stepId, userId, notes);
        res.json({
            success: true,
            data: workflow,
            message: '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ step ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        });
    }
    catch (error) {
        logger_1.logger.error('‚ùå API Error: ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ workflow step:', error);
        res.status(500).json({
            success: false,
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ workflow step',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * ‡∏£‡∏±‡∏ö workflow ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
 * GET /api/project/workflow/active
 */
exports.projectRouter.get('/workflow/active', async (req, res) => {
    try {
        const { userId } = req.query;
        logger_1.logger.info('üîÑ API: ‡∏£‡∏±‡∏ö workflow ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£');
        const workflows = workflowService.getActiveWorkflows(userId);
        res.json({
            success: true,
            data: workflows,
            message: '‡∏£‡∏±‡∏ö workflow ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        });
    }
    catch (error) {
        logger_1.logger.error('‚ùå API Error: ‡∏£‡∏±‡∏ö workflow:', error);
        res.status(500).json({
            success: false,
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö workflow',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * ‡∏£‡∏±‡∏ö workflow templates
 * GET /api/project/workflow/templates
 */
exports.projectRouter.get('/workflow/templates', async (req, res) => {
    try {
        logger_1.logger.info('üìã API: ‡∏£‡∏±‡∏ö workflow templates');
        const templates = workflowService.getActiveTemplates();
        res.json({
            success: true,
            data: templates,
            message: '‡∏£‡∏±‡∏ö workflow templates ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        });
    }
    catch (error) {
        logger_1.logger.error('‚ùå API Error: ‡∏£‡∏±‡∏ö workflow templates:', error);
        res.status(500).json({
            success: false,
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö workflow templates',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
// ==================== PROJECT INSIGHTS & REPORTS ====================
/**
 * ‡∏£‡∏±‡∏ö project insights
 * GET /api/project/insights
 */
exports.projectRouter.get('/insights', async (req, res) => {
    try {
        logger_1.logger.info('üí° API: ‡∏£‡∏±‡∏ö project insights');
        const insights = memoryService.generateProjectInsights();
        res.json({
            success: true,
            data: insights,
            message: '‡∏£‡∏±‡∏ö project insights ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        });
    }
    catch (error) {
        logger_1.logger.error('‚ùå API Error: ‡∏£‡∏±‡∏ö project insights:', error);
        res.status(500).json({
            success: false,
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö project insights',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ
 * GET /api/project/reports/summary
 */
exports.projectRouter.get('/reports/summary', async (req, res) => {
    try {
        logger_1.logger.info('üìä API: ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ');
        const memoryReport = memoryService.generateSummaryReport();
        const workflowReport = workflowService.generateWorkflowReport();
        const summary = {
            memory: memoryReport,
            workflow: workflowReport,
            timestamp: new Date()
        };
        res.json({
            success: true,
            data: summary,
            message: '‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        });
    }
    catch (error) {
        logger_1.logger.error('‚ùå API Error: ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ:', error);
        res.status(500).json({
            success: false,
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á rules ‡πÅ‡∏•‡∏∞ memories
 * GET /api/project/consistency
 */
exports.projectRouter.get('/consistency', async (req, res) => {
    try {
        logger_1.logger.info('üîç API: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á');
        const consistency = memoryService.validateConsistency();
        res.json({
            success: true,
            data: consistency,
            message: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        });
    }
    catch (error) {
        logger_1.logger.error('‚ùå API Error: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á:', error);
        res.status(500).json({
            success: false,
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});
exports.default = exports.projectRouter;
//# sourceMappingURL=projectController.js.map