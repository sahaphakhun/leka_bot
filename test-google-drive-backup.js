// Test Google Drive Backup API
// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Google Drive Backup

const axios = require('axios');

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ base URL (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏° environment ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
const BASE_URL = process.env.BASE_URL || 'http://localhost:3000';
const API_KEY = process.env.API_KEY || 'your-api-key-here'; // ‡πÉ‡∏™‡πà API key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

// Headers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API calls
const headers = {
  'Authorization': `Bearer ${API_KEY}`,
  'Content-Type': 'application/json'
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
function logResult(title, data) {
  console.log(`\n${'='.repeat(50)}`);
  console.log(`üìã ${title}`);
  console.log(`${'='.repeat(50)}`);
  console.log(JSON.stringify(data, null, 2));
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á error
function logError(title, error) {
  console.log(`\n${'='.repeat(50)}`);
  console.log(`‚ùå ${title}`);
  console.log(`${'='.repeat(50)}`);
  if (error.response) {
    console.log('Status:', error.response.status);
    console.log('Data:', JSON.stringify(error.response.data, null, 2));
  } else {
    console.log('Error:', error.message);
  }
}

// 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Drive
async function testConnection() {
  try {
    console.log('üîó Testing Google Drive connection...');
    const response = await axios.get(`${BASE_URL}/api/backup/test-connection`, { headers });
    logResult('‚úÖ Google Drive Connection Test', response.data);
    return response.data.success;
  } catch (error) {
    logError('‚ùå Google Drive Connection Test Failed', error);
    return false;
  }
}

// 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞
async function testTaskBackup(taskId) {
  try {
    console.log(`üìÅ Testing task backup for task: ${taskId}...`);
    const response = await axios.post(
      `${BASE_URL}/api/backup/tasks/${taskId}/backup`,
      { date: new Date().toISOString() },
      { headers }
    );
    logResult('‚úÖ Task Backup Test', response.data);
    return response.data;
  } catch (error) {
    logError('‚ùå Task Backup Test Failed', error);
    return null;
  }
}

// 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
async function testGroupBackup(groupId) {
  try {
    console.log(`üìÅ Testing group backup for group: ${groupId}...`);
    const response = await axios.post(
      `${BASE_URL}/api/backup/groups/${groupId}/backup`,
      { date: new Date().toISOString() },
      { headers }
    );
    logResult('‚úÖ Group Backup Test', response.data);
    return response.data;
  } catch (error) {
    logError('‚ùå Group Backup Test Failed', error);
    return null;
  }
}

// 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function testAllBackup() {
  try {
    console.log('üìÅ Testing system-wide backup...');
    const response = await axios.post(
      `${BASE_URL}/api/backup/backup-all`,
      { date: new Date().toISOString() },
      { headers }
    );
    logResult('‚úÖ System-wide Backup Test', response.data);
    return response.data;
  } catch (error) {
    logError('‚ùå System-wide Backup Test Failed', error);
    return null;
  }
}

// 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
async function testDateRangeBackup(groupId) {
  try {
    console.log(`üìÅ Testing date range backup for group: ${groupId}...`);
    const endDate = new Date();
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 7); // 7 ‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á

    const response = await axios.post(
      `${BASE_URL}/api/backup/groups/${groupId}/backup-by-date-range`,
      {
        startDate: startDate.toISOString(),
        endDate: endDate.toISOString()
      },
      { headers }
    );
    logResult('‚úÖ Date Range Backup Test', response.data);
    return response.data;
  } catch (error) {
    logError('‚ùå Date Range Backup Test Failed', error);
    return null;
  }
}

// 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
async function testTypeBackup(groupId) {
  try {
    console.log(`üìÅ Testing type-based backup for group: ${groupId}...`);
    const response = await axios.post(
      `${BASE_URL}/api/backup/groups/${groupId}/backup-by-type`,
      {
        attachmentType: 'submission' // ‡∏´‡∏£‡∏∑‡∏≠ 'initial'
      },
      { headers }
    );
    logResult('‚úÖ Type-based Backup Test', response.data);
    return response.data;
  } catch (error) {
    logError('‚ùå Type-based Backup Test Failed', error);
    return null;
  }
}

// 7. ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö
async function getBackupStats() {
  try {
    console.log('üìä Getting backup statistics...');
    const response = await axios.get(`${BASE_URL}/api/backup/stats`, { headers });
    logResult('‚úÖ Backup Statistics', response.data);
    return response.data;
  } catch (error) {
    logError('‚ùå Get Backup Statistics Failed', error);
    return null;
  }
}

// 8. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤
async function runScheduledBackups() {
  try {
    console.log('‚è∞ Running scheduled backups...');
    const response = await axios.post(`${BASE_URL}/api/backup/run-scheduled`, {}, { headers });
    logResult('‚úÖ Scheduled Backups', response.data);
    return response.data;
  } catch (error) {
    logError('‚ùå Scheduled Backups Failed', error);
    return null;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
async function runTests() {
  console.log('üöÄ Starting Google Drive Backup Tests...');
  console.log(`üìç Base URL: ${BASE_URL}`);
  console.log(`üîë API Key: ${API_KEY.substring(0, 10)}...`);

  // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  const isConnected = await testConnection();
  if (!isConnected) {
    console.log('\n‚ùå Cannot proceed with tests - Google Drive connection failed');
    return;
  }

  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
  const sampleTaskId = 'your-task-id-here';
  const sampleGroupId = 'your-group-id-here';

  // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ task ID)
  if (sampleTaskId !== 'your-task-id-here') {
    await testTaskBackup(sampleTaskId);
  }

  // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ group ID)
  if (sampleGroupId !== 'your-group-id-here') {
    await testGroupBackup(sampleGroupId);
    await testDateRangeBackup(sampleGroupId);
    await testTypeBackup(sampleGroupId);
  }

  // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  await testAllBackup();

  // 5. ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
  await getBackupStats();

  // 6. ‡∏£‡∏±‡∏ô scheduled backups
  await runScheduledBackups();

  console.log('\nüéâ All tests completed!');
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = {
  testConnection,
  testTaskBackup,
  testGroupBackup,
  testAllBackup,
  testDateRangeBackup,
  testTypeBackup,
  getBackupStats,
  runScheduledBackups
};
