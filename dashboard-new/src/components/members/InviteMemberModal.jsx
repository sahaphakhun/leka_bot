import { useState } from "react";
import { useAuth } from "../../context/AuthContext";
import { useModal } from "../../context/ModalContext";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "../ui/dialog";
import { Button } from "../ui/button";
import { Input } from "../ui/input";
import { Label } from "../ui/label";
import { Textarea } from "../ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../ui/tabs";
import { UserPlus, Copy, Check, Link2, Mail, Loader2 } from "lucide-react";
import { showSuccess, showError, showWarning } from "../../lib/toast";

export default function InviteMemberModal({ onInvited }) {
  const { groupId, canModify } = useAuth();
  const { isInviteMemberOpen, closeInviteMember } = useModal();
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState("link");
  const [inviteLink, setInviteLink] = useState("");
  const [copied, setCopied] = useState(false);
  const [email, setEmail] = useState("");
  const [message, setMessage] = useState("");

  const generateInviteLink = async () => {
    if (!canModify()) {
      showWarning("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å");
      return;
    }

    setLoading(true);
    try {
      const { createInviteLink } = await import("../../services/api");
      const response = await createInviteLink(groupId);
      const link =
        response.link || response.inviteUrl || response.url || response;
      setInviteLink(link);
      showSuccess("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      console.log("‚úÖ Generated invite link");
    } catch (error) {
      console.error("‚ùå Failed to generate invite link:", error);
      showError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏ä‡∏¥‡∏ç‡πÑ‡∏î‡πâ", error);
    } finally {
      setLoading(false);
    }
  };

  const handleCopyLink = () => {
    if (!inviteLink) {
      showWarning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏ä‡∏¥‡∏ç‡∏Å‡πà‡∏≠‡∏ô");
      return;
    }

    navigator.clipboard.writeText(inviteLink);
    setCopied(true);
    showSuccess("‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏•‡πâ‡∏ß");
    setTimeout(() => setCopied(false), 2000);
  };

  const handleSendEmail = async () => {
    if (!canModify()) {
      showWarning("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å");
      return;
    }

    if (!email?.trim()) {
      showWarning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•");
      return;
    }

    // Simple email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      showWarning("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      return;
    }

    setLoading(true);
    try {
      const { sendInviteEmail } = await import("../../services/api");
      await sendInviteEmail(groupId, email, message);
      showSuccess("‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      console.log("‚úÖ Sent invite email to:", email);

      // Reset form
      setEmail("");
      setMessage("");

      if (onInvited) onInvited();
    } catch (error) {
      console.error("‚ùå Failed to send invite:", error);
      showError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÑ‡∏î‡πâ", error);
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    // Reset state when closing
    setInviteLink("");
    setEmail("");
    setMessage("");
    setCopied(false);
    closeInviteMember();
  };

  // Check permission
  const hasPermission = canModify();

  return (
    <Dialog open={isInviteMemberOpen} onOpenChange={handleClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <UserPlus className="w-5 h-5" />
            ‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà
          </DialogTitle>
          <DialogDescription>‡πÄ‡∏ä‡∏¥‡∏ç‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</DialogDescription>
        </DialogHeader>

        {!hasPermission && (
          <div className="bg-amber-50 border border-amber-200 rounded-lg p-3 mb-4">
            <p className="text-sm text-amber-800">
              ‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°
            </p>
          </div>
        )}

        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="link" className="flex items-center gap-2">
              <Link2 className="w-4 h-4" />
              ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏ä‡∏¥‡∏ç
            </TabsTrigger>
            <TabsTrigger value="email" className="flex items-center gap-2">
              <Mail className="w-4 h-4" />
              ‡∏≠‡∏µ‡πÄ‡∏°‡∏•
            </TabsTrigger>
          </TabsList>

          <TabsContent value="link" className="space-y-4">
            <div className="space-y-3">
              <Label>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏ä‡∏¥‡∏ç</Label>
              <p className="text-sm text-gray-600">
                ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ä‡∏£‡πå‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°
              </p>

              {inviteLink ? (
                <div className="space-y-3">
                  <div className="flex gap-2">
                    <Input
                      value={inviteLink}
                      readOnly
                      className="flex-1 font-mono text-xs"
                    />
                    <Button
                      onClick={handleCopyLink}
                      variant="outline"
                      size="icon"
                      title="‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å"
                    >
                      {copied ? (
                        <Check className="w-4 h-4 text-green-600" />
                      ) : (
                        <Copy className="w-4 h-4" />
                      )}
                    </Button>
                  </div>

                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                    <p className="text-xs text-blue-800">
                      üí° <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ 7 ‡∏ß‡∏±‡∏ô
                      ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                    </p>
                  </div>

                  <Button
                    onClick={generateInviteLink}
                    variant="outline"
                    className="w-full"
                    disabled={loading || !hasPermission}
                  >
                    <UserPlus className="w-4 h-4 mr-2" />
                    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏´‡∏°‡πà
                  </Button>
                </div>
              ) : (
                <Button
                  onClick={generateInviteLink}
                  disabled={loading || !hasPermission}
                  className="w-full"
                >
                  {loading ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...
                    </>
                  ) : (
                    <>
                      <UserPlus className="w-4 h-4 mr-2" />
                      ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏ä‡∏¥‡∏ç
                    </>
                  )}
                </Button>
              )}
            </div>
          </TabsContent>

          <TabsContent value="email" className="space-y-4">
            <div className="space-y-3">
              <div className="space-y-2">
                <Label htmlFor="email">‡∏≠‡∏µ‡πÄ‡∏°‡∏• *</Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="example@email.com"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  disabled={!hasPermission}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="message">‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</Label>
                <Textarea
                  id="message"
                  placeholder="‡πÄ‡∏ä‡∏¥‡∏ç‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤..."
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  rows={3}
                  disabled={!hasPermission}
                />
              </div>

              <div className="bg-gray-50 border border-gray-200 rounded-lg p-3">
                <p className="text-xs text-gray-600">
                  üìß ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏ä‡∏¥‡∏ç‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°
                </p>
              </div>

              <Button
                onClick={handleSendEmail}
                disabled={loading || !hasPermission}
                className="w-full"
              >
                {loading ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...
                  </>
                ) : (
                  <>
                    <Mail className="w-4 h-4 mr-2" />
                    ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
                  </>
                )}
              </Button>
            </div>
          </TabsContent>
        </Tabs>

        <div className="flex justify-end pt-4 border-t">
          <Button variant="outline" onClick={handleClose}>
            ‡∏õ‡∏¥‡∏î
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}
