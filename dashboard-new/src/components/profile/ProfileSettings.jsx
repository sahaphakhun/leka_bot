import { useState } from "react";
import { showError, showSuccess } from "../../lib/toast";
import { useAuth } from "../../context/AuthContext";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "../ui/card";
import { Button } from "../ui/button";
import { Input } from "../ui/input";
import { Label } from "../ui/label";
import { Switch } from "../ui/switch";
import { Avatar, AvatarFallback, AvatarImage } from "../ui/avatar";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "../ui/select";
import { Badge } from "../ui/badge";
import { Save } from "lucide-react";

export default function ProfileSettings({ profile, onUpdate }) {
  const { userId, groupId } = useAuth();
  const [loading, setLoading] = useState(false);
  const [settings, setSettings] = useState({
    displayName: profile?.displayName || "",
    email: profile?.email || "",
    timezone: profile?.timezone || "Asia/Bangkok",
    notifications: {
      taskAssigned: profile?.notifications?.taskAssigned ?? true,
      taskDue: profile?.notifications?.taskDue ?? true,
      taskCompleted: profile?.notifications?.taskCompleted ?? true,
      emailNotifications: profile?.notifications?.emailNotifications ?? false,
    },
  });

  const handleSave = async () => {
    setLoading(true);
    try {
      const { updateUserProfile } = await import("../../services/api");
      await updateUserProfile(userId, groupId, settings);
      if (onUpdate) onUpdate();
      showSuccess("р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з");
    } catch (error) {
      console.error("Failed to update profile:", error);
      showError("р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╣Др╕Фр╣Й", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* Profile Info */}
      <Card>
        <CardHeader>
          <CardTitle>р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╣Ир╕зр╕Щр╕Хр╕▒р╕з</CardTitle>
          <CardDescription>р╣Бр╕Бр╣Йр╣Др╕Вр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Вр╕Ыр╕гр╣Др╕Яр╕ер╣Мр╕Вр╕нр╕Зр╕Др╕╕р╕У</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center gap-4">
            <Avatar className="w-20 h-20">
              <AvatarImage src={profile?.pictureUrl} />
              <AvatarFallback>
                {(profile?.displayName || "?").charAt(0)}
              </AvatarFallback>
            </Avatar>
            <div>
              <p className="text-sm text-gray-500">р╕гр╕╣р╕Ыр╣Вр╕Ыр╕гр╣Др╕Яр╕ер╣Мр╕Ир╕▓р╕Б LINE</p>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="displayName">р╕Кр╕╖р╣Ир╕нр╣Бр╕кр╕Фр╕З</Label>
            <Input
              id="displayName"
              value={settings.displayName}
              onChange={(e) =>
                setSettings({ ...settings, displayName: e.target.value })
              }
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="email">р╕нр╕╡р╣Ар╕бр╕е (р╣Др╕бр╣Ир╕Ър╕▒р╕Зр╕Др╕▒р╕Ъ)</Label>
            <Input
              id="email"
              type="email"
              placeholder="your@email.com"
              value={settings.email}
              onChange={(e) =>
                setSettings({ ...settings, email: e.target.value })
              }
            />
            <div className="flex items-center gap-2 text-xs text-gray-500">
              {settings.email ? (
                <>
                  <Badge variant="default" className="bg-green-500">
                    тЬУ р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╣Бр╕ер╣Йр╕з
                  </Badge>
                  <span>р╕кр╕▓р╕бр╕▓р╕гр╕Цр╕гр╕▒р╕Ър╕нр╕╡р╣Ар╕бр╕ер╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╣Др╕Фр╣Й</span>
                </>
              ) : (
                <>
                  <Badge variant="outline">р╕вр╕▒р╕Зр╣Др╕бр╣Ир╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н</Badge>
                  <span>р╕Бр╕гр╕╕р╕Ур╕▓р╣Гр╕кр╣Ир╕нр╕╡р╣Ар╕бр╕ер╕кр╕│р╕лр╕гр╕▒р╕Ър╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ</span>
                </>
              )}
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="timezone">р╣Ар╕Вр╕Хр╣Ар╕зр╕ер╕▓</Label>
            <p className="text-xs text-gray-500">
              р╣Гр╕Кр╣Йр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕кр╕Фр╕Зр╣Ар╕зр╕ер╕▓р╣Гр╕Щр╕Ыр╕Пр╕┤р╕Чр╕┤р╕Щр╣Бр╕ер╕░р╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ
            </p>
            <Select
              value={settings.timezone}
              onValueChange={(value) =>
                setSettings({ ...settings, timezone: value })
              }
            >
              <SelectTrigger id="timezone">
                <SelectValue placeholder="р╣Ар╕ер╕╖р╕нр╕Бр╣Ар╕Вр╕Хр╣Ар╕зр╕ер╕▓" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Asia/Bangkok">
                  ЁЯЗ╣ЁЯЗн р╕Ыр╕гр╕░р╣Ар╕Чр╕ир╣Др╕Чр╕в (UTC+7)
                </SelectItem>
                <SelectItem value="Asia/Ho_Chi_Minh">
                  ЁЯЗ╗ЁЯЗ│ р╣Ар╕зр╕╡р╕вр╕Фр╕Щр╕▓р╕б (UTC+7)
                </SelectItem>
                <SelectItem value="Asia/Jakarta">
                  ЁЯЗоЁЯЗй р╕нр╕┤р╕Щр╣Вр╕Фр╕Щр╕╡р╣Ар╕Лр╕╡р╕в (UTC+7)
                </SelectItem>
                <SelectItem value="Asia/Singapore">
                  ЁЯЗ╕ЁЯЗм р╕кр╕┤р╕Зр╕Др╣Вр╕Ыр╕гр╣М (UTC+8)
                </SelectItem>
                <SelectItem value="Asia/Kuala_Lumpur">
                  ЁЯЗ▓ЁЯЗ╛ р╕бр╕▓р╣Ар╕ер╣Ар╕Лр╕╡р╕в (UTC+8)
                </SelectItem>
                <SelectItem value="Asia/Manila">
                  ЁЯЗ╡ЁЯЗн р╕Яр╕┤р╕ер╕┤р╕Ыр╕Ыр╕┤р╕Щр╕кр╣М (UTC+8)
                </SelectItem>
                <SelectItem value="Asia/Hong_Kong">
                  ЁЯЗнЁЯЗ░ р╕ор╣Ир╕нр╕Зр╕Бр╕З (UTC+8)
                </SelectItem>
                <SelectItem value="Asia/Shanghai">ЁЯЗиЁЯЗ│ р╕Ир╕╡р╕Щ (UTC+8)</SelectItem>
                <SelectItem value="Asia/Taipei">ЁЯЗ╣ЁЯЗ╝ р╣Др╕Хр╣Йр╕лр╕зр╕▒р╕Щ (UTC+8)</SelectItem>
                <SelectItem value="Asia/Tokyo">ЁЯЗпЁЯЗ╡ р╕Нр╕╡р╣Ир╕Ыр╕╕р╣Ир╕Щ (UTC+9)</SelectItem>
                <SelectItem value="Asia/Seoul">ЁЯЗ░ЁЯЗ╖ р╣Ар╕Бр╕▓р╕лр╕ер╕╡р╣Гр╕Хр╣Й (UTC+9)</SelectItem>
                <SelectItem value="Australia/Sydney">
                  ЁЯЗжЁЯЗ║ р╕нр╕нр╕кр╣Ар╕Хр╕гр╣Ар╕ер╕╡р╕в (UTC+10/+11)
                </SelectItem>
                <SelectItem value="Pacific/Auckland">
                  ЁЯЗ│ЁЯЗ┐ р╕Щр╕┤р╕зр╕Лр╕╡р╣Бр╕ер╕Щр╕Фр╣М (UTC+12/+13)
                </SelectItem>
                <SelectItem value="Europe/London">
                  ЁЯЗмЁЯЗз р╕ер╕нр╕Щр╕Фр╕нр╕Щ (UTC+0/+1)
                </SelectItem>
                <SelectItem value="Europe/Paris">
                  ЁЯЗлЁЯЗ╖ р╕Ыр╕▓р╕гр╕╡р╕к (UTC+1/+2)
                </SelectItem>
                <SelectItem value="America/New_York">
                  ЁЯЗ║ЁЯЗ╕ р╕Щр╕┤р╕зр╕вр╕нр╕гр╣Мр╕Б (UTC-5/-4)
                </SelectItem>
                <SelectItem value="America/Los_Angeles">
                  ЁЯЗ║ЁЯЗ╕ р╕ер╕нр╕кр╣Бр╕нр╕Щр╣Ар╕Ир╕ер╕┤р╕к (UTC-8/-7)
                </SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      {/* Notifications */}
      <Card>
        <CardHeader>
          <CardTitle>р╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ</CardTitle>
          <CardDescription>р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Вр╕нр╕Зр╕Др╕╕р╕У</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <Label>ЁЯУЛ р╕Зр╕▓р╕Щр╕Чр╕╡р╣Ир╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕бр╕нр╕Ър╕лр╕бр╕▓р╕в</Label>
              <p className="text-sm text-gray-500">
                р╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Чр╕▒р╕Щр╕Чр╕╡р╣Ар╕бр╕╖р╣Ир╕нр╕бр╕╡р╕Зр╕▓р╕Щр╣Гр╕лр╕бр╣И
              </p>
            </div>
            <Switch
              checked={settings.notifications.taskAssigned}
              onCheckedChange={(checked) =>
                setSettings({
                  ...settings,
                  notifications: {
                    ...settings.notifications,
                    taskAssigned: checked,
                  },
                })
              }
            />
          </div>

          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <Label>тП░ р╕Зр╕▓р╕Щр╣Гр╕Бр╕ер╣Йр╕Др╕гр╕Ър╕Бр╕│р╕лр╕Щр╕Ф</Label>
              <p className="text-sm text-gray-500">р╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕ер╣Ир╕зр╕Зр╕лр╕Щр╣Йр╕▓ 1 р╕зр╕▒р╕Щ</p>
            </div>
            <Switch
              checked={settings.notifications.taskDue}
              onCheckedChange={(checked) =>
                setSettings({
                  ...settings,
                  notifications: {
                    ...settings.notifications,
                    taskDue: checked,
                  },
                })
              }
            />
          </div>

          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <Label>тЬЕ р╕Зр╕▓р╕Щр╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ</Label>
              <p className="text-sm text-gray-500">
                р╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╣Ар╕бр╕╖р╣Ир╕нр╕Зр╕▓р╕Щр╕Чр╕╡р╣Ир╕бр╕нр╕Ър╕лр╕бр╕▓р╕вр╣Ар╕кр╕гр╣Зр╕Ир╣Бр╕ер╣Йр╕з
              </p>
            </div>
            <Switch
              checked={settings.notifications.taskCompleted}
              onCheckedChange={(checked) =>
                setSettings({
                  ...settings,
                  notifications: {
                    ...settings.notifications,
                    taskCompleted: checked,
                  },
                })
              }
            />
          </div>

          <div className="flex items-center justify-between pt-4 border-t">
            <div className="space-y-0.5">
              <Label>ЁЯУз р╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Чр╕▓р╕Зр╕нр╕╡р╣Ар╕бр╕е</Label>
              <p className="text-sm text-gray-500">
                р╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Чр╕▓р╕Зр╕нр╕╡р╣Ар╕бр╕ер╕Юр╕гр╣Йр╕нр╕б LINE
                {!settings.email && (
                  <span className="text-amber-600"> (р╕Хр╣Йр╕нр╕Зр╣Гр╕кр╣Ир╕нр╕╡р╣Ар╕бр╕ер╕Бр╣Ир╕нр╕Щ)</span>
                )}
              </p>
            </div>
            <Switch
              checked={settings.notifications.emailNotifications}
              disabled={!settings.email}
              onCheckedChange={(checked) =>
                setSettings({
                  ...settings,
                  notifications: {
                    ...settings.notifications,
                    emailNotifications: checked,
                  },
                })
              }
            />
          </div>
        </CardContent>
      </Card>

      {/* Save Button */}
      <div className="flex justify-end">
        <Button onClick={handleSave} disabled={loading}>
          <Save className="w-4 h-4 mr-2" />
          {loading ? "р╕Бр╕│р╕ер╕▒р╕Зр╕Ър╕▒р╕Щр╕Чр╕╢р╕Б..." : "р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓"}
        </Button>
      </div>
    </div>
  );
}
