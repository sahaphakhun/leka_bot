// Database Connection ‡πÅ‡∏•‡∏∞ Configuration

import { DataSource } from 'typeorm';
import { Group, User, GroupMember, Task, File, KPIRecord, RecurringTask } from '@/models';

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Railway ‡∏´‡∏£‡∏∑‡∏≠ production environment
const getDatabaseConfig = () => {
  if (process.env.DATABASE_URL) {
    // Railway PostgreSQL URL format
    return {
      url: process.env.DATABASE_URL,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    };
  } else {
    // Local development
    return {
      host: process.env.DB_HOST || 'localhost',
      port: parseInt(process.env.DB_PORT || '5432'),
      username: process.env.DB_USERNAME || 'postgres',
      password: process.env.DB_PASSWORD || '',
      database: process.env.DB_NAME || 'leka_bot',
    };
  }
};

export const AppDataSource = new DataSource({
  type: 'postgres',
  ...getDatabaseConfig(),
  entities: [Group, User, GroupMember, Task, File, KPIRecord, RecurringTask],
  migrations: ['src/migrations/*.ts'],
  subscribers: ['src/subscribers/*.ts'],
  synchronize: process.env.NODE_ENV === 'development', // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ development
  logging: process.env.NODE_ENV === 'development',
  extra: {
    // Configuration for connection pool
    max: 20,
    min: 5,
    idle: 10000,
    acquire: 30000,
  },
});

export const initializeDatabase = async (): Promise<void> => {
  try {
    await AppDataSource.initialize();
    console.log('‚úÖ Database connected successfully');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const queryRunner = AppDataSource.createQueryRunner();
    
    try {
      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á tasks ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å)
      const tablesResult = await queryRunner.query(`
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' AND table_name = 'tasks'
      `);
      
      const hasTasksTable = tablesResult.length > 0;
      
      if (!hasTasksTable) {
        console.log('üîÑ Tables not found, creating database schema...');
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ synchronize
        await AppDataSource.synchronize();
        console.log('‚úÖ Database schema synchronized successfully');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
        const finalTables = await queryRunner.query(`
          SELECT table_name 
          FROM information_schema.tables 
          WHERE table_schema = 'public'
          ORDER BY table_name
        `);
        
        console.log('üìã Created tables:', finalTables.map((t: any) => t.table_name));
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        const expectedTables = ['users', 'groups', 'tasks', 'files', 'kpi_records', 'task_assignees', 'group_members'];
        const createdTableNames = finalTables.map((t: any) => t.table_name);
        const missingTables = expectedTables.filter(table => !createdTableNames.includes(table));
        
        if (missingTables.length > 0) {
          console.error('‚ùå Missing required tables:', missingTables);
          throw new Error(`Failed to create required tables: ${missingTables.join(', ')}`);
        }
        
        console.log('‚úÖ All required tables created successfully');
      } else {
        console.log('‚úÖ Database tables already exist');
        
        // ‡πÉ‡∏ô development ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏£‡∏±‡∏ô migrations
        if (process.env.NODE_ENV === 'development') {
          await AppDataSource.runMigrations();
          console.log('‚úÖ Database migrations completed');
        }
      }
      
    } finally {
      await queryRunner.release();
    }
    
  } catch (error) {
    console.error('‚ùå Database initialization failed:', error);
    throw error;
  }
};

export const closeDatabase = async (): Promise<void> => {
  if (AppDataSource.isInitialized) {
    await AppDataSource.destroy();
    console.log('‚úÖ Database connection closed');
  }
};