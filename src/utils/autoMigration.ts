// Auto-Migration Utility
// ‡∏£‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠ server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ

import { AppDataSource } from './database';
import { logger } from './logger';
import { comprehensiveMigration } from './comprehensiveMigration';

export class AutoMigration {
  private static instance: AutoMigration;
  private isRunning = false;

  private constructor() {}

  public static getInstance(): AutoMigration {
    if (!AutoMigration.instance) {
      AutoMigration.instance = new AutoMigration();
    }
    return AutoMigration.instance;
  }

  /**
   * ‡∏£‡∏±‡∏ô auto-migration ‡πÄ‡∏°‡∏∑‡πà‡∏≠ server ‡πÄ‡∏£‡∏¥‡πà‡∏°
   */
  public async runAutoMigration(): Promise<void> {
    if (this.isRunning) {
      logger.info('üîÑ Auto-migration ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà...');
      return;
    }

    this.isRunning = true;
    
    try {
      logger.info('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Auto-Migration...');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!AppDataSource.isInitialized) {
        logger.info('‚è≥ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô...');
        return;
      }

      // Use comprehensive migration system
      await comprehensiveMigration.runComprehensiveMigration();
      
      logger.info('‚úÖ Auto-Migration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
      
    } catch (error) {
      logger.error('‚ùå Auto-Migration ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
      // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ server ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    } finally {
      this.isRunning = false;
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô migration ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  public async checkMigrationNeeded(): Promise<boolean> {
    try {
      return await comprehensiveMigration.checkMigrationNeeded();
    } catch (error) {
      logger.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö migration:', error);
      return false;
    }
  }

  /**
   * Get migration results for API endpoint
   */
  public getMigrationResults(): Record<string, { success: boolean; message: string; details?: any }> {
    return comprehensiveMigration.getMigrationResults();
  }

  // ... existing code ...

  // Legacy methods for backward compatibility
  // These are kept for any direct calls but delegate to comprehensive migration
  
  /**
   * @deprecated Use comprehensiveMigration instead
   */
  private async migrateMissingColumns(): Promise<void> {
    logger.info('‚ÑπÔ∏è Legacy migrateMissingColumns called - delegating to comprehensive migration');
    // This is now handled by comprehensive migration
  }

  /**
   * @deprecated Use comprehensiveMigration instead
   */
  private async migrateFileAttachmentType(): Promise<void> {
    logger.info('‚ÑπÔ∏è Legacy migrateFileAttachmentType called - delegating to comprehensive migration');
    // This is now handled by comprehensive migration
  }

  /**
   * @deprecated Use comprehensiveMigration instead
   */
  private async initializeWorkflowData(queryRunner: any): Promise<void> {
    logger.info('‚ÑπÔ∏è Legacy initializeWorkflowData called - delegating to comprehensive migration');
    // This is now handled by comprehensive migration
  }
}

export const autoMigration = AutoMigration.getInstance();
