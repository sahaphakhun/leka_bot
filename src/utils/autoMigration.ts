// Auto-Migration Utility
// ‡∏£‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠ server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ

import { AppDataSource } from './database';
import { logger } from './logger';

export class AutoMigration {
  private static instance: AutoMigration;
  private isRunning = false;

  private constructor() {}

  public static getInstance(): AutoMigration {
    if (!AutoMigration.instance) {
      AutoMigration.instance = new AutoMigration();
    }
    return AutoMigration.instance;
  }

  /**
   * ‡∏£‡∏±‡∏ô auto-migration ‡πÄ‡∏°‡∏∑‡πà‡∏≠ server ‡πÄ‡∏£‡∏¥‡πà‡∏°
   */
  public async runAutoMigration(): Promise<void> {
    if (this.isRunning) {
      logger.info('üîÑ Auto-migration ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà...');
      return;
    }

    this.isRunning = true;
    
    try {
      logger.info('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Auto-Migration...');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!AppDataSource.isInitialized) {
        logger.info('‚è≥ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô...');
        return;
      }

      // ‡∏£‡∏±‡∏ô migration
      await this.migrateMissingColumns();
      
      logger.info('‚úÖ Auto-Migration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
      
    } catch (error) {
      logger.error('‚ùå Auto-Migration ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
      // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ server ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    } finally {
      this.isRunning = false;
    }
  }

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á tasks
   */
  private async migrateMissingColumns(): Promise<void> {
    try {
      const queryRunner = AppDataSource.createQueryRunner();
      
      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á tasks
        const existingColumns = await queryRunner.query(`
          SELECT column_name, data_type, is_nullable
          FROM information_schema.columns 
          WHERE table_name = 'tasks' 
          AND table_schema = 'public'
          ORDER BY ordinal_position
        `);
        
        const columnNames = existingColumns.map((col: any) => col.column_name);
        logger.info(`üìã ‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á tasks: ${columnNames.length} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå`);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
        const missingColumns = [
          {
            name: 'submittedAt',
            type: 'TIMESTAMP',
            nullable: true,
            comment: '‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô'
          },
          {
            name: 'reviewedAt',
            type: 'TIMESTAMP',
            nullable: true,
            comment: '‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'
          },
          {
            name: 'approvedAt',
            type: 'TIMESTAMP',
            nullable: true,
            comment: '‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'
          },
          {
            name: 'requireAttachment',
            type: 'BOOLEAN',
            nullable: false,
            defaultValue: 'false',
            comment: '‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô'
          },
          {
            name: 'workflow',
            type: 'JSONB',
            nullable: false,
            defaultValue: '{}',
            comment: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡πÇ‡∏ü‡∏•‡∏ß‡πå‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô/‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏≤‡∏ô/‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'
          }
        ];
        
        let addedCount = 0;
        
        for (const column of missingColumns) {
          if (!columnNames.includes(column.name)) {
            try {
              let sql = `ALTER TABLE tasks ADD COLUMN "${column.name}" ${column.type}`;
              
              if (column.nullable === false) {
                sql += ' NOT NULL';
              }
              
              if (column.defaultValue) {
                sql += ` DEFAULT ${column.defaultValue}`;
              }
              
              await queryRunner.query(sql);
              
              // ‡πÄ‡∏û‡∏¥‡πà‡∏° comment
              await queryRunner.query(`
                COMMENT ON COLUMN tasks."${column.name}" IS '${column.comment}'
              `);
              
              logger.info(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ${column.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
              addedCount++;
              
            } catch (error) {
              logger.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ${column.name}:`, error);
              // ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÅ‡∏°‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
            }
          } else {
            logger.info(`‚ÑπÔ∏è ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ${column.name} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
          }
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå workflow ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        if (columnNames.includes('workflow') || addedCount > 0) {
          await this.initializeWorkflowData(queryRunner);
        }
        
        if (addedCount > 0) {
          logger.info(`üéâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß ${addedCount} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå`);
        } else {
          logger.info('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°');
        }
        
      } finally {
        await queryRunner.release();
      }
      
    } catch (error) {
      logger.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ migration:', error);
      throw error;
    }
  }

  /**
   * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• workflow ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
   */
  private async initializeWorkflowData(queryRunner: any): Promise<void> {
    try {
      logger.info('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• workflow ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà...');
      
      const tasks = await queryRunner.query('SELECT id, "createdBy", "createdAt", status FROM tasks');
      logger.info(`üìã ‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${tasks.length} ‡∏á‡∏≤‡∏ô`);
      
      let updatedCount = 0;
      
      for (const task of tasks) {
        try {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ workflow ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          const existingWorkflow = await queryRunner.query(`
            SELECT workflow FROM tasks WHERE id = $1
          `, [task.id]);
          
          if (!existingWorkflow[0]?.workflow || existingWorkflow[0].workflow === '{}') {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á workflow ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            const workflow = {
              review: {
                reviewerUserId: task.createdBy,
                status: 'not_requested'
              },
              approval: {
                creatorUserId: task.createdBy,
                status: 'not_requested'
              },
              history: [
                {
                  action: 'create',
                  byUserId: task.createdBy,
                  at: task.createdAt,
                  note: '‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á'
                }
              ]
            };
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            if (task.status === 'completed') {
              workflow.review.status = 'approved';
              workflow.approval.status = 'approved';
            }
            
            await queryRunner.query(`
              UPDATE tasks 
              SET workflow = $1::jsonb 
              WHERE id = $2
            `, [JSON.stringify(workflow), task.id]);
            
            updatedCount++;
          }
          
        } catch (error) {
          logger.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï workflow ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô ${task.id}:`, error);
        }
      }
      
      if (updatedCount > 0) {
        logger.info(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï workflow ‡πÅ‡∏•‡πâ‡∏ß ${updatedCount} ‡∏á‡∏≤‡∏ô`);
      } else {
        logger.info('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï workflow');
      }
      
    } catch (error) {
      logger.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô workflow:', error);
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô migration ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  public async checkMigrationNeeded(): Promise<boolean> {
    try {
      if (!AppDataSource.isInitialized) {
        return false;
      }

      const queryRunner = AppDataSource.createQueryRunner();
      
      try {
        const existingColumns = await queryRunner.query(`
          SELECT column_name
          FROM information_schema.columns 
          WHERE table_name = 'tasks' 
          AND table_schema = 'public'
        `);
        
        const columnNames = existingColumns.map((col: any) => col.column_name);
        const requiredColumns = ['submittedAt', 'reviewedAt', 'approvedAt', 'requireAttachment', 'workflow'];
        
        return requiredColumns.some(col => !columnNames.includes(col));
        
      } finally {
        await queryRunner.release();
      }
      
    } catch (error) {
      logger.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö migration:', error);
      return false;
    }
  }
}

export const autoMigration = AutoMigration.getInstance();
