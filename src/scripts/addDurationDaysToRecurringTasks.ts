// Migration Script: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå durationDays ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á recurring_tasks
// ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: npm run migrate:add-duration-days

import { AppDataSource } from '@/utils/database';
import { logger } from '@/utils/logger';

async function addDurationDaysToRecurringTasks() {
  try {
    logger.info('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô migration: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå durationDays ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á recurring_tasks...');
    
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await AppDataSource.initialize();
    logger.info('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
    const queryRunner = AppDataSource.createQueryRunner();
    
    try {
      // ‡πÄ‡∏£‡∏¥‡πà‡∏° transaction
      await queryRunner.startTransaction();
      logger.info('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° transaction...');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á recurring_tasks ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const tableExists = await queryRunner.query(`
        SELECT EXISTS (
          SELECT 1 FROM information_schema.tables 
          WHERE table_schema = 'public' AND table_name = 'recurring_tasks'
        )
      `);
      
      if (!tableExists[0].exists) {
        logger.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á recurring_tasks ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á...');
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á recurring_tasks
        await queryRunner.query(`
          CREATE TABLE recurring_tasks (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            "lineGroupId" VARCHAR NOT NULL,
            title VARCHAR NOT NULL,
            description TEXT,
            "assigneeLineUserIds" TEXT[] DEFAULT '{}',
            "reviewerLineUserId" VARCHAR,
            "requireAttachment" BOOLEAN DEFAULT true,
            priority VARCHAR(10) DEFAULT 'medium',
            tags TEXT[] DEFAULT '{}',
            recurrence VARCHAR(20) NOT NULL,
            "weekDay" SMALLINT,
            "dayOfMonth" SMALLINT,
            "timeOfDay" VARCHAR(5) DEFAULT '09:00',
            timezone VARCHAR(50) DEFAULT 'Asia/Bangkok',
            "durationDays" INTEGER DEFAULT 7,
            "totalInstances" INTEGER DEFAULT 0,
            "lastRunAt" TIMESTAMP,
            "nextRunAt" TIMESTAMP NOT NULL,
            active BOOLEAN DEFAULT true,
            "createdByLineUserId" VARCHAR NOT NULL,
            "createdAt" TIMESTAMP NOT NULL DEFAULT NOW(),
            "updatedAt" TIMESTAMP NOT NULL DEFAULT NOW()
          )
        `);
        
        logger.info('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á recurring_tasks ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } else {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå durationDays ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const existingColumns = await queryRunner.query(`
          SELECT column_name, data_type, is_nullable, column_default
          FROM information_schema.columns 
          WHERE table_name = 'recurring_tasks' 
          AND table_schema = 'public'
          ORDER BY ordinal_position
        `);
        
        logger.info('üìã ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á recurring_tasks:');
        existingColumns.forEach((col: any) => {
          logger.info(`   - ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable})${col.column_default ? ` DEFAULT ${col.column_default}` : ''}`);
        });
        
        const hasDurationDays = existingColumns.some((col: any) => col.column_name === 'durationDays');
        
        if (!hasDurationDays) {
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå durationDays
          await queryRunner.query(`
            ALTER TABLE recurring_tasks 
            ADD COLUMN "durationDays" INTEGER DEFAULT 7 NOT NULL
          `);
          
          logger.info('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå durationDays ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
          
          // ‡πÄ‡∏û‡∏¥‡πà‡∏° comment
          await queryRunner.query(`
            COMMENT ON COLUMN recurring_tasks."durationDays" IS '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô'
          `);
        } else {
          logger.info('‚ÑπÔ∏è ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå durationDays ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
        }
      }
      
      // Commit transaction
      await queryRunner.commitTransaction();
      logger.info('‚úÖ Commit transaction ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      
      logger.info('üéâ Migration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå durationDays ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á recurring_tasks');
      
    } catch (error) {
      // Rollback ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      await queryRunner.rollbackTransaction();
      logger.error('‚ùå Rollback transaction ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
      throw error;
      
    } finally {
      // ‡∏õ‡∏¥‡∏î query runner
      await queryRunner.release();
    }
    
  } catch (error) {
    logger.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ migration:', error);
    throw error;
    
  } finally {
    // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (AppDataSource.isInitialized) {
      await AppDataSource.destroy();
      logger.info('üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    }
  }
}

// ‡∏£‡∏±‡∏ô migration ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
  addDurationDaysToRecurringTasks()
    .then(() => {
      logger.info('üéâ Migration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
      process.exit(0);
    })
    .catch((error) => {
      logger.error('‚ùå Migration ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
      process.exit(1);
    });
}

export { addDurationDaysToRecurringTasks };