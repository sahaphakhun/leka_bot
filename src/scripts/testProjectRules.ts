// Test Project Rules & Memory System
// ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Rules ‡πÅ‡∏•‡∏∞ Memory

import 'module-alias/register';
import { ProjectRules } from '@/services/ProjectRules';
import { ProjectChecklistService } from '@/services/ProjectChecklistService';
import { ProjectMemoryService } from '@/services/ProjectMemoryService';
import { ProjectWorkflowService } from '@/services/ProjectWorkflowService';
import { logger } from '@/utils/logger';

async function testProjectRulesSystem() {
  console.log('üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Rules ‡πÅ‡∏•‡∏∞ Memory...\n');

  try {
    // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ProjectRules
    console.log('üìã 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ProjectRules...');
    const projectRules = ProjectRules.getInstance();
    
    const rules = projectRules.getAllRules();
    console.log(`   ‚úÖ ‡∏û‡∏ö rules ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${rules.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    const memories = projectRules.getAllMemories();
    console.log(`   ‚úÖ ‡∏û‡∏ö memories ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${memories.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    const checklists = projectRules.getAllChecklists();
    console.log(`   ‚úÖ ‡∏û‡∏ö checklists ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${checklists.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

    // ‡πÅ‡∏™‡∏î‡∏á rules ‡∏ï‡∏≤‡∏° category
    const workflowRules = projectRules.getRulesByCategory('workflow');
    console.log(`   üìã Workflow Rules: ${workflowRules.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    workflowRules.forEach(rule => {
      console.log(`      - ${rule.id}: ${rule.title} (${rule.priority})`);
    });

    // ‡πÅ‡∏™‡∏î‡∏á memories ‡∏ï‡∏≤‡∏° type
    const lessons = projectRules.getMemoriesByType('lesson');
    console.log(`   üß† Lessons Learned: ${lessons.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    lessons.forEach(memory => {
      console.log(`      - ${memory.id}: ${memory.title}`);
    });

    console.log('');

    // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ProjectChecklistService
    console.log('üìã 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ProjectChecklistService...');
    const checklistService = new ProjectChecklistService();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å
    console.log('   üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å...');
    const projectStatus = await checklistService.checkProjectStatus();
    console.log(`   ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å: ${projectStatus.isHealthy ? '‡∏õ‡∏Å‡∏ï‡∏¥' : '‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤'}`);
    console.log(`   üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: ${projectStatus.overallScore}/100`);
    console.log(`   üóÑÔ∏è ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${projectStatus.database.isConnected ? '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠' : '‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'}`);
    console.log(`   ü§ñ LINE Bot: ${projectStatus.lineBot.isConnected ? '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠' : '‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'}`);

    // ‡∏£‡∏±‡∏ö checklist ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
    const activeChecklists = checklistService.getActiveChecklists();
    console.log(`   üìã Active Checklists: ${activeChecklists.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    activeChecklists.forEach(checklist => {
      console.log(`      - ${checklist.id}: ${checklist.name}`);
    });

    console.log('');

    // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ProjectMemoryService
    console.log('üß† 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ProjectMemoryService...');
    const memoryService = new ProjectMemoryService();
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ memories
    console.log('   üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ memories...');
    const searchResult = memoryService.searchMemories('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
    console.log(`   ‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: ${searchResult.totalResults} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`      - Rules: ${searchResult.rules.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`      - Memories: ${searchResult.memories.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

    // ‡∏£‡∏±‡∏ö rule recommendations
    console.log('   üí° ‡∏£‡∏±‡∏ö rule recommendations...');
    const recommendations = memoryService.getRuleRecommendations('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô');
    console.log(`   ‚úÖ Recommendations: ${recommendations.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    recommendations.forEach(rec => {
      console.log(`      - ${rec.ruleId}: ${rec.ruleTitle} (${rec.priority})`);
      console.log(`        ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${rec.reason}`);
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á project insights
    console.log('   üí° ‡∏™‡∏£‡πâ‡∏≤‡∏á project insights...');
    const insights = memoryService.generateProjectInsights();
    console.log(`   ‚úÖ Insights: ${insights.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    insights.forEach(insight => {
      console.log(`      - ${insight.type.toUpperCase()}: ${insight.title}`);
      console.log(`        ${insight.message}`);
    });

    console.log('');

    // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ProjectWorkflowService
    console.log('üîÑ 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ProjectWorkflowService...');
    const workflowService = new ProjectWorkflowService();
    
    // ‡∏£‡∏±‡∏ö workflow templates
    const templates = workflowService.getActiveTemplates();
    console.log(`   üìã Workflow Templates: ${templates.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    templates.forEach(template => {
      console.log(`      - ${template.id}: ${template.name} (${template.category})`);
      console.log(`        Steps: ${template.steps.length} ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô`);
    });

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô workflow ‡πÉ‡∏´‡∏°‡πà
    console.log('   üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô workflow ‡πÉ‡∏´‡∏°‡πà...');
    const workflow = await workflowService.startWorkflow('WF-PROJECT-START', 'test-user-001', 'test-group-001');
    console.log(`   ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô workflow: ${workflow.workflowName} (${workflow.id})`);
    console.log(`   üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${workflow.status}, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: ${workflow.progress}%`);

    // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ workflow steps
    console.log('   ‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ workflow steps...');
    for (const step of workflow.steps) {
      if (step.dependencies.length === 0 || step.dependencies.every(depId => 
        workflow.steps.find(s => s.id === depId)?.isCompleted
      )) {
        await workflowService.executeWorkflowStep(workflow.id, step.id, 'test-user-001', '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö');
        console.log(`      ‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${step.name}`);
        break; // ‡∏ó‡∏≥‡πÅ‡∏Ñ‡πà step ‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      }
    }

    // ‡∏£‡∏±‡∏ö workflow ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
    const updatedWorkflow = workflowService.getWorkflow(workflow.id);
    if (updatedWorkflow) {
      console.log(`   üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: ${updatedWorkflow.status}, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: ${updatedWorkflow.progress}%`);
    }

    console.log('');

    // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    console.log('üìä 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô...');
    
    // ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ memory
    const memoryReport = memoryService.generateSummaryReport();
    console.log(`   üß† Memory Report:`);
    console.log(`      - Total Rules: ${memoryReport.summary.totalRules}`);
    console.log(`      - Total Memories: ${memoryReport.summary.totalMemories}`);
    console.log(`      - Consistency: ${memoryReport.consistency.isValid ? '‡∏ú‡πà‡∏≤‡∏ô' : '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô'}`);

    // ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ workflow
    const workflowReport = workflowService.generateWorkflowReport();
    console.log(`   üîÑ Workflow Report:`);
    console.log(`      - Total Workflows: ${workflowReport.summary.totalWorkflows}`);
    console.log(`      - Total Templates: ${workflowReport.summary.totalTemplates}`);

    console.log('');

    // 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° rules ‡πÅ‡∏•‡∏∞ memories ‡πÉ‡∏´‡∏°‡πà
    console.log('‚ûï 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° rules ‡πÅ‡∏•‡∏∞ memories ‡πÉ‡∏´‡∏°‡πà...');
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° rule ‡πÉ‡∏´‡∏°‡πà
    const newRule = memoryService.addRule({
      category: 'quality',
      title: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á',
      description: '‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏î ‡πÜ ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
      priority: 'high',
      isActive: true
    });
    console.log(`   ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° rule ‡πÉ‡∏´‡∏°‡πà: ${newRule.title} (${newRule.id})`);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° memory ‡πÉ‡∏´‡∏°‡πà
    const newMemory = memoryService.addMemory({
      type: 'lesson',
      title: '‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤',
      content: '‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô production',
      tags: ['testing', 'quality', 'best-practice'],
      relatedRules: [newRule.id]
    });
    console.log(`   ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° memory ‡πÉ‡∏´‡∏°‡πà: ${newMemory.title} (${newMemory.id})`);

    console.log('');

    // 7. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    console.log('üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
    console.log('   ‚úÖ ProjectRules: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥');
    console.log('   ‚úÖ ProjectChecklistService: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥');
    console.log('   ‚úÖ ProjectMemoryService: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥');
    console.log('   ‚úÖ ProjectWorkflowService: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥');
    console.log('   ‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° rules ‡πÅ‡∏•‡∏∞ memories: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥');
    console.log('   ‚úÖ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥');
    
    console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - ‡∏£‡∏∞‡∏ö‡∏ö Rules ‡πÅ‡∏•‡∏∞ Memory ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥!');

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error);
    logger.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error);
  }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
if (require.main === module) {
  testProjectRulesSystem()
    .then(() => {
      console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
      process.exit(1);
    });
}

export { testProjectRulesSystem };
