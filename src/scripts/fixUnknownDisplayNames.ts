import 'reflect-metadata';
import { AppDataSource } from '@/utils/database';
import { User } from '@/models';
import { In, IsNull, Not } from 'typeorm';

async function fixUnknownDisplayNames() {
	console.log('üõ†Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö" ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
	try {
		await AppDataSource.initialize();
		console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

		const userRepo = AppDataSource.getRepository(User);

		// ‡∏´‡∏≤ users ‡∏ó‡∏µ‡πà displayName ‡πÄ‡∏õ‡πá‡∏ô '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö', '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠', ‡∏ß‡πà‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠ null
		const candidates = await userRepo.find({
			where: [
				{ displayName: In(['‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö', '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠', '']) },
				{ displayName: IsNull() as any }
			]
		});

		if (candidates.length === 0) {
			console.log('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
			return;
		}

		console.log(`üìä ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ${candidates.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

		let updatedCount = 0;
		for (const user of candidates) {
			const prefix = (user.lineUserId || user.id || '').toString().slice(0, 8) || '00000000';
			user.displayName = `User ${prefix}`;
			await userRepo.save(user);
			updatedCount += 1;
		}

		console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${updatedCount}/${candidates.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
	} catch (error) {
		console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', error);
		process.exitCode = 1;
	} finally {
		if (AppDataSource.isInitialized) {
			await AppDataSource.destroy();
			console.log('üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß');
		}
	}
}

// Run if called directly
if (require.main === module) {
	fixUnknownDisplayNames();
}

export { fixUnknownDisplayNames };
