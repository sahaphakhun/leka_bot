import 'reflect-metadata';
import { AppDataSource } from '@/utils/database';
import { logger } from '@/utils/logger';

export async function checkDatabaseConnection(): Promise<void> {
  try {
    console.log('üîç Checking database connection...');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment variables
    console.log('üìã Environment Variables:');
    console.log('- DATABASE_URL:', process.env.DATABASE_URL ? 'SET' : 'NOT_SET');
    console.log('- DB_HOST:', process.env.DB_HOST);
    console.log('- DB_PORT:', process.env.DB_PORT);
    console.log('- DB_USERNAME:', process.env.DB_USERNAME);
    console.log('- DB_NAME:', process.env.DB_NAME);
    console.log('- DB_PASSWORD:', process.env.DB_PASSWORD ? 'SET' : 'NOT_SET');
    console.log('');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö DataSource options
    console.log('‚öôÔ∏è DataSource Options:');
    console.log('- Type:', AppDataSource.options.type);
    console.log('- Host:', (AppDataSource.options as any).host);
    console.log('- Port:', (AppDataSource.options as any).port);
    console.log('- Database:', (AppDataSource.options as any).database);
    console.log('- Username:', (AppDataSource.options as any).username);
    console.log('- Has Password:', !!(AppDataSource.options as any).password);
    console.log('');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    console.log('üîå Connection Status:');
    console.log('- Is Initialized:', AppDataSource.isInitialized);
    console.log('- Is Connected:', AppDataSource.isInitialized ? 'Checking...' : 'Not initialized');
    console.log('');

    // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° initialize ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
    if (!AppDataSource.isInitialized) {
      console.log('üîÑ Initializing database connection...');
      await AppDataSource.initialize();
      console.log('‚úÖ Database initialized successfully');
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    console.log('üß™ Testing database connection...');
    const queryRunner = AppDataSource.createQueryRunner();
    await queryRunner.connect();
    
    const result = await queryRunner.query('SELECT NOW() as current_time, version() as postgres_version');
    console.log('‚úÖ Database connection test successful:');
    console.log('- Current Time:', result[0].current_time);
    console.log('- PostgreSQL Version:', result[0].postgres_version);
    
    await queryRunner.release();
    
    console.log('üéâ Database connection is working properly!');

  } catch (error) {
    console.error('‚ùå Database connection error:', error);
    
    if (error instanceof Error) {
      console.error('Error details:', {
        message: error.message,
        stack: error.stack
      });
    }
    
    // ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    console.log('\nüîß Troubleshooting tips:');
    console.log('1. Check if DATABASE_URL is correct');
    console.log('2. Verify database credentials');
    console.log('3. Check if database server is running');
    console.log('4. Verify network connectivity');
    console.log('5. Check Railway database status');
    
    throw error;
  }
}

// ‡∏£‡∏±‡∏ô script ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
  checkDatabaseConnection()
    .then(() => {
      console.log('‚úÖ Database check completed');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Database check failed:', error);
      process.exit(1);
    });
}
