// Migration Script: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Admin
// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ role ‡πÄ‡∏õ‡πá‡∏ô 'member' ‡∏≠‡∏¢‡∏π‡πà

import 'reflect-metadata';
import { AppDataSource } from '@/utils/database';
import { GroupMember } from '@/models';
import { config } from '@/utils/config';

async function updateAllMembersToAdmin() {
  console.log('üîÑ [MIGRATE] Starting member role migration...');
  console.log('üìä [MIGRATE] Environment:', config.nodeEnv);
  
  try {
    // Connect to database
    await AppDataSource.initialize();
    console.log('‚úÖ [MIGRATE] Database connected successfully');
    
    const groupMemberRepository = AppDataSource.getRepository(GroupMember);
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô 'member'
    const membersToUpdate = await groupMemberRepository.find({
      where: { role: 'member' },
      relations: ['user', 'group']
    });
    
    console.log(`üìã [MIGRATE] Found ${membersToUpdate.length} members with 'member' role`);
    
    if (membersToUpdate.length === 0) {
      console.log('‚úÖ [MIGRATE] No members to update - all members are already admin');
      await AppDataSource.destroy();
      return;
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    console.log('üë• [MIGRATE] Members to be updated:');
    membersToUpdate.forEach((member, index) => {
      console.log(`  ${index + 1}. ${member.user?.displayName || 'Unknown'} in group ${member.group?.name || member.groupId}`);
    });
    
    console.log('');
    console.log('üîÑ [MIGRATE] Updating members to admin role...');
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏ô
    let updated = 0;
    for (const member of membersToUpdate) {
      try {
        member.role = 'admin';
        await groupMemberRepository.save(member);
        updated++;
        console.log(`  ‚úÖ Updated: ${member.user?.displayName || 'Unknown'} (${updated}/${membersToUpdate.length})`);
      } catch (error) {
        console.error(`  ‚ùå Failed to update member ${member.id}:`, error);
      }
    }
    
    console.log('');
    console.log(`üéâ [MIGRATE] Migration completed successfully!`);
    console.log(`üìä [MIGRATE] Summary:`);
    console.log(`   - Total found: ${membersToUpdate.length}`);
    console.log(`   - Successfully updated: ${updated}`);
    console.log(`   - Failed: ${membersToUpdate.length - updated}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    const remainingMembers = await groupMemberRepository.count({
      where: { role: 'member' }
    });
    
    const totalAdmins = await groupMemberRepository.count({
      where: { role: 'admin' }
    });
    
    console.log(`üìà [MIGRATE] Current status:`);
    console.log(`   - Admin members: ${totalAdmins}`);
    console.log(`   - Regular members: ${remainingMembers}`);
    
    if (remainingMembers === 0) {
      console.log('üéØ [MIGRATE] Perfect! All members are now admins');
    } else {
      console.log(`‚ö†Ô∏è  [MIGRATE] ${remainingMembers} members still have 'member' role`);
    }
    
  } catch (error) {
    console.error('‚ùå [MIGRATE] Migration failed:', error);
    
    if (error instanceof Error) {
      console.error('üîç [MIGRATE] Error details:', {
        name: error.name,
        message: error.message,
        stack: config.nodeEnv === 'development' ? error.stack : undefined
      });
    }
    
    process.exit(1);
  } finally {
    if (AppDataSource.isInitialized) {
      await AppDataSource.destroy();
      console.log('üîå [MIGRATE] Database connection closed');
    }
  }
}

// Run if called directly
if (require.main === module) {
  updateAllMembersToAdmin();
}

export { updateAllMembersToAdmin };