import { AppDataSource } from '../utils/database';
import { logger } from '../utils/logger';

/**
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç foreign key constraint ‡∏Ç‡∏≠‡∏á kpi_records ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö CASCADE DELETE
 * ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô foreign key constraint violation ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö task
 */
export async function fixKpiRecordsForeignKey(): Promise<void> {
  try {
    logger.info('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç foreign key constraint ‡∏Ç‡∏≠‡∏á kpi_records...');
    
    const queryRunner = AppDataSource.createQueryRunner();
    await queryRunner.connect();
    await queryRunner.startTransaction();

    try {
      // 1. ‡∏•‡∏ö foreign key constraint ‡πÄ‡∏î‡∏¥‡∏°
      logger.info('üóëÔ∏è ‡∏•‡∏ö foreign key constraint ‡πÄ‡∏î‡∏¥‡∏°...');
      await queryRunner.query(`
        ALTER TABLE kpi_records 
        DROP CONSTRAINT IF EXISTS "FK_6b25efaa5b668fd4be03ef8e319"
      `);

      // 2. ‡πÄ‡∏û‡∏¥‡πà‡∏° foreign key constraint ‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° CASCADE DELETE
      logger.info('‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° foreign key constraint ‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° CASCADE DELETE...');
      await queryRunner.query(`
        ALTER TABLE kpi_records 
        ADD CONSTRAINT "FK_kpi_records_task_cascade" 
        FOREIGN KEY ("taskId") 
        REFERENCES tasks(id) 
        ON DELETE CASCADE
      `);

      // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á constraint ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      const constraints = await queryRunner.query(`
        SELECT 
          tc.constraint_name,
          tc.table_name,
          kcu.column_name,
          ccu.table_name AS foreign_table_name,
          ccu.column_name AS foreign_column_name,
          rc.delete_rule
        FROM information_schema.table_constraints AS tc
        JOIN information_schema.key_column_usage AS kcu
          ON tc.constraint_name = kcu.constraint_name
        JOIN information_schema.constraint_column_usage AS ccu
          ON ccu.constraint_name = tc.constraint_name
        JOIN information_schema.referential_constraints AS rc
          ON rc.constraint_name = tc.constraint_name
        WHERE tc.table_name = 'kpi_records' 
          AND tc.constraint_type = 'FOREIGN KEY'
          AND kcu.column_name = 'taskId'
      `);

      logger.info('üìã Foreign key constraints ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:');
      constraints.forEach((constraint: any) => {
        logger.info(`  - ${constraint.constraint_name}: ${constraint.table_name}.${constraint.column_name} -> ${constraint.foreign_table_name}.${constraint.foreign_column_name} (DELETE: ${constraint.delete_rule})`);
      });

      await queryRunner.commitTransaction();
      logger.info('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç foreign key constraint ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');

    } catch (error) {
      await queryRunner.rollbackTransaction();
      throw error;
    } finally {
      await queryRunner.release();
    }

  } catch (error) {
    logger.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç foreign key constraint:', error);
    throw error;
  }
}

// ‡∏£‡∏±‡∏ô script ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
  fixKpiRecordsForeignKey()
    .then(() => {
      logger.info('üéâ Migration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
      process.exit(0);
    })
    .catch((error) => {
      logger.error('üí• Migration ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
      process.exit(1);
    });
}
