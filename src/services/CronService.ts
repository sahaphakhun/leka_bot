// Cron Service - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤

import cron from 'node-cron';
import moment from 'moment-timezone';
import { config } from '@/utils/config';
import { TaskService } from './TaskService';
import { NotificationService } from './NotificationService';
import { KPIService } from './KPIService';
import { AppDataSource } from '@/utils/database';
import { RecurringTask } from '@/models';

export class CronService {
  private taskService: TaskService;
  private notificationService: NotificationService;
  private kpiService: KPIService;
  private jobs: Map<string, cron.ScheduledTask> = new Map();

  constructor() {
    this.taskService = new TaskService();
    this.notificationService = new NotificationService();
    this.kpiService = new KPIService();
  }

  public start(): void {
    console.log('üïê Starting cron jobs...');

    // ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î 1 ‡∏ß‡∏±‡∏ô: ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡πà‡∏ß‡∏á 1 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    const reminderOneDayJob = cron.schedule('0 * * * *', async () => {
      await this.processReminders(['P1D']);
    }, {
      scheduled: false,
      timezone: config.app.defaultTimezone
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    const overdueJob = cron.schedule('0 * * * *', async () => {
      await this.processOverdueTasks();
    }, {
      scheduled: false,
      timezone: config.app.defaultTimezone
    });

    // ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (‡∏®‡∏∏‡∏Å‡∏£‡πå 09:00)
    const weeklyReportJob = cron.schedule('0 9 * * 5', async () => {
      await this.sendWeeklyReports();
    }, {
      scheduled: false,
      timezone: config.app.defaultTimezone
    });

    // ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô 08:00 ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
    const dailySummaryJob = cron.schedule('0 8 * * *', async () => {
      await this.sendDailyIncompleteTaskSummaries();
    }, {
      scheduled: false,
      timezone: config.app.defaultTimezone
    });

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï KPI ‡πÅ‡∏•‡∏∞ Leaderboard ‡∏ó‡∏∏‡∏Å‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô
    const kpiUpdateJob = cron.schedule('0 0 * * *', async () => {
      await this.updateKPIRecords();
    }, {
      scheduled: false,
      timezone: config.app.defaultTimezone
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì nextRunAt)
    const recurringJob = cron.schedule('* * * * *', async () => {
      await this.processRecurringTasks();
    }, {
      scheduled: false,
      timezone: config.app.defaultTimezone
    });

    // ‡πÄ‡∏Å‡πá‡∏ö jobs ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö shutdown
    this.jobs.set('reminderOneDay', reminderOneDayJob);
    this.jobs.set('overdue', overdueJob);
    this.jobs.set('weeklyReport', weeklyReportJob);
    this.jobs.set('dailySummary', dailySummaryJob);
    this.jobs.set('kpiUpdate', kpiUpdateJob);
    this.jobs.set('recurring', recurringJob);

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    this.jobs.forEach((job, name) => {
      job.start();
      console.log(`‚úÖ Started cron job: ${name}`);
    });
  }

  public stop(): void {
    console.log('üõë Stopping cron jobs...');
    
    this.jobs.forEach((job, name) => {
      job.stop();
      console.log(`‚úÖ Stopped cron job: ${name}`);
    });
    
    this.jobs.clear();
  }

  /**
   * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô
   */
  private async processReminders(onlyIntervals?: string[]): Promise<void> {
    try {
      console.log('üîî Processing task reminders...');
      
      const now = moment().tz(config.app.defaultTimezone);
      const upcomingTasks = await this.taskService.getTasksForReminder();

      for (const task of upcomingTasks) {
        const dueTime = moment(task.dueTime).tz(config.app.defaultTimezone);
        const timeDiff = dueTime.diff(now);

        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        const reminderIntervals = onlyIntervals && onlyIntervals.length > 0
          ? onlyIntervals
          : ((task.customReminders && task.customReminders.length > 0)
              ? task.customReminders
              : config.app.defaultReminders);

        // ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 1 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
        for (const interval of reminderIntervals || []) {
          const reminderTime = this.parseReminderInterval(interval);
          const shouldSendAt = dueTime.clone().subtract(reminderTime.amount, reminderTime.unit);
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á (‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ñ‡πâ‡∏≤‡∏£‡∏±‡∏ô hourly)
          if (now.isAfter(shouldSendAt) && now.isBefore(shouldSendAt.clone().add(60, 'minutes'))) {
            const alreadySent = task.remindersSent.some(
              reminder => reminder.type === interval && 
              moment(reminder.sentAt).isSame(now, 'hour')
            );

            if (!alreadySent) {
              await this.sendTaskReminder(task, interval);
            }
          }
        }

        // ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å‡πÄ‡∏ä‡πâ‡∏≤ 08:00 ‡∏ô. ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à: ‡πÅ‡∏¢‡∏Å‡πÑ‡∏õ‡∏£‡∏ß‡∏°‡∏£‡∏≠‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏•‡∏π‡∏õ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î O(n^2) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
      }

      // ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å‡πÄ‡∏ä‡πâ‡∏≤ 08:00 ‡∏ô. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const eightAmToday = now.clone().hour(8).minute(0).second(0).millisecond(0);
      const isMorningWindow = now.isBetween(eightAmToday, eightAmToday.clone().add(60, 'minutes'));
      if (isMorningWindow) {
        const morningTasks = await this.taskService.getTasksForDailyMorningReminder();
        for (const t of morningTasks) {
          const alreadySentMorning = (t as any).remindersSent?.some(
            (reminder: any) => reminder.type === 'daily_8am' && moment(reminder.sentAt).isSame(now, 'day')
          );
          if (!alreadySentMorning) {
            await this.sendTaskReminder(t, 'daily_8am');
          }
        }
      }

    } catch (error) {
      console.error('‚ùå Error processing reminders:', error);
    }
  }

  /**
   * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î
   */
  private async processOverdueTasks(): Promise<void> {
    try {
      console.log('‚è∞ Processing overdue tasks...');
      
      const overdueTasks = await this.taskService.getOverdueTasks();
      
      for (const task of overdueTasks) {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô overdue
        await this.taskService.updateTaskStatus(task.id, 'overdue');
        
        // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        await this.notificationService.sendOverdueNotification(task);
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å KPI (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏•‡∏ö)
        await this.kpiService.recordTaskCompletion(task, 'late');
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏ß‡∏±‡∏ô
      const lateReviews = await this.taskService.getTasksLateForReview();
      for (const t of lateReviews) {
        await this.taskService.markLateReview(t.id);
      }

    } catch (error) {
      console.error('‚ùå Error processing overdue tasks:', error);
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
   */
  private async sendWeeklyReports(): Promise<void> {
    try {
      console.log('üìä Sending weekly reports...');
      
      const groups = await this.taskService.getAllActiveGroups();
      
      for (const group of groups) {
        if (!group.settings.enableLeaderboard) continue;
        const weeklyStats = await this.kpiService.getWeeklyStats(group.id);
        const leaderboard = await this.kpiService.getGroupLeaderboard(group.id, 'weekly');
        await this.notificationService.sendWeeklyReport(group, weeklyStats, leaderboard);
        // ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡∏° (admin) ‡∏ó‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏î‡πâ‡∏ß‡∏¢
        try {
          await (this.notificationService as any).sendWeeklyReportToAdmins(group as any, weeklyStats, leaderboard);
        } catch (err) {
          console.warn('‚ö†Ô∏è Failed to send weekly report to admins:', group.id, err);
        }
      }

    } catch (error) {
      console.error('‚ùå Error sending weekly reports:', error);
    }
  }

  /** ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô: ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏° ‡πÄ‡∏ß‡∏•‡∏≤ 08:00 ‡∏ô. */
  private async sendDailyIncompleteTaskSummaries(): Promise<void> {
    try {
      console.log('üóíÔ∏è Sending daily incomplete task summaries...');

      const groups = await this.taskService.getAllActiveGroups();
      for (const group of groups) {
        // ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ
        const tasks = await this.taskService.getIncompleteTasksOfGroup(group.lineGroupId);
        if (tasks.length === 0) continue;

        // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        const tz = group.timezone || config.app.defaultTimezone;
        const header = `üóíÔ∏è ‡∏™‡∏£‡∏∏‡∏õ‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô (${moment().tz(tz).format('DD/MM/YYYY')})`;
        const lines = tasks.map((t, idx) => {
          const due = moment(t.dueTime).tz(tz).format('DD/MM HH:mm');
          const assignees = (t as any).assignedUsers?.map((u: any) => `@${u.displayName}`).join(' ') || '-';
          const statusEmoji = t.status === 'overdue' ? '‚ö†Ô∏è' : t.status === 'in_progress' ? '‚è≥' : 'üìù';
          return `${idx + 1}. ${statusEmoji} ${t.title} (‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${due}) ${assignees}`;
        });

        const message = header + "\n\n" + lines.join("\n");

        // ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ LINE group
        try {
          await (this.notificationService as any).lineService.pushMessage(group.lineGroupId, message);
        } catch (err) {
          console.warn('‚ö†Ô∏è Failed to send daily summary to group:', group.lineGroupId, err);
        }
      }
    } catch (error) {
      console.error('‚ùå Error sending daily incomplete task summaries:', error);
    }
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï KPI Records
   */
  private async updateKPIRecords(): Promise<void> {
    try {
      console.log('üìà Updating KPI records...');
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï leaderboard rankings
      await this.kpiService.updateLeaderboardRankings();
      
      // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ 1 ‡∏õ‡∏µ)
      await this.kpiService.cleanupOldRecords();

    } catch (error) {
      console.error('‚ùå Error updating KPI records:', error);
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô
   */
  private async sendTaskReminder(task: any, reminderType: string): Promise<void> {
    try {
      await this.notificationService.sendTaskReminder(task, reminderType);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
      await this.taskService.recordReminderSent(task.id, reminderType);
      
    } catch (error) {
      console.error('‚ùå Error sending task reminder:', error);
    }
  }

  /**
   * ‡πÅ‡∏õ‡∏•‡∏á reminder interval ‡πÄ‡∏õ‡πá‡∏ô moment duration
   */
  private parseReminderInterval(interval: string): { amount: number; unit: moment.unitOfTime.DurationConstructor } {
    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: '7d', '1h', '30m', 'P7D', 'PT3H'
    
    if (interval.startsWith('P')) {
      // ISO 8601 Duration format
      const match = interval.match(/P(?:(\d+)D)?T?(?:(\d+)H)?(?:(\d+)M)?/);
      if (match) {
        const [, days, hours, minutes] = match;
        if (days) return { amount: parseInt(days), unit: 'days' };
        if (hours) return { amount: parseInt(hours), unit: 'hours' };
        if (minutes) return { amount: parseInt(minutes), unit: 'minutes' };
      }
    } else {
      // Simple format: 7d, 1h, 30m
      const match = interval.match(/^(\d+)([dhm])$/);
      if (match) {
        const [, amount, unit] = match;
        const unitMap = { d: 'days', h: 'hours', m: 'minutes' } as const;
        return { 
          amount: parseInt(amount), 
          unit: unitMap[unit as keyof typeof unitMap] 
        };
      }
    }

    // Default fallback
    return { amount: 1, unit: 'hours' };
  }

  /** ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î (Recurring) */
  private async processRecurringTasks(): Promise<void> {
    try {
      const repo = AppDataSource.getRepository(RecurringTask);
      const now = moment();
      const dueTemplates = await repo.find({ where: { active: true } });
      for (const tmpl of dueTemplates) {
        if (!tmpl.nextRunAt) continue;
        const nextRun = moment(tmpl.nextRunAt).tz(tmpl.timezone || config.app.defaultTimezone);
        if (now.isSameOrAfter(nextRun)) {
          try {
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì dueTime ‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
            const [h, m] = (tmpl.timeOfDay || '09:00').split(':').map(v => parseInt(v, 10));
            const dueTime = now.clone().tz(tmpl.timezone || config.app.defaultTimezone).hour(h).minute(m).second(0).millisecond(0).toDate();

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô
            await this.taskService.createTask({
              groupId: tmpl.lineGroupId,
              title: tmpl.title,
              description: tmpl.description,
              assigneeIds: tmpl.assigneeLineUserIds, // LINE User IDs ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÉ‡∏ô createTask
              createdBy: tmpl.createdByLineUserId,
              dueTime,
              priority: tmpl.priority,
              tags: tmpl.tags,
              requireAttachment: tmpl.requireAttachment,
              reviewerUserId: tmpl.reviewerLineUserId
            });

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï lastRunAt ‡πÅ‡∏•‡∏∞ nextRunAt ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            tmpl.lastRunAt = now.toDate();
            tmpl.nextRunAt = this.calculateNextRunAt(tmpl);
            await repo.save(tmpl);
          } catch (err) {
            console.error('‚ùå Failed to create recurring task:', tmpl.id, err);
            // ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô nextRunAt ‡πÑ‡∏õ‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ loop ‡∏Ñ‡πâ‡∏≤‡∏á
            tmpl.nextRunAt = this.calculateNextRunAt(tmpl);
            await repo.save(tmpl);
          }
        }
      }
    } catch (error) {
      console.error('‚ùå Error processing recurring tasks:', error);
    }
  }

  private calculateNextRunAt(tmpl: RecurringTask): Date {
    const tz = tmpl.timezone || config.app.defaultTimezone;
    const now = moment().tz(tz);
    let next = moment(tmpl.nextRunAt || now).tz(tz);
    if (tmpl.recurrence === 'weekly') {
      // ‡πÑ‡∏õ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà weekday ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
      next = now.clone().day(tmpl.weekDay ?? 1);
      if (next.isSameOrBefore(now, 'day')) {
        next.add(1, 'week');
      }
    } else {
      // monthly: ‡πÑ‡∏õ‡∏¢‡∏±‡∏á dayOfMonth ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
      const dom = tmpl.dayOfMonth ?? 1;
      next = now.clone().date(Math.min(dom, now.daysInMonth()));
      if (next.isSameOrBefore(now, 'day')) {
        const nextMonth = now.clone().add(1, 'month');
        next = nextMonth.clone().date(Math.min(dom, nextMonth.daysInMonth()));
      }
    }
    const [h, m] = (tmpl.timeOfDay || '09:00').split(':').map(v => parseInt(v, 10));
    next.hour(h).minute(m).second(0).millisecond(0);
    return next.toDate();
  }
}