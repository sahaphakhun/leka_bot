// Project Memory Service
// ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ memory ‡πÅ‡∏•‡∏∞ rules ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å

import { ProjectRules, ProjectRule, ProjectMemory } from './ProjectRules';
import { logger } from '@/utils/logger';

export interface MemorySearchResult {
  memories: ProjectMemory[];
  rules: ProjectRule[];
  totalResults: number;
  searchQuery: string;
  searchTags: string[];
}

export interface RuleRecommendation {
  ruleId: string;
  ruleTitle: string;
  reason: string;
  priority: 'low' | 'medium' | 'high' | 'critical';
  context: string;
}

export interface ProjectInsight {
  type: 'warning' | 'info' | 'success' | 'error';
  title: string;
  message: string;
  relatedRules: string[];
  relatedMemories: string[];
  timestamp: Date;
  priority: 'low' | 'medium' | 'high' | 'critical';
}

export class ProjectMemoryService {
  private projectRules: ProjectRules;

  constructor() {
    this.projectRules = ProjectRules.getInstance();
  }

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° rule ‡πÉ‡∏´‡∏°‡πà
   */
  public addRule(rule: Omit<ProjectRule, 'id' | 'createdAt' | 'updatedAt'>): ProjectRule {
    const newRule: ProjectRule = {
      ...rule,
      id: this.generateRuleId(rule.category),
      createdAt: new Date(),
      updatedAt: new Date()
    };

    this.projectRules.addRule(newRule);
    logger.info(`üìã ‡πÄ‡∏û‡∏¥‡πà‡∏° rule ‡πÉ‡∏´‡∏°‡πà: ${newRule.title} (${newRule.id})`);
    
    return newRule;
  }

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° memory ‡πÉ‡∏´‡∏°‡πà
   */
  public addMemory(memory: Omit<ProjectMemory, 'id' | 'createdAt' | 'updatedAt'>): ProjectMemory {
    const newMemory: ProjectMemory = {
      ...memory,
      id: this.generateMemoryId(memory.type),
      createdAt: new Date(),
      updatedAt: new Date()
    };

    this.projectRules.addMemory(newMemory);
    logger.info(`üß† ‡πÄ‡∏û‡∏¥‡πà‡∏° memory ‡πÉ‡∏´‡∏°‡πà: ${newMemory.title} (${newMemory.id})`);
    
    return newMemory;
  }

  /**
   * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ memory ‡πÅ‡∏•‡∏∞ rules
   */
  public searchMemories(query: string, tags?: string[]): MemorySearchResult {
    const searchQuery = query.toLowerCase();
    const searchTags = tags || [];
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô memories
    const memories = this.projectRules.getAllMemories().filter(memory => {
      const matchesQuery = memory.title.toLowerCase().includes(searchQuery) ||
                          memory.content.toLowerCase().includes(searchQuery);
      
      const matchesTags = searchTags.length === 0 ||
                         searchTags.some(tag => memory.tags.includes(tag));
      
      return matchesQuery && matchesTags;
    });

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô rules
    const rules = this.projectRules.getAllRules().filter(rule => {
      const matchesQuery = rule.title.toLowerCase().includes(searchQuery) ||
                          rule.description.toLowerCase().includes(searchQuery);
      
      return matchesQuery;
    });

    return {
      memories,
      rules,
      totalResults: memories.length + rules.length,
      searchQuery,
      searchTags
    };
  }

  /**
   * ‡∏£‡∏±‡∏ö rule recommendations ‡∏ï‡∏≤‡∏° context
   */
  public getRuleRecommendations(context: string): RuleRecommendation[] {
    const recommendations: RuleRecommendation[] = [];
    const contextLower = context.toLowerCase();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö context ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ rules ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    if (contextLower.includes('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô') || contextLower.includes('‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å')) {
      recommendations.push({
        ruleId: 'WF-001',
        ruleTitle: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô',
        reason: '‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏î ‡πÜ ‡πÄ‡∏™‡∏°‡∏≠',
        priority: 'critical',
        context: '‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà'
      });
    }

    if (contextLower.includes('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô') || contextLower.includes('‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô')) {
      recommendations.push({
        ruleId: 'WF-002',
        ruleTitle: '‡∏™‡∏£‡πâ‡∏≤‡∏á To-dos ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏á‡∏≤‡∏ô',
        reason: '‡∏ó‡∏∏‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á To-dos ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤',
        priority: 'high',
        context: '‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà'
      });
    }

    if (contextLower.includes('commit') || contextLower.includes('‡πÇ‡∏Ñ‡πâ‡∏î')) {
      recommendations.push({
        ruleId: 'QL-002',
        ruleTitle: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡πà‡∏≠‡∏ô commit',
        reason: '‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏ß‡∏¢ linter ‡πÅ‡∏•‡∏∞ test ‡∏Å‡πà‡∏≠‡∏ô commit',
        priority: 'medium',
        context: '‡∏Å‡∏≤‡∏£ commit ‡πÇ‡∏Ñ‡πâ‡∏î'
      });
    }

    if (contextLower.includes('‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö') || contextLower.includes('deploy')) {
      recommendations.push({
        ruleId: 'QL-001',
        ruleTitle: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö',
        reason: '‡∏ó‡∏∏‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö',
        priority: 'high',
        context: '‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏á‡∏≤‡∏ô'
      });
    }

    if (contextLower.includes('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢') || contextLower.includes('security')) {
      recommendations.push({
        ruleId: 'SEC-001',
        ruleTitle: '‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
        reason: '‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢ API keys, passwords ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î',
        priority: 'critical',
        context: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢'
      });
    }

    return recommendations;
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á project insights ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   */
  public generateProjectInsights(): ProjectInsight[] {
    const insights: ProjectInsight[] = [];
    const rules = this.projectRules.getAllRules();
    const memories = this.projectRules.getAllMemories();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö rules ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    const criticalRules = rules.filter(rule => rule.priority === 'critical');
    if (criticalRules.length > 0) {
      insights.push({
        type: 'warning',
        title: '‡∏°‡∏µ Rules ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
        message: `‡∏°‡∏µ ${criticalRules.length} rules ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏î`,
        relatedRules: criticalRules.map(r => r.id),
        relatedMemories: [],
        timestamp: new Date(),
        priority: 'high'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö workflow rules
    const workflowRules = rules.filter(rule => rule.category === 'workflow');
    if (workflowRules.length > 0) {
      insights.push({
        type: 'info',
        title: 'Workflow Rules',
        message: `‡∏°‡∏µ ${workflowRules.length} rules ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö workflow ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°`,
        relatedRules: workflowRules.map(r => r.id),
        relatedMemories: [],
        timestamp: new Date(),
        priority: 'medium'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö lessons learned
    const lessons = memories.filter(memory => memory.type === 'lesson');
    if (lessons.length > 0) {
      insights.push({
        type: 'success',
        title: '‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ',
        message: `‡∏°‡∏µ ${lessons.length} ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå`,
        relatedRules: [],
        relatedMemories: lessons.map(l => l.id),
        timestamp: new Date(),
        priority: 'medium'
      });
    }

    return insights;
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï rule
   */
  public updateRule(ruleId: string, updates: Partial<ProjectRule>): boolean {
    const success = this.projectRules.updateRule(ruleId, updates);
    if (success) {
      logger.info(`üìã ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï rule: ${ruleId}`);
    }
    return success;
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï memory
   */
  public updateMemory(memoryId: string, updates: Partial<ProjectMemory>): boolean {
    const success = this.projectRules.updateMemory(memoryId, updates);
    if (success) {
      logger.info(`üß† ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï memory: ${memoryId}`);
    }
    return success;
  }

  /**
   * ‡∏•‡∏ö rule
   */
  public deleteRule(ruleId: string): boolean {
    const success = this.projectRules.deleteRule(ruleId);
    if (success) {
      logger.info(`üóëÔ∏è ‡∏•‡∏ö rule: ${ruleId}`);
    }
    return success;
  }

  /**
   * ‡∏•‡∏ö memory
   */
  public deleteMemory(memoryId: string): boolean {
    const success = this.projectRules.deleteMemory(memoryId);
    if (success) {
      logger.info(`üóëÔ∏è ‡∏•‡∏ö memory: ${memoryId}`);
    }
    return success;
  }

  /**
   * ‡∏£‡∏±‡∏ö rules ‡∏ï‡∏≤‡∏° category
   */
  public getRulesByCategory(category: string): ProjectRule[] {
    return this.projectRules.getRulesByCategory(category);
  }

  /**
   * ‡∏£‡∏±‡∏ö memories ‡∏ï‡∏≤‡∏° type
   */
  public getMemoriesByType(type: string): ProjectMemory[] {
    return this.projectRules.getMemoriesByType(type);
  }

  /**
   * ‡∏£‡∏±‡∏ö rule ‡∏ï‡∏≤‡∏° ID
   */
  public getRule(ruleId: string): ProjectRule | undefined {
    return this.projectRules.getRule(ruleId);
  }

  /**
   * ‡∏£‡∏±‡∏ö memory ‡∏ï‡∏≤‡∏° ID
   */
  public getMemory(memoryId: string): ProjectMemory | undefined {
    return this.projectRules.getMemory(memoryId);
  }

  /**
   * ‡∏£‡∏±‡∏ö rules ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  public getAllRules(): ProjectRule[] {
    return this.projectRules.getAllRules();
  }

  /**
   * ‡∏£‡∏±‡∏ö memories ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  public getAllMemories(): ProjectMemory[] {
    return this.projectRules.getAllMemories();
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á rule ID
   */
  private generateRuleId(category: string): string {
    const categoryPrefix = category.toUpperCase().substring(0, 3);
    const timestamp = Date.now().toString().slice(-6);
    return `${categoryPrefix}-${timestamp}`;
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á memory ID
   */
  private generateMemoryId(type: string): string {
    const typePrefix = type.toUpperCase().substring(0, 3);
    const timestamp = Date.now().toString().slice(-6);
    return `MEM-${typePrefix}-${timestamp}`;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á rules ‡πÅ‡∏•‡∏∞ memories
   */
  public validateConsistency(): { isValid: boolean; issues: string[] } {
    const issues: string[] = [];
    const rules = this.getAllRules();
    const memories = this.getAllMemories();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö rules ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ memories ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    rules.forEach(rule => {
      const relatedMemories = memories.filter(memory => 
        memory.relatedRules.includes(rule.id)
      );
      
      if (relatedMemories.length === 0 && rule.priority === 'critical') {
        issues.push(`Critical rule ${rule.id} ‡πÑ‡∏°‡πà‡∏°‡∏µ memories ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á`);
      }
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö memories ‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á rules ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    memories.forEach(memory => {
      memory.relatedRules.forEach(ruleId => {
        if (!rules.find(r => r.id === ruleId)) {
          issues.push(`Memory ${memory.id} ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á rule ${ruleId} ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà`);
        }
      });
    });

    return {
      isValid: issues.length === 0,
      issues
    };
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ rules ‡πÅ‡∏•‡∏∞ memories
   */
  public generateSummaryReport(): any {
    const rules = this.getAllRules();
    const memories = this.getAllMemories();
    
    const rulesByCategory = rules.reduce((acc, rule) => {
      if (!acc[rule.category]) acc[rule.category] = [];
      acc[rule.category].push(rule);
      return acc;
    }, {} as Record<string, ProjectRule[]>);

    const memoriesByType = memories.reduce((acc, memory) => {
      if (!acc[memory.type]) acc[memory.type] = [];
      acc[memory.type].push(memory);
      return acc;
    }, {} as Record<string, ProjectMemory[]>);

    const rulesByPriority = rules.reduce((acc, rule) => {
      if (!acc[rule.priority]) acc[rule.priority] = [];
      acc[rule.priority].push(rule);
      return acc;
    }, {} as Record<string, ProjectRule[]>);

    return {
      summary: {
        totalRules: rules.length,
        totalMemories: memories.length,
        rulesByCategory: Object.keys(rulesByCategory).map(cat => ({
          category: cat,
          count: rulesByCategory[cat].length
        })),
        memoriesByType: Object.keys(memoriesByType).map(type => ({
          type,
          count: memoriesByType[type].length
        })),
        rulesByPriority: Object.keys(rulesByPriority).map(priority => ({
          priority,
          count: rulesByPriority[priority].length
        }))
      },
      consistency: this.validateConsistency(),
      insights: this.generateProjectInsights()
    };
  }
}
