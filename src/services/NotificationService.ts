// Notification Service - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏•

import { LineService } from './LineService';
import { UserService } from './UserService';
import { EmailService } from './EmailService';
import { Task, Group, User, NotificationPayload, Leaderboard } from '@/types';
import { config } from '@/utils/config';
import moment from 'moment-timezone';

export class NotificationService {
  private lineService: LineService;
  private userService: UserService;
  private emailService: EmailService;

  constructor() {
    this.lineService = new LineService();
    this.userService = new UserService();
    this.emailService = new EmailService();
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô
   */
  public async sendTaskReminder(task: any, reminderType: string): Promise<void> {
    try {
      const assignees = task.assignedUsers || [];
      const group = task.group;

      if (!group || assignees.length === 0) {
        console.warn('‚ö†Ô∏è Cannot send reminder: missing group or assignees');
        return;
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      const message = this.createReminderMessage(task, reminderType);
      
      // ‡∏™‡πà‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° LINE ‡∏û‡∏£‡πâ‡∏≠‡∏° mention
      const userIds = assignees.map((user: any) => user.lineUserId);
      await this.lineService.sendNotificationWithMention(
        group.lineGroupId,
        userIds,
        message
      );

      // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      const emailUsers = assignees.filter((user: any) => user.email && user.isVerified);
      if (emailUsers.length > 0) {
        for (const user of emailUsers) {
          await this.emailService.sendTaskReminder(user, task, reminderType);
        }
      }

      console.log(`‚úÖ Sent ${reminderType} reminder for task: ${task.title}`);

    } catch (error) {
      console.error('‚ùå Error sending task reminder:', error);
      throw error;
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î
   */
  public async sendOverdueNotification(task: any): Promise<void> {
    try {
      const assignees = task.assignedUsers || [];
      const group = task.group;

      if (!group || assignees.length === 0) return;

      const overdueHours = moment().diff(moment(task.dueTime), 'hours');
      
      const message = `‚ö†Ô∏è ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î!

üìã **${task.title}**
üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${moment(task.dueTime).format('DD/MM/YYYY HH:mm')}
‚è∞ ‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤: ${overdueHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á

üë• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ${assignees.map((u: any) => `@${u.displayName}`).join(' ')}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡πà‡∏∞ üôè`;

      // ‡∏™‡πà‡∏á‡πÉ‡∏ô LINE
      const userIds = assignees.map((user: any) => user.lineUserId);
      await this.lineService.sendNotificationWithMention(
        group.lineGroupId,
        userIds,
        message
      );

      // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      const emailUsers = assignees.filter((user: any) => user.email && user.isVerified);
      for (const user of emailUsers) {
        await this.emailService.sendOverdueNotification(user, task, overdueHours);
      }

    } catch (error) {
      console.error('‚ùå Error sending overdue notification:', error);
      throw error;
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
   */
  public async sendTaskCreatedNotification(task: any): Promise<void> {
    try {
      const assignees = task.assignedUsers || [];
      const group = task.group;
      const creator = task.createdByUser;

      if (!group || assignees.length === 0) return;

      const dueDate = moment(task.dueTime).format('DD/MM/YYYY HH:mm');
      
      const message = `üìã ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà!

**${task.title}**
${task.description ? `üìù ${task.description}\n` : ''}üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${dueDate}
üë§ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢: ${creator?.displayName || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}
üë• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ${assignees.map((u: any) => `@${u.displayName}`).join(' ')}

${task.tags && task.tags.length > 0 ? `üè∑Ô∏è ${task.tags.map((tag: string) => `#${tag}`).join(' ')}\n` : ''}
üìä ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà: ${config.baseUrl}/dashboard?groupId=${group.lineGroupId}`;

      // ‡∏™‡πà‡∏á‡πÉ‡∏ô LINE Group
      const userIds = assignees.map((user: any) => user.lineUserId);
      await this.lineService.sendNotificationWithMention(
        group.lineGroupId,
        userIds,
        message
      );

      // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
      const privateMessage = `üìã ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà!

**${task.title}**
${task.description ? `üìù ${task.description}\n` : ''}üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${dueDate}
üë§ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢: ${creator?.displayName || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}
üè† ‡∏Å‡∏•‡∏∏‡πà‡∏°: ${group.name}

${task.tags && task.tags.length > 0 ? `üè∑Ô∏è ${task.tags.map((tag: string) => `#${tag}`).join(' ')}\n` : ''}
üìä ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà: ${config.baseUrl}/dashboard?groupId=${group.lineGroupId}`;

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
      for (const assignee of assignees) {
        try {
          await this.lineService.pushMessage(assignee.lineUserId, privateMessage);
        } catch (error) {
          console.warn(`‚ö†Ô∏è Failed to send private notification to ${assignee.displayName}:`, error);
        }
      }

      // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      const emailUsers = assignees.filter((user: any) => user.email && user.isVerified);
      for (const user of emailUsers) {
        await this.emailService.sendTaskCreatedNotification(user, task);
      }

    } catch (error) {
      console.error('‚ùå Error sending task created notification:', error);
      throw error;
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
   */
  public async sendTaskCompletedNotification(task: any, completedBy: User): Promise<void> {
    try {
      const group = task.group;
      if (!group) return;

      const message = `‚úÖ ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!

üìã **${task.title}**
üë§ ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢: ${completedBy.displayName}
üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${moment(task.dueTime).format('DD/MM/YYYY HH:mm')}
üéØ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${moment(task.completedAt).format('DD/MM/YYYY HH:mm')}

${this.getCompletionStatusEmoji(task)} ${this.getCompletionStatusText(task)}`;

      await this.lineService.pushMessage(group.lineGroupId, message);

    } catch (error) {
      console.error('‚ùå Error sending task completed notification:', error);
      throw error;
    }
  }

  /** ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÅ‡∏Å‡πâ‡∏á‡∏≤‡∏ô/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô */
  public async sendTaskUpdatedNotification(task: any, changes: Record<string, any>): Promise<void> {
    try {
      const group = task.group;
      if (!group) return;

      const changedFields: string[] = [];
      if (typeof changes.title === 'string') changedFields.push(`‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á`);
      if (typeof changes.description === 'string') changedFields.push(`‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢`);
      if (changes.dueTime) changedFields.push(`‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á`);
      if (changes.startTime) changedFields.push(`‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°`);
      if (changes.priority) changedFields.push(`‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç`);
      if (Array.isArray(changes.tags)) changedFields.push(`‡πÅ‡∏ó‡πá‡∏Å`);
      if (changes.status) changedFields.push(`‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞`);

      const dueText = task.dueTime ? moment(task.dueTime).format('DD/MM/YYYY HH:mm') : '-';
      const tagsText = (task.tags && task.tags.length > 0) ? `üè∑Ô∏è ${task.tags.map((t: string) => `#${t}`).join(' ')}` : '';
      const assigneeNames = (task.assignedUsers || []).map((u: any) => `@${u.displayName}`).join(' ');

      const headerEmoji = changes.status ? (changes.status === 'cancelled' ? 'üö´' : 'üîÑ') : '‚úèÔ∏è';
      const changedText = changedFields.length > 0 ? `
üîß ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: ${changedFields.join(', ')}` : '';

      const message = `${headerEmoji} ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏á‡∏≤‡∏ô

üìã ${task.title}
üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${dueText}
üë• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ${assigneeNames}${tagsText ? `\n${tagsText}` : ''}${changedText}

üìä ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà: ${config.baseUrl}/dashboard?groupId=${group.lineGroupId}`;

      const userIds = (task.assignedUsers || []).map((u: any) => u.lineUserId);
      await this.lineService.sendNotificationWithMention(group.lineGroupId, userIds, message);
    } catch (error) {
      console.error('‚ùå Error sending task updated notification:', error);
      throw error;
    }
  }

  /** ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß */
  public async sendTaskDeletedNotification(task: any): Promise<void> {
    try {
      const group = task.group;
      if (!group) return;

      const dueText = task.dueTime ? moment(task.dueTime).format('DD/MM/YYYY HH:mm') : '-';
      const assigneeNames = (task.assignedUsers || []).map((u: any) => `@${u.displayName}`).join(' ');
      const message = `üóëÔ∏è ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß

üìã ${task.title}
üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${dueText}
üë• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ${assigneeNames}`;

      await this.lineService.pushMessage(group.lineGroupId, message);
    } catch (error) {
      console.error('‚ùå Error sending task deleted notification:', error);
      throw error;
    }
  }

  /** ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô (‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå/‡∏•‡∏¥‡∏á‡∏Å‡πå) */
  public async sendTaskSubmittedNotification(
    task: any,
    submitterDisplayName: string,
    fileCount: number,
    links: string[]
  ): Promise<void> {
    try {
      const group = task.group;
      if (!group) return;

      const linksText = (links && links.length > 0) ? `\nüîó ‡∏•‡∏¥‡∏á‡∏Å‡πå: \n${links.map(l => `‚Ä¢ ${l}`).join('\n')}` : '';
      const dueText = task.dueTime ? moment(task.dueTime).format('DD/MM/YYYY HH:mm') : '-';
      const assigneeNames = (task.assignedUsers || []).map((u: any) => `@${u.displayName}`).join(' ');

      const message = `üìé ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô

üìã ${task.title}
üë§ ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: ${submitterDisplayName}
üìé ‡πÑ‡∏ü‡∏•‡πå/‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: ${fileCount}${linksText}
üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${dueText}
üë• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ${assigneeNames}`;

      await this.lineService.pushMessage(group.lineGroupId, message);
    } catch (error) {
      console.error('‚ùå Error sending task submitted notification:', error);
      throw error;
    }
  }

  /** ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2 ‡∏ß‡∏±‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏ü‡∏•‡πå/‡∏•‡∏¥‡∏á‡∏Å‡πå */
  public async sendReviewRequest(
    task: any,
    reviewerLineUserId: string,
    details: { submitterDisplayName?: string; fileCount?: number; links?: string[] }
  ): Promise<void> {
    try {
      const group = task.group;
      if (!group) return;

      const dueText = task.workflow?.review?.reviewDueAt
        ? moment(task.workflow.review.reviewDueAt).format('DD/MM/YYYY HH:mm')
        : moment(task.dueTime).format('DD/MM/YYYY HH:mm');

      const linksText = (details.links && details.links.length > 0)
        ? `\nüîó ‡∏•‡∏¥‡∏á‡∏Å‡πå: \n${details.links.map((l: string) => `‚Ä¢ ${l}`).join('\n')}`
        : '';

      const messageToReviewer = `üìù ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à

üìã ${task.title}
${details.submitterDisplayName ? `üë§ ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: ${details.submitterDisplayName}\n` : ''}${typeof details.fileCount === 'number' ? `üìé ‡πÑ‡∏ü‡∏•‡πå: ${details.fileCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n` : ''}üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏†‡∏≤‡∏¢‡πÉ‡∏ô: ${dueText}${linksText}

‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏Å‡∏•‡∏∏‡πà‡∏°: /approve ${task.id.substring(0, 8)} ‡∏´‡∏£‡∏∑‡∏≠ /reject ${task.id.substring(0, 8)} <‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà> [‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•]`;

      // ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à
      await this.lineService.pushMessage(reviewerLineUserId, messageToReviewer);

      // ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ Flex (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏° ‡∏ú‡πà‡∏≤‡∏ô/‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô)
      const shortId = (task.id || '').substring(0, 8) || '';
      const flex: any = {
        type: 'flex',
        altText: '‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à',
        contents: {
          type: 'bubble',
          header: {
            type: 'box',
            layout: 'vertical',
            contents: [
              { type: 'text', text: '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏≤‡∏ô', weight: 'bold', color: '#333333', size: 'lg' },
              { type: 'text', text: task.title, size: 'sm', color: '#666666', wrap: true }
            ]
          },
          body: {
            type: 'box',
            layout: 'vertical',
            spacing: 'sm',
            contents: [
              ...(details.submitterDisplayName ? [{ type: 'text', text: `‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: ${details.submitterDisplayName}`, size: 'sm' }] : []),
              ...(typeof details.fileCount === 'number' ? [{ type: 'text', text: `‡πÑ‡∏ü‡∏•‡πå: ${details.fileCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`, size: 'sm' }] : []),
              { type: 'text', text: `‡∏ï‡∏£‡∏ß‡∏à‡∏†‡∏≤‡∏¢‡πÉ‡∏ô: ${dueText}`, size: 'sm' },
              ...(details.links && details.links.length > 0
                ? [{ type: 'text', text: `‡∏•‡∏¥‡∏á‡∏Å‡πå: ${details.links.join(' ')}`, size: 'sm', wrap: true }]
                : [])
            ]
          },
          footer: {
            type: 'box',
            layout: 'horizontal',
            spacing: 'sm',
            contents: [
              {
                type: 'button',
                style: 'primary',
                height: 'sm',
                action: { type: 'postback', label: '‡∏ú‡πà‡∏≤‡∏ô', data: `action=approve_task&taskId=${task.id}` }
              },
              {
                type: 'button',
                style: 'secondary',
                height: 'sm',
                action: { type: 'message', label: '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô', text: `/reject ${shortId} 2d [‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏™‡πà‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•]` }
              },
              {
                type: 'button',
                style: 'link',
                height: 'sm',
                action: { type: 'uri', label: '‡∏î‡∏π‡∏á‡∏≤‡∏ô', uri: `${config.baseUrl}/dashboard?groupId=${group.lineGroupId}` }
              }
            ]
          }
        }
      };
      await this.lineService.pushMessage(group.lineGroupId, flex);

    } catch (error) {
      console.error('‚ùå Error sending review request:', error);
      throw error;
    }
  }

  /** ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà */
  public async sendTaskRejectedNotification(task: any, newDueTime: Date, reviewerDisplayName?: string): Promise<void> {
    try {
      const group = task.group;
      if (!group) return;

      const message = `‚ùå ‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç

üìã ${task.title}
${reviewerDisplayName ? `üë§ ‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à: ${reviewerDisplayName}\n` : ''}üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà: ${moment(newDueTime).format('DD/MM/YYYY HH:mm')}

‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå /submit ${task.id.substring(0, 8)} [‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏] ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå/‡∏•‡∏¥‡∏á‡∏Å‡πå`;

      await this.lineService.pushMessage(group.lineGroupId, message);

    } catch (error) {
      console.error('‚ùå Error sending task rejected notification:', error);
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
   */
  public async sendWeeklyReport(
    group: Group, 
    stats: any, 
    leaderboard: Leaderboard[]
  ): Promise<void> {
    try {
      if (!group.settings.enableLeaderboard) return;

      const weekStart = moment().startOf('week').format('DD/MM');
      const weekEnd = moment().endOf('week').format('DD/MM');

      // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç 1-3
      const medalFor = (rank: number) => {
        if (rank === 1) return 'ü•á';
        if (rank === 2) return 'ü•à';
        if (rank === 3) return 'ü•â';
        return `${rank}Ô∏è‚É£`;
      };

      let message = `üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (${weekStart} - ${weekEnd})\n\n` +
        `üìà **‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏•‡∏∏‡πà‡∏°**\n` +
        `‚úÖ ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à: ${stats.completedTasks}\n` +
        `‚è≥ ‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á: ${stats.pendingTasks}\n` +
        `‚ö†Ô∏è ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${stats.overdueTasks}\n\n` +
        `üèÜ **‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ô‡∏Ç‡∏¢‡∏±‡∏ô (‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ)**\n`;

      leaderboard.forEach((user, index) => {
        const rank = index + 1;
        const medal = medalFor(rank);
        const trend = user.trend === 'up' ? 'üìà' : user.trend === 'down' ? 'üìâ' : '‚û°Ô∏è';
        message += `${medal} ${user.displayName} ‚Äî ${user.weeklyPoints} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ${trend}\n`;
      });

      message += `\nüìä ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà: ${config.baseUrl}/dashboard?groupId=${group.lineGroupId}#leaderboard`;

      await this.lineService.pushMessage(group.lineGroupId, message);

    } catch (error) {
      console.error('‚ùå Error sending weekly report:', error);
      throw error;
    }
  }

  /** ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡∏°) ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß */
  public async sendWeeklyReportToAdmins(
    group: Group,
    stats: any,
    leaderboard: Leaderboard[]
  ): Promise<void> {
    try {
      // ‡∏î‡∏∂‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ admin
      const members = await this.userService.getGroupMembers(group.lineGroupId);
      const admins = members.filter(m => m.role === 'admin');
      if (admins.length === 0) return;

      const weekStart = moment().startOf('week').format('DD/MM');
      const weekEnd = moment().endOf('week').format('DD/MM');

      let message = `üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (${weekStart} - ${weekEnd})\n\n` +
        `üë• ‡∏Å‡∏•‡∏∏‡πà‡∏°: ${group.name}\n\n` +
        `üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏•‡∏∏‡πà‡∏°\n` +
        `‚úÖ ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à: ${stats.completedTasks}\n` +
        `‚è≥ ‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á: ${stats.pendingTasks}\n` +
        `‚ö†Ô∏è ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${stats.overdueTasks}\n\n` +
        `üèÜ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (Top 5)\n`;

      leaderboard.slice(0, 5).forEach((user, index) => {
        const medal = ['ü•á', 'ü•à', 'ü•â', '4Ô∏è‚É£', '5Ô∏è‚É£'][index];
        const trend = user.trend === 'up' ? 'üìà' : user.trend === 'down' ? 'üìâ' : '‚û°Ô∏è';
        message += `${medal} ${user.displayName} - ${user.weeklyPoints} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ${trend}\n`;
      });

      message += `\nüìä ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà: ${config.baseUrl}/dashboard?groupId=${group.lineGroupId}#leaderboard`;

      for (const admin of admins) {
        try {
          await this.lineService.pushMessage(admin.lineUserId, message);
        } catch (err) {
          console.warn('‚ö†Ô∏è Failed to send weekly report to admin:', admin.displayName, err);
        }
      }
    } catch (error) {
      console.error('‚ùå Error sending weekly report to admins:', error);
      throw error;
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
   */
  public async sendNotification(payload: NotificationPayload): Promise<void> {
    try {
      console.log('üì¨ Sending notification:', payload.type);

      switch (payload.type) {
        case 'task_created':
          await this.sendTaskCreatedNotification(payload.data);
          break;

        case 'task_reminder':
          await this.sendTaskReminder(payload.data.task, payload.data.reminderType);
          break;

        case 'task_overdue':
          await this.sendOverdueNotification(payload.data);
          break;

        case 'task_completed':
          await this.sendTaskCompletedNotification(payload.data.task, payload.data.completedBy);
          break;

        case 'weekly_summary':
          await this.sendWeeklyReport(payload.data.group, payload.data.stats, payload.data.leaderboard);
          break;

        default:
          console.warn('‚ö†Ô∏è Unknown notification type:', payload.type);
      }

    } catch (error) {
      console.error('‚ùå Error sending notification:', error);
      throw error;
    }
  }

  // Helper Methods

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
   */
  private createReminderMessage(task: any, reminderType: string): string {
    const dueTime = moment(task.dueTime).tz(task.group.timezone || config.app.defaultTimezone);
    const now = moment().tz(task.group.timezone || config.app.defaultTimezone);
    const timeDiff = dueTime.diff(now);
    const duration = moment.duration(timeDiff);

    let timeText = '';
    let emoji = 'üîî';

    switch (reminderType) {
      case 'P7D':
      case '7d':
        timeText = '‡∏≠‡∏µ‡∏Å 7 ‡∏ß‡∏±‡∏ô';
        emoji = 'üìÖ';
        break;
      case 'P1D':
      case '1d':
        timeText = '‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ';
        emoji = '‚è∞';
        break;
      case 'PT3H':
      case '3h':
        timeText = '‡∏≠‡∏µ‡∏Å 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á';
        emoji = '‚ö°';
        break;
      case 'daily_8am':
        timeText = '‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤ 08:00 ‡∏ô.';
        emoji = 'üåÖ';
        break;
      case 'due':
        timeText = '‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß';
        emoji = 'üö®';
        break;
      default:
        if (duration.asDays() >= 1) {
          timeText = `‡∏≠‡∏µ‡∏Å ${Math.floor(duration.asDays())} ‡∏ß‡∏±‡∏ô`;
        } else if (duration.asHours() >= 1) {
          timeText = `‡∏≠‡∏µ‡∏Å ${Math.floor(duration.asHours())} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`;
        } else {
          timeText = `‡∏≠‡∏µ‡∏Å ${Math.floor(duration.asMinutes())} ‡∏ô‡∏≤‡∏ó‡∏µ`;
        }
    }

    const assignees = task.assignedUsers || [];
    const assigneeNames = assignees.map((u: any) => `@${u.displayName}`).join(' ');

    return `${emoji} **‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô - ${timeText}**

üìã ${task.title}
üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${dueTime.format('DD/MM/YYYY HH:mm')}
üë• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ${assigneeNames}

${task.description ? `üìù ${task.description}\n` : ''}${task.tags && task.tags.length > 0 ? `üè∑Ô∏è ${task.tags.map((tag: string) => `#${tag}`).join(' ')}\n` : ''}
üìä ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà: ${config.baseUrl}/dashboard`;
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
   */
  private getCompletionStatusEmoji(task: any): string {
    const dueTime = moment(task.dueTime);
    const completedTime = moment(task.completedAt);
    const diff = completedTime.diff(dueTime, 'hours');

    if (diff <= -24) return 'üéØ'; // ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    if (diff <= 24) return '‚ú®';  // ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    return '‚ö†Ô∏è'; // ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ä‡πâ‡∏≤
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
   */
  private getCompletionStatusText(task: any): string {
    const dueTime = moment(task.dueTime);
    const completedTime = moment(task.completedAt);
    const diff = completedTime.diff(dueTime, 'hours');

    if (diff <= -24) return '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î - ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! üéâ';
    if (diff <= 24) return '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤ - ‡∏î‡∏µ‡∏°‡∏≤‡∏Å! üëç';
    return `‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ä‡πâ‡∏≤ ${Math.abs(diff)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`;
  }
}