// Flex Message Template Service - ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
// ‡πÉ‡∏ä‡πâ Design System ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠

import { FlexMessageDesignSystem, TaskCardData } from './FlexMessageDesignSystem';
import { FlexMessage } from '@line/bot-sdk';
import moment from 'moment';
import { config } from '@/utils/config';

export class FlexMessageTemplateService {
  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
   */
  static createNewTaskCard(task: any, group: any, creator: any, dueDate: string): FlexMessage {
    const assigneeNames = (task.assignedUsers || []).map((u: any) => u.displayName).join(', ') || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    const tagsText = (task.tags && task.tags.length > 0) ? `üè∑Ô∏è ${task.tags.map((t: string) => `#${t}`).join(' ')}` : '';
    const priorityColor = FlexMessageDesignSystem.getPriorityColor(task.priority);
    const priorityText = FlexMessageDesignSystem.getPriorityText(task.priority);

    const content = [
      FlexMessageDesignSystem.createText(`üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${dueDate}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      FlexMessageDesignSystem.createText(`üë• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ${assigneeNames}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      FlexMessageDesignSystem.createText(`üë§ ‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á: ${creator?.displayName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      ...(priorityText ? [FlexMessageDesignSystem.createText(`üéØ ${priorityText}`, 'sm', priorityColor, 'bold')] : []),
      ...(task.description ? [FlexMessageDesignSystem.createText(`üìù ${task.description}`, 'sm', FlexMessageDesignSystem.colors.textSecondary, undefined, true)] : []),
      ...(tagsText ? [FlexMessageDesignSystem.createText(tagsText, 'sm', FlexMessageDesignSystem.colors.textSecondary, undefined, true)] : [])
    ];

    const buttons = [
      FlexMessageDesignSystem.createButton('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', 'uri', `${config.baseUrl}/dashboard?groupId=${group.id}&taskId=${task.id}`, 'primary')
    ];

    return FlexMessageDesignSystem.createStandardTaskCard(
      task.title,
      FlexMessageDesignSystem.emojis.newTask,
      FlexMessageDesignSystem.colors.primary,
      content,
      buttons,
      'compact'
    );
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î
   */
  static createOverdueTaskCard(task: any, group: any, overdueHours: number): FlexMessage {
    const overdueText = overdueHours < 24 
      ? `‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î ${overdueHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`
      : `‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î ${Math.floor(overdueHours / 24)} ‡∏ß‡∏±‡∏ô ${overdueHours % 24} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`;

    const content = [
      FlexMessageDesignSystem.createText(`üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${moment(task.dueTime).tz(config.app.defaultTimezone).format('DD/MM/YYYY HH:mm')}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      FlexMessageDesignSystem.createText(`‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô: ${overdueText}`, 'sm', FlexMessageDesignSystem.colors.danger, 'bold'),
      FlexMessageDesignSystem.createText(`üë• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ${(task.assignedUsers || []).map((u: any) => u.displayName).join(', ') || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      FlexMessageDesignSystem.createText(`üéØ ${FlexMessageDesignSystem.getPriorityText(task.priority)}`, 'sm', FlexMessageDesignSystem.getPriorityColor(task.priority), 'bold'),
      ...(task.description ? [FlexMessageDesignSystem.createText(`üìù ${task.description}`, 'sm', FlexMessageDesignSystem.colors.textSecondary, undefined, true)] : [])
    ];

    const buttons = [
      FlexMessageDesignSystem.createButton('‡∏î‡∏π‡∏á‡∏≤‡∏ô', 'uri', `${config.baseUrl}/dashboard?groupId=${group.id}&taskId=${task.id}`, 'primary')
    ];

    return FlexMessageDesignSystem.createStandardTaskCard(
      task.title,
      FlexMessageDesignSystem.emojis.overdue,
      FlexMessageDesignSystem.colors.danger,
      content,
      buttons,
      'compact'
    );
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
   */
  static createCompletedTaskCard(task: any, group: any, completedBy: any): FlexMessage {
    const completionScore = this.calculateCompletionScore(task);
    const scoreColor = completionScore >= 90 ? FlexMessageDesignSystem.colors.success : completionScore >= 70 ? FlexMessageDesignSystem.colors.warning : FlexMessageDesignSystem.colors.danger;

    const content = [
      FlexMessageDesignSystem.createText(`üë§ ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢: ${completedBy.displayName}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      FlexMessageDesignSystem.createText(`üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${moment(task.dueTime).tz(config.app.defaultTimezone).format('DD/MM/YYYY HH:mm')}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      FlexMessageDesignSystem.createText(`üéØ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${moment(task.completedAt).tz(config.app.defaultTimezone).format('DD/MM/YYYY HH:mm')}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      FlexMessageDesignSystem.createText(`${this.getCompletionStatusEmoji(task)} ${this.getCompletionStatusText(task)}`, 'sm', FlexMessageDesignSystem.colors.textSecondary, 'bold'),
      FlexMessageDesignSystem.createBox('horizontal', [
        FlexMessageDesignSystem.createText('‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:', 'sm', FlexMessageDesignSystem.colors.textSecondary),
        FlexMessageDesignSystem.createText(`${completionScore}/100`, 'sm', scoreColor, 'bold')
      ], 'small')
    ];

    const buttons = [
      FlexMessageDesignSystem.createButton('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', 'uri', `${config.baseUrl}/dashboard?groupId=${group.id}&taskId=${task.id}`, 'primary')
    ];

    return FlexMessageDesignSystem.createStandardTaskCard(
      task.title,
      FlexMessageDesignSystem.emojis.completed,
      FlexMessageDesignSystem.colors.success,
      content,
      buttons,
      'compact'
    );
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
   */
  static createUpdatedTaskCard(task: any, group: any, changes: Record<string, any>, changedFields: string[]): FlexMessage {
    const dueText = task.dueTime ? moment(task.dueTime).tz(config.app.defaultTimezone).format('DD/MM/YYYY HH:mm') : '-';
    const tagsText = (task.tags && task.tags.length > 0) ? `üè∑Ô∏è ${task.tags.map((t: string) => `#${t}`).join(' ')}` : '';
    const assigneeNames = (task.assignedUsers || []).map((u: any) => u.displayName).join(', ');
    const headerEmoji = changes.status ? (changes.status === 'cancelled' ? 'üö´' : 'üîÑ') : '‚úèÔ∏è';
    const headerColor = changes.status === 'cancelled' ? FlexMessageDesignSystem.colors.neutral : FlexMessageDesignSystem.colors.primary;
    const priorityColor = FlexMessageDesignSystem.getPriorityColor(task.priority);
    const priorityText = FlexMessageDesignSystem.getPriorityText(task.priority);

    const content = [
      FlexMessageDesignSystem.createText(`üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${dueText}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      FlexMessageDesignSystem.createText(`üë• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ${assigneeNames}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      ...(priorityText ? [FlexMessageDesignSystem.createText(`üéØ ${priorityText}`, 'sm', priorityColor, 'bold')] : []),
      ...(tagsText ? [FlexMessageDesignSystem.createText(tagsText, 'sm', FlexMessageDesignSystem.colors.textSecondary)] : []),
      ...(changedFields.length > 0 ? [FlexMessageDesignSystem.createText(`üîß ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: ${changedFields.join(', ')}`, 'sm', FlexMessageDesignSystem.colors.warning, 'bold')] : [])
    ];

    const buttons = [
      FlexMessageDesignSystem.createButton('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', 'uri', `${config.baseUrl}/dashboard?groupId=${group.lineGroupId}`, 'primary')
    ];

    return FlexMessageDesignSystem.createStandardTaskCard(
      task.title,
      headerEmoji,
      headerColor,
      content,
      buttons,
      'compact'
    );
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
   */
  static createDeletedTaskCard(task: any, group: any): FlexMessage {
    const dueText = task.dueTime ? moment(task.dueTime).tz(config.app.defaultTimezone).format('DD/MM/YYYY HH:mm') : '-';
    const assigneeNames = (task.assignedUsers || []).map((u: any) => u.displayName).join(', ');
    const priorityColor = FlexMessageDesignSystem.getPriorityColor(task.priority);
    const priorityText = FlexMessageDesignSystem.getPriorityText(task.priority);

    const content = [
      FlexMessageDesignSystem.createText(`üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${dueText}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      FlexMessageDesignSystem.createText(`üë• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ${assigneeNames}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      ...(priorityText ? [FlexMessageDesignSystem.createText(`üéØ ${priorityText}`, 'sm', priorityColor, 'bold')] : []),
      FlexMessageDesignSystem.createText('‚ö†Ô∏è ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß', 'sm', FlexMessageDesignSystem.colors.danger, 'bold')
    ];

    const buttons = [
      FlexMessageDesignSystem.createButton('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', 'uri', `${config.baseUrl}/dashboard?groupId=${group.lineGroupId}`, 'primary')
    ];

    return FlexMessageDesignSystem.createStandardTaskCard(
      task.title,
      FlexMessageDesignSystem.emojis.deleted,
      FlexMessageDesignSystem.colors.neutral,
      content,
      buttons,
      'compact'
    );
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á
   */
  static createSubmittedTaskCard(task: any, group: any, submitterDisplayName: string, fileCount: number, links: string[]): FlexMessage {
    const dueText = task.dueTime ? moment(task.dueTime).tz(config.app.defaultTimezone).format('DD/MM/YYYY HH:mm') : '-';
    const assigneeNames = (task.assignedUsers || []).map((u: any) => u.displayName).join(', ');
    const priorityColor = FlexMessageDesignSystem.getPriorityColor(task.priority);
    const priorityText = FlexMessageDesignSystem.getPriorityText(task.priority);

    const content = [
      FlexMessageDesignSystem.createText(`üë§ ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: ${submitterDisplayName}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      FlexMessageDesignSystem.createText(`üìé ‡πÑ‡∏ü‡∏•‡πå/‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: ${fileCount}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      FlexMessageDesignSystem.createText(`üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${dueText}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      FlexMessageDesignSystem.createText(`üë• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö: ${assigneeNames}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      ...(priorityText ? [FlexMessageDesignSystem.createText(`üéØ ${priorityText}`, 'sm', priorityColor, 'bold')] : []),
      ...(links && links.length > 0 ? [FlexMessageDesignSystem.createText(`üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå: ${links.join(' ')}`, 'sm', FlexMessageDesignSystem.colors.textSecondary, undefined, true)] : [])
    ];

    const buttons = [
      FlexMessageDesignSystem.createButton('‡∏î‡∏π‡∏á‡∏≤‡∏ô', 'uri', `${config.baseUrl}/dashboard?groupId=${group.id}&taskId=${task.id}`, 'primary')
    ];

    return FlexMessageDesignSystem.createStandardTaskCard(
      task.title,
      FlexMessageDesignSystem.emojis.submitted,
      FlexMessageDesignSystem.colors.info,
      content,
      buttons,
      'compact'
    );
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ç‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏≤‡∏ô
   */
  static createReviewRequestCard(task: any, group: any, details: any, dueText: string): FlexMessage {
    const content = [
      FlexMessageDesignSystem.createText('üìù ‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à', 'md', FlexMessageDesignSystem.colors.warning, 'bold'),
      FlexMessageDesignSystem.createText(`üìã ${task.title}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      FlexMessageDesignSystem.createSeparator('small'),
      FlexMessageDesignSystem.createText(`üë§ ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: ${details.submitterDisplayName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      ...(details.fileCount > 0 ? [
        FlexMessageDesignSystem.createText(`üìé ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö: ${details.fileCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`, 'sm', FlexMessageDesignSystem.colors.textPrimary)
      ] : []),
      ...(details.links && details.links.length > 0 ? [
        FlexMessageDesignSystem.createText(`üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå: ${details.links.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`, 'sm', FlexMessageDesignSystem.colors.textPrimary)
      ] : []),
      FlexMessageDesignSystem.createSeparator('small'),
      FlexMessageDesignSystem.createText(`üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏†‡∏≤‡∏¢‡πÉ‡∏ô: ${dueText}`, 'sm', FlexMessageDesignSystem.colors.textSecondary)
    ];

    const buttons = [
      FlexMessageDesignSystem.createButton('‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥', 'postback', `action=approve_task&taskId=${task.id}`, 'primary'),
      FlexMessageDesignSystem.createButton('‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö', 'postback', `action=reject_task&taskId=${task.id}`, 'secondary'),
      FlexMessageDesignSystem.createButton('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', 'uri', `${config.baseUrl}/dashboard?groupId=${group.id}&taskId=${task.id}`, 'secondary')
    ];

    return FlexMessageDesignSystem.createStandardTaskCard(
      'üìù ‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à',
      'üìù',
      FlexMessageDesignSystem.colors.warning,
      content,
      buttons,
      'compact'
    );
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö
   */
  static createRejectedTaskCard(task: any, group: any, newDueTime: Date, reviewerDisplayName?: string): FlexMessage {
    const newDueText = moment(newDueTime).tz(config.app.defaultTimezone).format('DD/MM/YYYY HH:mm');
    
    const content = [
      FlexMessageDesignSystem.createText('‚ùå ‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö', 'md', FlexMessageDesignSystem.colors.danger, 'bold'),
      FlexMessageDesignSystem.createText(`üìã ${task.title}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      FlexMessageDesignSystem.createSeparator('small'),
      FlexMessageDesignSystem.createText(`üë§ ‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à: ${reviewerDisplayName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      FlexMessageDesignSystem.createText(`üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà: ${newDueText}`, 'sm', FlexMessageDesignSystem.colors.textPrimary, 'bold'),
      FlexMessageDesignSystem.createSeparator('small'),
      FlexMessageDesignSystem.createText('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î', 'sm', FlexMessageDesignSystem.colors.textSecondary)
    ];

    const buttons = [
      FlexMessageDesignSystem.createButton('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', 'uri', `${config.baseUrl}/dashboard?groupId=${group.id}&taskId=${task.id}`, 'primary'),
      FlexMessageDesignSystem.createButton('‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà', 'postback', `action=submit_task&taskId=${task.id}`, 'secondary')
    ];

    return FlexMessageDesignSystem.createStandardTaskCard(
      '‚ùå ‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö',
      '‚ùå',
      FlexMessageDesignSystem.colors.danger,
      content,
      buttons,
      'compact'
    );
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
   */
  static createDailySummaryCard(group: any, tasks: any[], timezone: string): FlexMessage {
    const overdueTasks = tasks.filter(t => t.status === 'overdue');
    const inProgressTasks = tasks.filter(t => t.status === 'in_progress');
    const pendingTasks = tasks.filter(t => t.status === 'pending');
    const date = moment().tz(timezone).format('DD/MM/YYYY');

    const content = [
      FlexMessageDesignSystem.createText(`üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${date}`, 'sm', FlexMessageDesignSystem.colors.textSecondary, undefined, undefined, 'medium'),
      FlexMessageDesignSystem.createSeparator(),
      FlexMessageDesignSystem.createText(`üìã ‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${tasks.length} ‡∏á‡∏≤‡∏ô`, 'md', FlexMessageDesignSystem.colors.textPrimary, 'bold'),
      FlexMessageDesignSystem.createBox('vertical', [
        FlexMessageDesignSystem.createText(`‚ö†Ô∏è ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${overdueTasks.length} ‡∏á‡∏≤‡∏ô`, 'sm', FlexMessageDesignSystem.colors.danger),
        FlexMessageDesignSystem.createText(`‚è≥ ‡∏á‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: ${inProgressTasks.length} ‡∏á‡∏≤‡∏ô`, 'sm', FlexMessageDesignSystem.colors.warning),
        FlexMessageDesignSystem.createText(`üìù ‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: ${pendingTasks.length} ‡∏á‡∏≤‡∏ô`, 'sm', FlexMessageDesignSystem.colors.primary)
      ], 'small')
    ];

    const buttons = [
      FlexMessageDesignSystem.createButton('‡∏î‡∏π Dashboard', 'uri', `${config.baseUrl}/dashboard?groupId=${group.id}`, 'primary')
    ];

    return FlexMessageDesignSystem.createStandardTaskCard(
      group.name,
      FlexMessageDesignSystem.emojis.report,
      FlexMessageDesignSystem.colors.success,
      content,
      buttons,
      'compact'
    );
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
   */
  static createPersonalReportCard(assignee: any, tasks: any[], timezone: string): FlexMessage {
    const overdueTasks = tasks.filter(t => t.status === 'overdue');
    const inProgressTasks = tasks.filter(t => t.status === 'in_progress');
    const pendingTasks = tasks.filter(t => t.status === 'pending');
    const date = moment().tz(timezone).format('DD/MM/YYYY');
    const header = `üìã ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• - ${assignee.displayName}`;
    const subtitle = `üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${date} | üìä ‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á ${tasks.length} ‡∏á‡∏≤‡∏ô`;

    const content = [
      FlexMessageDesignSystem.createText(subtitle, 'sm', FlexMessageDesignSystem.colors.textSecondary),
      FlexMessageDesignSystem.createSeparator()
    ];

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    if (overdueTasks.length > 0) {
      content.push(
        FlexMessageDesignSystem.createText('‚ö†Ô∏è ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î:', 'sm', FlexMessageDesignSystem.colors.danger, 'bold', undefined, 'medium')
      );
      
      overdueTasks.forEach(task => {
        content.push(
          FlexMessageDesignSystem.createBox('vertical', [
            FlexMessageDesignSystem.createText(task.title, 'sm', FlexMessageDesignSystem.colors.textPrimary, 'bold', true),
            FlexMessageDesignSystem.createText(`üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${moment(task.dueTime).tz(timezone).format('DD/MM/YYYY HH:mm')}`, 'xs', FlexMessageDesignSystem.colors.danger)
          ], 'small', 'small', '#FFF2F2', 'sm') as any
        );
      });
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
    if (inProgressTasks.length > 0) {
      content.push(
        FlexMessageDesignSystem.createText('‚è≥ ‡∏á‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:', 'sm', FlexMessageDesignSystem.colors.warning, 'bold', undefined, 'medium')
      );
      
      inProgressTasks.forEach(task => {
        content.push(
          FlexMessageDesignSystem.createBox('vertical', [
            FlexMessageDesignSystem.createText(task.title, 'sm', FlexMessageDesignSystem.colors.textPrimary, 'bold', true),
            FlexMessageDesignSystem.createText(`üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${moment(task.dueTime).tz(timezone).format('DD/MM/YYYY HH:mm')}`, 'xs', FlexMessageDesignSystem.colors.warning)
          ], 'small', 'small', '#FFF8E1', 'sm') as any
        );
      });
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
    if (pendingTasks.length > 0) {
      content.push(
        FlexMessageDesignSystem.createText('üìù ‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:', 'sm', FlexMessageDesignSystem.colors.primary, 'bold', undefined, 'medium')
      );
      
      pendingTasks.forEach(task => {
        content.push(
          FlexMessageDesignSystem.createBox('vertical', [
            FlexMessageDesignSystem.createText(task.title, 'sm', FlexMessageDesignSystem.colors.textPrimary, 'bold', true),
            FlexMessageDesignSystem.createText(`üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${moment(task.dueTime).tz(timezone).format('DD/MM/YYYY HH:mm')}`, 'xs', FlexMessageDesignSystem.colors.primary)
          ], 'small', 'small', '#F0F8FF', 'sm') as any
        );
      });
    }

    const buttons = [
      FlexMessageDesignSystem.createButton('‡∏î‡∏π Dashboard', 'uri', `${config.baseUrl}/dashboard?groupId=${assignee.groupId}`, 'primary')
    ];

    return FlexMessageDesignSystem.createStandardTaskCard(
      header,
      FlexMessageDesignSystem.emojis.personal,
      FlexMessageDesignSystem.colors.success,
      content,
      buttons,
      'compact'
    );
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó
   */
  static createFileAttachmentCard(task: any, group: any, assignee: any): FlexMessage {
    const content = [
      FlexMessageDesignSystem.createText('üìé ‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô', 'md', FlexMessageDesignSystem.colors.textPrimary, 'bold'),
      FlexMessageDesignSystem.createText(`üìã ${task.title}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      FlexMessageDesignSystem.createSeparator('small'),
      FlexMessageDesignSystem.createText('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏™‡πà‡∏á', 'sm', FlexMessageDesignSystem.colors.textSecondary, undefined, true),
      FlexMessageDesignSystem.createText('‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÑ‡∏ü‡∏•‡πå', 'xs', FlexMessageDesignSystem.colors.warning, 'bold'),
      FlexMessageDesignSystem.createSeparator('small'),
      FlexMessageDesignSystem.createText('üì§ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏ô‡∏ö‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥', 'xs', FlexMessageDesignSystem.colors.textSecondary)
    ];

    const buttons = [
      FlexMessageDesignSystem.createButton('‡∏™‡πà‡∏á', 'postback', `action=submit_with_files&taskId=${task.id}`, 'primary'),
      FlexMessageDesignSystem.createButton('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', 'postback', `action=submit_cancel&taskId=${task.id}`, 'secondary')
    ];

    return FlexMessageDesignSystem.createStandardTaskCard(
      'üìé ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô',
      'üìé',
      FlexMessageDesignSystem.colors.info,
      content,
      buttons,
      'compact'
    );
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó
   */
  static createFileDisplayCard(file: any, group: any): FlexMessage {
    const fileIcon = this.getFileIcon(file.mimeType);
    const fileSize = this.formatFileSize(file.size);
    const uploadDate = moment(file.uploadedAt).format('DD/MM HH:mm');
    
    const content = [
      FlexMessageDesignSystem.createText('üìé ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö', 'md', FlexMessageDesignSystem.colors.textPrimary, 'bold'),
      FlexMessageDesignSystem.createSeparator('small'),
      FlexMessageDesignSystem.createText(`${fileIcon} ${file.originalName}`, 'sm', FlexMessageDesignSystem.colors.textPrimary, 'bold'),
      FlexMessageDesignSystem.createText(`üì¶ ${fileSize} ‚Ä¢ üìÖ ${uploadDate}`, 'xs', FlexMessageDesignSystem.colors.textSecondary),
      FlexMessageDesignSystem.createText(`üë§ ${file.uploadedByUser?.displayName || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}`, 'xs', FlexMessageDesignSystem.colors.textSecondary),
      ...(file.tags && file.tags.length > 0 ? [
        FlexMessageDesignSystem.createSeparator('small'),
        FlexMessageDesignSystem.createText(`üè∑Ô∏è ${file.tags.map((tag: string) => `#${tag}`).join(' ')}`, 'xs', FlexMessageDesignSystem.colors.textSecondary)
      ] : [])
    ];

    const buttons = [
      FlexMessageDesignSystem.createButton('‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î', 'uri', `${config.baseUrl}/api/files/${file.id}/download`, 'primary'),
      ...(this.isPreviewable(file.mimeType) ? [
        FlexMessageDesignSystem.createButton('‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á', 'uri', `${config.baseUrl}/api/files/${file.id}/preview`, 'secondary')
      ] : [])
    ];

    return FlexMessageDesignSystem.createStandardTaskCard(
      'üìé ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö',
      'üìé',
      FlexMessageDesignSystem.colors.info,
      content,
      buttons,
      'compact'
    );
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô
   */
  static createTaskFilesCard(task: any, files: any[], group: any): FlexMessage {
    if (!files || files.length === 0) {
      return FlexMessageDesignSystem.createStandardTaskCard(
        'üìé ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö',
        'üìé',
        FlexMessageDesignSystem.colors.info,
        [
          FlexMessageDesignSystem.createText('üìé ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô', 'md', FlexMessageDesignSystem.colors.textPrimary, 'bold'),
          FlexMessageDesignSystem.createText(`üìã ${task.title}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
          FlexMessageDesignSystem.createSeparator('small'),
          FlexMessageDesignSystem.createText('‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö', 'sm', FlexMessageDesignSystem.colors.textSecondary)
        ],
        [
          FlexMessageDesignSystem.createButton('‡∏î‡∏π‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö', 'uri', `${config.baseUrl}/dashboard?groupId=${group.id}&taskId=${task.id}#files`, 'secondary')
        ],
        'compact'
      );
    }

    const content = [
      FlexMessageDesignSystem.createText('üìé ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô', 'md', FlexMessageDesignSystem.colors.textPrimary, 'bold'),
      FlexMessageDesignSystem.createText(`üìã ${task.title}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      FlexMessageDesignSystem.createSeparator('small'),
      FlexMessageDesignSystem.createText(`üìé ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö: ${files.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`, 'sm', FlexMessageDesignSystem.colors.textPrimary, 'bold'),
      ...files.slice(0, 3).map(file => [
        FlexMessageDesignSystem.createSeparator('small'),
        FlexMessageDesignSystem.createText(`${this.getFileIcon(file.mimeType)} ${file.originalName}`, 'xs', FlexMessageDesignSystem.colors.textPrimary),
        FlexMessageDesignSystem.createText(`üì¶ ${this.formatFileSize(file.size)} ‚Ä¢ üë§ ${file.uploadedByUser?.displayName || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}`, 'xs', FlexMessageDesignSystem.colors.textSecondary)
      ]).flat(),
      ...(files.length > 3 ? [
        FlexMessageDesignSystem.createSeparator('small'),
        FlexMessageDesignSystem.createText(`‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${files.length - 3} ‡πÑ‡∏ü‡∏•‡πå...`, 'xs', FlexMessageDesignSystem.colors.textSecondary)
      ] : [])
    ];

    const buttons = [
      FlexMessageDesignSystem.createButton('‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö', 'uri', `${config.baseUrl}/dashboard?groupId=${group.id}&taskId=${task.id}#files`, 'primary'),
      ...(files.length === 1 ? [
        FlexMessageDesignSystem.createButton('‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î', 'uri', `${config.baseUrl}/api/files/${files[0].id}/download`, 'secondary')
      ] : [])
    ];

    return FlexMessageDesignSystem.createStandardTaskCard(
      'üìé ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö',
      'üìé',
      FlexMessageDesignSystem.colors.info,
      content,
      buttons,
      'compact'
    );
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏ü‡∏•‡πå
   */
  static createSubmitConfirmationCard(task: any, group: any, fileCount: number, fileNames: string[]): FlexMessage {
    const content = [
      FlexMessageDesignSystem.createText('‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô', 'md', FlexMessageDesignSystem.colors.success, 'bold'),
      FlexMessageDesignSystem.createText(`üìã ${task.title}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      FlexMessageDesignSystem.createSeparator('small'),
      FlexMessageDesignSystem.createText(`üìé ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ô‡∏ö: ${fileCount} ‡πÑ‡∏ü‡∏•‡πå`, 'sm', FlexMessageDesignSystem.colors.textPrimary, 'bold'),
      ...(fileNames.length > 0 ? [
        FlexMessageDesignSystem.createSeparator('small'),
        ...fileNames.map(fileName => 
          FlexMessageDesignSystem.createText(`‚Ä¢ ${fileName}`, 'xs', FlexMessageDesignSystem.colors.textSecondary)
        )
      ] : []),
      FlexMessageDesignSystem.createSeparator('small'),
      FlexMessageDesignSystem.createText('‡∏Å‡∏î "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏ü‡∏•‡πå', 'sm', FlexMessageDesignSystem.colors.textSecondary)
    ];

    const buttons = [
      FlexMessageDesignSystem.createButton('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô', 'postback', `action=confirm_submit&taskId=${task.id}`, 'primary'),
      FlexMessageDesignSystem.createButton('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', 'postback', `action=submit_cancel&taskId=${task.id}`, 'secondary')
    ];

    return FlexMessageDesignSystem.createStandardTaskCard(
      'üì§ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô',
      'üì§',
      FlexMessageDesignSystem.colors.success,
      content,
      buttons,
      'compact'
    );
  }

  // Helper methods
  private static calculateCompletionScore(task: any): number {
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô
    let score = 100;
    
    if (task.status === 'completed') {
      const dueTime = moment(task.dueTime);
      const completedTime = moment(task.completedAt);
      
      if (completedTime.isAfter(dueTime)) {
        const hoursLate = completedTime.diff(dueTime, 'hours');
        score = Math.max(60, 100 - (hoursLate * 2)); // ‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 2 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô
      }
    }
    
    return Math.round(score);
  }

  private static getCompletionStatusEmoji(task: any): string {
    const score = this.calculateCompletionScore(task);
    if (score >= 90) return 'üèÜ';
    if (score >= 70) return 'üëç';
    return '‚ö†Ô∏è';
  }

  private static getCompletionStatusText(task: any): string {
    const score = this.calculateCompletionScore(task);
    if (score >= 90) return '‡∏á‡∏≤‡∏ô‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö';
    if (score >= 70) return '‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î';
    return '‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ä‡πâ‡∏≤';
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  private static isPreviewable(mimeType: string): boolean {
    const previewableMimes = [
      'image/jpeg', 'image/png', 'image/gif', 'image/webp',
      'application/pdf', 'text/plain'
    ];
    return previewableMimes.includes(mimeType);
  }

  /**
   * ‡πÑ‡∏î‡πâ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏° MIME type
   */
  private static getFileIcon(mimeType: string): string {
    if (mimeType.startsWith('image/')) return 'üñºÔ∏è';
    if (mimeType.startsWith('video/')) return 'üé•';
    if (mimeType.startsWith('audio/')) return 'üéµ';
    if (mimeType.includes('pdf')) return 'üìÑ';
    if (mimeType.includes('word')) return 'üìù';
    if (mimeType.includes('excel') || mimeType.includes('spreadsheet')) return 'üìä';
    if (mimeType.includes('powerpoint') || mimeType.includes('presentation')) return 'üìΩÔ∏è';
    if (mimeType.includes('zip') || mimeType.includes('rar')) return 'üì¶';
    return 'üìé';
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
   */
  private static formatFileSize(bytes: number): string {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
}
