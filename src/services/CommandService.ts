// Command Service - ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó

import { BotCommand, Task } from '@/types';
import { TaskService } from './TaskService';
import { UserService } from './UserService';
import { FileService } from './FileService';
import { LineService } from './LineService';
import { config } from '@/utils/config';
import moment from 'moment-timezone';

export class CommandService {
  private taskService: TaskService;
  private userService: UserService;
  private fileService: FileService;
  private lineService: LineService;

  constructor() {
    this.taskService = new TaskService();
    this.userService = new UserService();
    this.fileService = new FileService();
    this.lineService = new LineService();
  }

  /**
   * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å
   */
  public async executeCommand(command: BotCommand): Promise<string | any> {
    try {
      console.log('ü§ñ Executing command:', command.command, command.args);

      switch (command.command) {
        case '/setup':
          return await this.handleSetupCommand(command);

        case '/help':
          return this.getHelpMessage();

        case '/task':
          return await this.handleTaskCommand(command);

        // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡πÇ‡∏ü‡∏•‡∏ß‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏≤‡∏ô/‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÅ‡∏ä‡∏ó‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        case '/submit':
          return await this.handleSubmitCommand(command);
        case '/approve':
          return await this.handleApproveCommand(command);
        case '/reject':
          return await this.handleRejectCommand(command);

        case '/files':
          return await this.handleFilesCommand(command);

        case '/whoami':
          return await this.handleWhoAmICommand(command);

        case '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô':
        case 'add':
          return await this.handleAddTaskCommand(command);

        default:
          return `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "${command.command}" ‡∏Ñ‡πà‡∏∞\n‡∏û‡∏¥‡∏°‡∏û‡πå "@‡πÄ‡∏•‡∏Ç‡∏≤ /help" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î`;
      }

    } catch (error) {
      console.error('‚ùå Error executing command:', error);
      return '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
    }
  }

  /**
   * ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /setup - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ Dashboard
   */
  private async handleSetupCommand(command: BotCommand): Promise<string> {
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå Dashboard (‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ)
      const dashboardUrl = `${config.baseUrl}/dashboard?groupId=${command.groupId}`;

      return `üîß Dashboard ‡πÄ‡∏•‡∏Ç‡∏≤‡∏ö‡∏≠‡∏ó

üìä ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ Dashboard:
${dashboardUrl}

üéØ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:
‚Ä¢ üìÖ ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô
‚Ä¢ üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô
‚Ä¢ üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
‚Ä¢ üèÜ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞ Leaderboard
‚Ä¢ ‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°`;

    } catch (error) {
      console.error('‚ùå Error in setup command:', error);
      return '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå Dashboard ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà';
    }
  }

  /**
   * ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /help - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  private getHelpMessage(): string {
    return `üìñ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏•‡∏Ç‡∏≤‡∏ö‡∏≠‡∏ó

üîß **‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤**
‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å‡∏ö‡∏≠‡∏ó /setup - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ Dashboard
‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å‡∏ö‡∏≠‡∏ó /whoami - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô

üìã **‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô**
‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å‡∏ö‡∏≠‡∏ó ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô "‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô" @‡∏Ñ‡∏ô1 @‡∏Ñ‡∏ô2 @me due dd/mm hh:mm
‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å‡∏ö‡∏≠‡∏ó /task add "‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô" @‡∏Ñ‡∏ô @me due dd/mm hh:mm
‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å‡∏ö‡∏≠‡∏ó /task list - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô
‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å‡∏ö‡∏≠‡∏ó /task mine - ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å‡∏ö‡∏≠‡∏ó /task done <‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô> - ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô
‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å‡∏ö‡∏≠‡∏ó /task move <‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô> <‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà> - ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏á‡∏≤‡∏ô

üìÅ **‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå**
‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å‡∏ö‡∏≠‡∏ó /files list - ‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å‡∏ö‡∏≠‡∏ó /files search <‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô> - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå

üéØ **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**
‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å‡∏ö‡∏≠‡∏ó‡∏à‡∏£‡∏¥‡∏á: ‡πÅ‡∏ó‡πá‡∏Å‡πÉ‡∏ô‡πÅ‡∏ä‡∏ï LINE ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: @‡πÄ‡∏•‡∏Ç‡∏≤ <‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á>
‚Ä¢ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á: /<‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á> (‡∏ö‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á)

üë• **‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö**
‚Ä¢ @me - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö
‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å - ‡πÅ‡∏ó‡πá‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
‚Ä¢ @‡∏ä‡∏∑‡πà‡∏≠ - ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å

üí° **‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö**
- ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
- ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡πá‡∏Å (#‡πÅ‡∏ó‡πá‡∏Å) ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
- ‡∏î‡∏π‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà: ${config.baseUrl}/dashboard?groupId=<ID_‡∏Å‡∏•‡∏∏‡πà‡∏°>`;
  }

  /**
   * ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /task - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô
   */
  private async handleTaskCommand(command: BotCommand): Promise<string | any> {
    const [subCommand, ...args] = command.args;

    switch (subCommand) {
      case 'list':
        return await this.listTasks(command, args);
      
      case 'mine':
        return await this.listMyTasks(command);
      
      case 'done':
        return await this.completeTask(command, args);
      
      case 'move':
        return await this.moveTask(command, args);
      
      case 'add':
        return await this.addTaskFromCommand(command, args);

      default:
        return '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡πà‡∏≠‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ: list, mine, done, move, add';
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô (‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå /submit <‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô> [‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏]
   * ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ô‡∏≥‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° (24 ‡∏ä‡∏°.) ‡πÑ‡∏õ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
   */
  private async handleSubmitCommand(command: BotCommand): Promise<string> {
    try {
      const [taskQuery, ...noteParts] = command.args;
      if (!taskQuery) return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô /submit abc123 ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏°.‡∏¢.';

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠
      const { tasks } = await this.taskService.searchTasks(command.groupId, taskQuery, { limit: 1 });
      if (tasks.length === 0) return `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô "${taskQuery}"`; 

      const task = tasks[0];

      // ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡πà‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (24 ‡∏ä‡∏°.)
      const since = new Date(Date.now() - 24 * 60 * 60 * 1000);
      const { files } = await this.fileService.getGroupFiles(command.groupId, {
        uploadedBy: command.userId,
        startDate: since,
        limit: 20
      } as any);

      if (!files || files.length === 0) {
        return '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå /submit ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
      }

      // ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 1-5 ‡πÑ‡∏ü‡∏•‡πå
      const fileIds = files.slice(0, 5).map(f => f.id);
      const note = noteParts.join(' ');

      await this.taskService.recordSubmission(task.id, command.userId, fileIds, note);
      return `üì• ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå ${fileIds.length} ‡πÑ‡∏ü‡∏•‡πå ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ "${task.title}" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞\n‡∏£‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2 ‡∏ß‡∏±‡∏ô`;
    } catch (error) {
      console.error('‚ùå submit error:', error);
      return '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà';
    }
  }

  /** ‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô */
  private async handleApproveCommand(command: BotCommand): Promise<string> {
    try {
      const [taskQuery] = command.args;
      if (!taskQuery) return '‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô /approve abc123';
      const { tasks } = await this.taskService.searchTasks(command.groupId, taskQuery, { limit: 1 });
      if (tasks.length === 0) return `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô "${taskQuery}"`;
      const task = tasks[0];

      try {
        await this.taskService.completeTask(task.id, command.userId);
      } catch (err: any) {
        return `‚ùå ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`;
      }
      return `‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô "${task.title}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`;
    } catch (error) {
      console.error('‚ùå approve error:', error);
      return '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô';
    }
  }

  /** ‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö‡∏á‡∏≤‡∏ô + ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà */
  private async handleRejectCommand(command: BotCommand): Promise<string> {
    try {
      if (command.args.length < 2) {
        return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‡πÉ‡∏ä‡πâ: /reject <‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô> <‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô 25/12 14:00> [‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô]';
      }
      const [taskQuery, ...rest] = command.args;
      const newDueText = rest.shift();
      const comment = rest.join(' ');

      const newDue = this.parseDateTime(newDueText!);
      if (!newDue) return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô 25/12 14:00';

      const { tasks } = await this.taskService.searchTasks(command.groupId, taskQuery, { limit: 1 });
      if (tasks.length === 0) return `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏á‡∏≤‡∏ô "${taskQuery}"`;
      const task = tasks[0];

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ reviewAction: 'revise'
      await this.taskService.updateTask(task.id, {
        dueTime: newDue,
        // ‡πÉ‡∏™‡πà‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å workflow
        ...( { reviewAction: 'revise', reviewerUserId: command.userId, reviewerComment: comment } as any )
      });

      return `‚ùå ‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö‡∏á‡∏≤‡∏ô "${task.title}" ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô ${moment(newDue).format('DD/MM/YYYY HH:mm')} ‡πÅ‡∏•‡πâ‡∏ß`;
    } catch (error) {
      console.error('‚ùå reject error:', error);
      return '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö‡∏á‡∏≤‡∏ô';
    }
  }

  /**
   * ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô
   */
  private async listTasks(command: BotCommand, args: string[]): Promise<string | any> {
    const filter = args[0] || 'all';
    const limit = 5; // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏™‡∏î‡∏á 5 ‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

    let startDate: Date | undefined;
    let endDate: Date | undefined;
    let status: Task['status'] | undefined;

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
    switch (filter) {
      case 'today':
      case '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ':
        startDate = moment().startOf('day').toDate();
        endDate = moment().endOf('day').toDate();
        break;
      
      case 'week':
      case '‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå':
        startDate = moment().startOf('week').toDate();
        endDate = moment().endOf('week').toDate();
        break;
      
      case 'pending':
      case '‡∏£‡∏≠':
        status = 'pending';
        break;
    }

    const { tasks } = await this.taskService.getGroupTasks(command.groupId, {
      startDate,
      endDate,
      status,
      limit
    });

    if (tasks.length === 0) {
      return '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ñ‡πà‡∏∞ ‚ú®';
    }

    let response = `üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô (${filter})\n\n`;
    
    tasks.forEach((task, index) => {
      const dueDate = moment(task.dueTime).format('DD/MM HH:mm');
      const statusIcon = {
        pending: '‚è≥',
        in_progress: 'üîÑ',
        completed: '‚úÖ',
        cancelled: '‚ùå',
        overdue: '‚ö†Ô∏è'
      }[task.status];

      const assigneeNames = task.assignedUsers?.map(u => u.displayName).join(', ') || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';

      response += `${index + 1}. ${statusIcon} ${task.title}
üìÖ ${dueDate} | üë• ${assigneeNames}
`;
      
      if (task.tags && task.tags.length > 0) {
        response += `üè∑Ô∏è ${task.tags.map(tag => `#${tag}`).join(' ')}\n`;
      }
      
      response += '\n';
    });

    response += `üìä ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: ${config.baseUrl}/dashboard?groupId=${command.groupId}`;

    return response;
  }

  /**
   * ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
   */
  private async listMyTasks(command: BotCommand): Promise<string> {
    const { tasks } = await this.taskService.getGroupTasks(command.groupId, {
      assigneeId: command.userId,
      status: 'pending'
    });

    if (tasks.length === 0) {
      return '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏∞ üéâ';
    }

    let response = 'üìã ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô\n\n';
    
    tasks.forEach((task, index) => {
      const dueDate = moment(task.dueTime).format('DD/MM HH:mm');
      const priority = {
        high: 'üî•',
        medium: 'üìã',
        low: 'üìù'
      }[task.priority];

      response += `${index + 1}. ${priority} ${task.title}
üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${dueDate}
üÜî ‡∏£‡∏´‡∏±‡∏™: ${task.id.substring(0, 8)}

`;
    });

    return response;
  }

  /**
   * ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô
   */
  private async completeTask(command: BotCommand, args: string[]): Promise<string> {
    const taskQuery = args.join(' ');
    if (!taskQuery) {
      return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡∏Ñ‡πà‡∏∞\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: @‡πÄ‡∏•‡∏Ç‡∏≤ /task done abc123';
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠
    const { tasks } = await this.taskService.searchTasks(command.groupId, taskQuery, { limit: 1 });
    
    if (tasks.length === 0) {
      return `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô "${taskQuery}" ‡∏Ñ‡πà‡∏∞`;
    }

    const task = tasks[0];

    try {
      await this.taskService.completeTask(task.id, command.userId);
      return `‚úÖ ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô "${task.title}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\nüéâ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡πà‡∏∞!`;
    } catch (error) {
      return '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß';
    }
  }

  /**
   * ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏á‡∏≤‡∏ô
   */
  private async moveTask(command: BotCommand, args: string[]): Promise<string> {
    if (args.length < 2) {
      return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‡πÉ‡∏ä‡πâ: @‡πÄ‡∏•‡∏Ç‡∏≤ /task move <‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô> <‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà>';
    }

    const [taskQuery, ...dateArgs] = args;
    const newDateTime = this.parseDateTime(dateArgs.join(' '));

    if (!newDateTime) {
      return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 25/12 14:00 ‡∏´‡∏£‡∏∑‡∏≠ ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ 9:00';
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô
    const { tasks } = await this.taskService.searchTasks(command.groupId, taskQuery, { limit: 1 });
    
    if (tasks.length === 0) {
      return `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô "${taskQuery}" ‡∏Ñ‡πà‡∏∞`;
    }

    const task = tasks[0];

    try {
      await this.taskService.updateTask(task.id, { dueTime: newDateTime });
      const newDateStr = moment(newDateTime).format('DD/MM/YYYY HH:mm');
      return `üìÖ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏á‡∏≤‡∏ô "${task.title}" ‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${newDateStr} ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞`;
    } catch (error) {
      return '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå';
    }
  }

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /task add
   */
  private async addTaskFromCommand(command: BotCommand, args: string[]): Promise<string | any> {
    return await this.parseAndCreateTask(command, args.join(' '));
  }

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
   */
  private async handleAddTaskCommand(command: BotCommand): Promise<string | any> {
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô
    try {
      const newTaskUrl = `${config.baseUrl}/dashboard?groupId=${encodeURIComponent(command.groupId)}&action=new-task&userId=${encodeURIComponent(command.userId)}`;

      const flexMessage = {
        type: 'flex',
        altText: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°',
        contents: {
          type: 'bubble',
          header: {
            type: 'box',
            layout: 'vertical',
            contents: [
              {
                type: 'text',
                text: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà',
                weight: 'bold',
                size: 'lg',
                color: '#333333'
              }
            ]
          },
          body: {
            type: 'box',
            layout: 'vertical',
            spacing: 'sm',
            contents: [
              {
                type: 'text',
                text: '‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô (‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö ‡πÅ‡∏ó‡πá‡∏Å ‡∏Ø‡∏•‡∏Ø) ‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
                wrap: true,
                size: 'sm',
                color: '#666666'
              }
            ]
          },
          footer: {
            type: 'box',
            layout: 'vertical',
            spacing: 'sm',
            contents: [
              {
                type: 'button',
                style: 'primary',
                height: 'sm',
                action: {
                  type: 'uri',
                  label: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô',
                  uri: newTaskUrl
                }
              },
              {
                type: 'button',
                style: 'secondary',
                height: 'sm',
                action: {
                  type: 'uri',
                  label: '‡πÄ‡∏õ‡∏¥‡∏î Dashboard ‡∏Å‡∏•‡∏∏‡πà‡∏°',
                  uri: `${config.baseUrl}/dashboard?groupId=${encodeURIComponent(command.groupId)}`
                }
              }
            ]
          }
        }
      } as any;

      return flexMessage;
    } catch (error) {
      console.error('‚ùå Error generating add task card:', error);
      return '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà';
    }
  }

  /**
   * ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô
   */
  private async parseAndCreateTask(command: BotCommand, text: string): Promise<string | any> {
    try {
      console.log('üîç Parsing task from text:', text);
      console.log('üë• Mentions:', command.mentions);
      
      const parsed = this.parseTaskFromText(text, command.mentions);
      
      console.log('üìù Parsed result:', {
        title: parsed.title,
        dueTime: parsed.dueTime,
        startTime: parsed.startTime,
        assignees: parsed.assignees,
        priority: parsed.priority,
        tags: parsed.tags
      });
      
      if (!parsed.title) {
        console.log('‚ùå No title found');
        return '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÅ‡∏ó‡πá‡∏Å‡∏ö‡∏≠‡∏ó ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô "‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤" @‡∏ö‡∏≠‡∏• @me due 25/12 14:00';
      }

      if (!parsed.dueTime) {
        console.log('‚ùå No due time found');
        return `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ
        
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:
‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å‡∏ö‡∏≠‡∏ó ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô "‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô" @me due 25/12 14:00
‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å‡∏ö‡∏≠‡∏ó ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô "‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô" @me ‡πÄ‡∏£‡∏¥‡πà‡∏° 20/12 09:00 ‡∏ñ‡∏∂‡∏á 25/12 17:00

‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: "${text}"
‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ: title="${parsed.title}", startTime="${parsed.startTime}", dueTime="${parsed.dueTime}"`;
      }

      // ‡πÅ‡∏õ‡∏•‡∏á mentions ‡πÄ‡∏õ‡πá‡∏ô user IDs
      const assigneeIds = await this.resolveAssignees(command.groupId, parsed.assignees);
      
      if (assigneeIds.length === 0) {
        console.log('‚ùå No assignees found');
        return '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ó‡πá‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ @me ‡∏Ñ‡πà‡∏∞';
      }

      console.log('üë• Resolved assignee IDs:', assigneeIds);

      // ‡∏î‡∏∂‡∏á display names ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö
      const assigneeNames: string[] = [];
      for (const assigneeId of assigneeIds) {
        const user = await this.userService.findById(assigneeId);
        if (user) {
          assigneeNames.push(user.displayName);
        }
      }

      console.log('üë• Assignee display names:', assigneeNames);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô
      const task = await this.taskService.createTask({
        groupId: command.groupId,
        title: parsed.title,
        description: parsed.description,
        assigneeIds,
        createdBy: command.userId,
        dueTime: parsed.dueTime,
        startTime: parsed.startTime,
        priority: parsed.priority,
        tags: parsed.tags,
        customReminders: parsed.reminders
      });

      console.log('‚úÖ Task created:', task.id);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message
      const flexMessage = this.lineService.createTaskFlexMessage({
        id: task.id,
        title: task.title,
        description: task.description,
        dueTime: task.dueTime,
        assignees: assigneeNames, // ‡πÉ‡∏ä‡πâ display names ‡πÅ‡∏ó‡∏ô user IDs
        status: task.status,
        priority: task.priority,
        tags: task.tags
      });

      return flexMessage;

    } catch (error) {
      console.error('‚ùå Error creating task:', error);
      return '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà';
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå
   */
  private async handleFilesCommand(command: BotCommand): Promise<string> {
    const [subCommand, ...args] = command.args;

    switch (subCommand) {
      case 'list':
        return await this.listFiles(command, args);
      
      case 'search':
        return await this.searchFiles(command, args);
      
      default:
        return '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡πà‡∏≠‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ: list, search';
    }
  }

  /**
   * ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
   */
  private async listFiles(command: BotCommand, args: string[]): Promise<string> {
    const { files } = await this.fileService.getGroupFiles(command.groupId, { limit: 10 });

    if (files.length === 0) {
      return '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞\n‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÅ‡∏ä‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥';
    }

    let response = 'üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (10 ‡πÑ‡∏ü‡∏•‡πå)\n\n';
    
    files.forEach((file, index) => {
      const uploadDate = moment(file.uploadedAt).format('DD/MM HH:mm');
      const fileSize = this.formatFileSize(file.size);
      
      response += `${index + 1}. üìÑ ${file.originalName}
üìÖ ${uploadDate} | üì¶ ${fileSize}
üë§ ${file.uploadedByUser?.displayName || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}
`;
      
      if (file.tags.length > 0) {
        response += `üè∑Ô∏è ${file.tags.map(tag => `#${tag}`).join(' ')}\n`;
      }
      
      response += '\n';
    });

    response += `üìä ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: ${config.baseUrl}/dashboard?groupId=${command.groupId}#files`;

    return response;
  }

  /**
   * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå
   */
  private async searchFiles(command: BotCommand, args: string[]): Promise<string> {
    const query = args.join(' ');
    if (!query) {
      return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡πà‡∏∞\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: @‡πÄ‡∏•‡∏Ç‡∏≤ /files search ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û';
    }

    const { files } = await this.fileService.getGroupFiles(command.groupId, { 
      search: query, 
      limit: 5 
    });

    if (files.length === 0) {
      return `‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö "${query}" ‡∏Ñ‡πà‡∏∞`;
    }

    let response = `üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ "${query}"\n\n`;
    
    files.forEach((file, index) => {
      const uploadDate = moment(file.uploadedAt).format('DD/MM HH:mm');
      
      response += `${index + 1}. üìÑ ${file.originalName}
üìÖ ${uploadDate}
üîó ${this.fileService.generateDownloadUrl(file.id)}

`;
    });

    return response;
  }

  /**
   * ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /whoami - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
   */
  private async handleWhoAmICommand(command: BotCommand): Promise<string> {
    try {
      const user = await this.userService.findByLineUserId(command.userId);
      
      if (!user) {
        return '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°';
      }

      const groups = await this.userService.getUserGroups(user.id);
      const currentGroup = groups.find(g => g.lineGroupId === command.groupId);

      let response = `üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n\n`;
      response += `üì± ‡∏ä‡∏∑‡πà‡∏≠ LINE: ${user.displayName}\n`;
      
      if (user.realName) {
        response += `üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á: ${user.realName}\n`;
      }
      
      if (user.email) {
        response += `üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${user.email} ‚úÖ\n`;
      } else {
        response += `üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏¥‡∏á‡∏Å‡πå ‚ùå\n`;
      }

      response += `üåç ‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤: ${user.timezone}\n`;
      
      if (currentGroup) {
        response += `üëë ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ${currentGroup.role === 'admin' ? '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•' : '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å'}\n`;
      }

      if (!user.email) {
        const linkUrl = `${config.baseUrl}/liff/profile?userId=${user.id}`;
        response += `\nüîó ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà: ${linkUrl}`;
      }

      return response;

    } catch (error) {
      console.error('‚ùå Error in whoami command:', error);
      return '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
    }
  }

  // Helper Methods

  /**
   * ‡πÅ‡∏¢‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
   */
  private parseTaskFromText(text: string, mentions: string[]): {
    title?: string;
    description?: string;
    assignees: string[];
    dueTime?: Date;
    startTime?: Date;
    priority: 'low' | 'medium' | 'high';
    tags: string[];
    reminders?: string[];
  } {
    console.log('üîç parseTaskFromText input:', { text, mentions });
    
    const result: {
      title?: string;
      description?: string;
      assignees: string[];
      dueTime?: Date;
      startTime?: Date;
      priority: 'low' | 'medium' | 'high';
      tags: string[];
      reminders?: string[];
    } = {
      assignees: mentions,
      priority: 'medium' as const,
      tags: [] as string[]
    };

    // ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô (‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏û‡∏π‡∏î)
    const titleMatch = text.match(/["'"](.*?)["'"]/);
    if (titleMatch) {
      result.title = titleMatch[1];
      console.log('üìù Title found:', result.title);
    } else {
      console.log('‚ùå No title found in quotes');
      
      // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô - ‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô" ‡∏´‡∏£‡∏∑‡∏≠ "add" ‡πÅ‡∏ï‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ mention
      const altTitleMatch = text.match(/(?:‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô|add)\s+([^@]+?)(?:\s+@|\s+‡πÄ‡∏£‡∏¥‡πà‡∏°|\s+due|\s+‡∏ñ‡∏∂‡∏á|$)/i);
      if (altTitleMatch) {
        result.title = altTitleMatch[1].trim().replace(/^["']|["']$/g, '');
        console.log('üìù Alternative title found:', result.title);
      }
    }

    // ‡πÅ‡∏¢‡∏Å‡πÅ‡∏ó‡πá‡∏Å
    const tagMatches = text.match(/#(\w+)/g);
    if (tagMatches) {
      result.tags = tagMatches.map(tag => tag.substring(1));
    }

    // ‡πÅ‡∏¢‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "‡πÄ‡∏£‡∏¥‡πà‡∏° ... ‡∏ñ‡∏∂‡∏á ..." ‡πÅ‡∏•‡∏∞ "due ..."
    
    // ‡∏•‡∏≠‡∏á‡∏´‡∏≤ pattern "‡πÄ‡∏£‡∏¥‡πà‡∏° ... ‡∏ñ‡∏∂‡∏á ..." ‡∏Å‡πà‡∏≠‡∏ô
    const startEndPattern = /(?:‡πÄ‡∏£‡∏¥‡πà‡∏°|start)\s+([\d\/\-\s:]+?)\s+(?:‡∏ñ‡∏∂‡∏á|to|until)\s+([\d\/\-\s:]+?)(?:\s|$)/i;
    const startEndMatch = text.match(startEndPattern);
    
    if (startEndMatch) {
      const startTimeStr = startEndMatch[1]?.trim();
      const endTimeStr = startEndMatch[2]?.trim();
      
      console.log('üîç Found start-end pattern:', { startTimeStr, endTimeStr });
      
      if (startTimeStr) {
        result.startTime = this.parseDateTime(startTimeStr);
        console.log('üïê Parsed start time:', startTimeStr, '‚Üí', result.startTime);
      }
      
      if (endTimeStr) {
        result.dueTime = this.parseDateTime(endTimeStr);
        console.log('üïï Parsed end time:', endTimeStr, '‚Üí', result.dueTime);
      }
    } else {
      console.log('‚ùå No start-end pattern found, looking for due only');
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ pattern "‡πÄ‡∏£‡∏¥‡πà‡∏° ... ‡∏ñ‡∏∂‡∏á ..." ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏´‡∏≤ "due" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ñ‡∏∂‡∏á" ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      const duePattern = /(?:due|‡∏ñ‡∏∂‡∏á|‡∏Å‡∏≥‡∏´‡∏ô‡∏î)\s+([\d\/\-\s:]+?)(?:\s|$)/i;
      const dueMatch = text.match(duePattern);
      if (dueMatch) {
        result.dueTime = this.parseDateTime(dueMatch[1]);
        console.log('üìÖ Parsed due time:', dueMatch[1], '‚Üí', result.dueTime);
      }
      
      // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÅ‡∏Ñ‡πà "‡πÄ‡∏£‡∏¥‡πà‡∏°" ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      const startOnlyPattern = /(?:‡πÄ‡∏£‡∏¥‡πà‡∏°|start)\s+([\d\/\-\s:]+?)(?:\s+[^\d]|$)/i;
      const startOnlyMatch = text.match(startOnlyPattern);
      if (startOnlyMatch) {
        result.startTime = this.parseDateTime(startOnlyMatch[1]);
        console.log('üïê Parsed start time only:', startOnlyMatch[1], '‚Üí', result.startTime);
      }
    }

    // ‡πÅ‡∏¢‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    if (text.includes('‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç') || text.includes('‡∏î‡πà‡∏ß‡∏ô') || text.includes('high')) {
      result.priority = 'high';
    } else if (text.includes('low') || text.includes('‡πÑ‡∏°‡πà‡∏î‡πà‡∏ß‡∏ô')) {
      result.priority = 'low';
    }

    return result;
  }

  /**
   * ‡πÅ‡∏õ‡∏•‡∏á mentions ‡πÄ‡∏õ‡πá‡∏ô user IDs
   */
  private async resolveAssignees(groupId: string, mentions: string[]): Promise<string[]> {
    if (mentions.length === 0) return [];

    try {
      const resolvedUserIds: string[] = [];
      
      for (const mention of mentions) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô userId ‡∏à‡∏≤‡∏Å LINE mention ‡∏´‡∏£‡∏∑‡∏≠ @me ‡∏ï‡∏£‡∏á‡πÜ
        if (mention.startsWith('U') || mention.length > 10) {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô LINE userId ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          const user = await this.userService.findByLineUserId(mention);
          if (user) {
            resolvedUserIds.push(user.id);
          }
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô displayName ‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
          const groupMembers = await this.userService.getGroupMembers(groupId);
          const matchedUser = groupMembers.find(member => 
            member.displayName.toLowerCase().includes(mention.toLowerCase()) ||
            member.realName?.toLowerCase().includes(mention.toLowerCase())
          );
          
          if (matchedUser) {
            resolvedUserIds.push(matchedUser.id);
          }
        }
      }
      
      return resolvedUserIds;
    } catch (error) {
      console.error('‚ùå Error resolving assignees:', error);
      return [];
    }
  }

  /**
   * ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
   */
  private parseDateTime(dateStr: string): Date | undefined {
    try {
      console.log('üìÖ Parsing datetime:', dateStr);
      const now = moment().tz(config.app.defaultTimezone);
      
      // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
      const formats = [
        'DD/MM/YYYY HH:mm',
        'DD/MM HH:mm',
        'DD/MM/YY HH:mm',
        'DD/MM/YYYY',
        'DD/MM',
        'YYYY-MM-DD HH:mm',
        'YYYY-MM-DD',
        'DD-MM-YYYY HH:mm',
        'DD-MM-YYYY',
        'DD-MM HH:mm',
        'DD-MM',
        'HH:mm'
      ];

      // ‡∏Ñ‡∏≥‡∏û‡∏¥‡πÄ‡∏®‡∏©
      const specialDates: { [key: string]: moment.Moment } = {
        '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ': now.clone(),
        '‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ': now.clone().add(1, 'day'),
        '‡∏°‡∏∞‡∏£‡∏∑‡∏ô‡∏ô‡∏µ‡πâ': now.clone().add(2, 'days'),
        '‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏´‡∏ô‡πâ‡∏≤': now.clone().add(1, 'week'),
        '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤': now.clone().add(1, 'month')
      };

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏û‡∏¥‡πÄ‡∏®‡∏©
      for (const [key, date] of Object.entries(specialDates)) {
        if (dateStr.includes(key)) {
          const timeMatch = dateStr.match(/(\d{1,2}):(\d{2})/);
          if (timeMatch) {
            date.hour(parseInt(timeMatch[1])).minute(parseInt(timeMatch[2]));
          } else {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ ‡πÉ‡∏ä‡πâ 09:00
            date.hour(9).minute(0);
          }
          console.log(`  Special date result: ${date.toDate()} (${config.app.defaultTimezone})`);
          return date.toDate();
        }
      }

      // ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
      for (const format of formats) {
        const parsed = moment.tz(dateStr, format, config.app.defaultTimezone);
        console.log(`  Testing format "${format}":`, parsed.isValid() ? 'Valid' : 'Invalid');
        
        if (parsed.isValid()) {
          console.log(`  ‚úÖ Successfully parsed with format "${format}"`);
          
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏µ ‡πÉ‡∏ä‡πâ‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          if (!format.includes('Y')) {
            parsed.year(now.year());
            console.log(`  Added current year: ${now.year()}`);
          }
          
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤ ‡πÉ‡∏ä‡πâ 09:00
          if (!format.includes('H')) {
            parsed.hour(9).minute(0);
            console.log(`  Added default time: 09:00`);
          }

          const result = parsed.toDate();
          console.log(`  Final result: ${result} (${config.app.defaultTimezone})`);
          return result;
        }
      }

      return undefined;
    } catch (error) {
      console.error('‚ùå Error parsing date:', error);
      return undefined;
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
   */
  private formatFileSize(bytes: number): string {
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    if (bytes === 0) return '0 Bytes';
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
  }
}