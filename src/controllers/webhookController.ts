// Webhook Controller - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Webhook ‡∏à‡∏≤‡∏Å LINE

import { Router, Request, Response } from 'express';
import { WebhookEvent, MessageEvent, PostbackEvent, ImageMessage, VideoMessage, AudioMessage } from '@line/bot-sdk';
import { LineService } from '@/services/LineService';
import { TaskService } from '@/services/TaskService';
import { UserService } from '@/services/UserService';
import { FileService } from '@/services/FileService';
import { NotificationService } from '@/services/NotificationService';
import { FlexMessageDesignSystem } from '@/services/FlexMessageDesignSystem';
import { FlexMessageTemplateService } from '@/services/FlexMessageTemplateService';
import { CommandService } from '@/services/CommandService';
import { config } from '@/utils/config';
import { serviceContainer } from '@/utils/serviceContainer';
import { logger } from '@/utils/logger';
import { formatFileSize } from '@/utils/common';
import moment from 'moment-timezone';

export const webhookRouter = Router();

class WebhookController {
  private lineService: LineService;
  private taskService: TaskService;
  private userService: UserService;
  private fileService: FileService;
  private notificationService: NotificationService;
  private commandService: CommandService;

  constructor() {
    this.lineService = serviceContainer.get<LineService>('LineService');
    this.taskService = serviceContainer.get<TaskService>('TaskService');
    this.userService = serviceContainer.get<UserService>('UserService');
    this.fileService = serviceContainer.get<FileService>('FileService');
    this.notificationService = serviceContainer.get<NotificationService>('NotificationService');
    this.commandService = serviceContainer.get<CommandService>('CommandService');
  }



  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Webhook Event ‡∏à‡∏≤‡∏Å LINE
   */
  public async handleWebhook(req: Request, res: Response): Promise<void> {
    try {
      const signature = req.get('X-Line-Signature');
      if (!signature) {
        res.status(400).json({ error: 'Missing signature' });
        return;
      }

      // parse raw body (express.raw) ‚Üí text ‚Üí validate signature ‚Üí JSON.parse
      const rawBodyBuffer = (req as any).body as Buffer;
      const body = rawBodyBuffer ? rawBodyBuffer.toString('utf8') : JSON.stringify(req.body || {});
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö signature
      if (!this.lineService.validateSignature(body, signature)) {
        res.status(401).json({ error: 'Invalid signature' });
        return;
      }
      const parsed = body ? JSON.parse(body) : {};
      const events: WebhookEvent[] = parsed.events || [];
      
      // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• events ‡πÅ‡∏ö‡∏ö parallel
      await Promise.all(events.map(event => this.processEvent(event)));
      
      res.status(200).json({ message: 'OK' });

    } catch (error) {
      logger.error('Webhook error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  /**
   * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Event ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
   */
  private async processEvent(event: WebhookEvent): Promise<void> {
    try {
      logger.info('Processing event:', { type: event.type, source: event.source });

      switch (event.type) {
        case 'message':
          await this.handleMessageEvent(event as MessageEvent);
          break;
          
        case 'postback':
          await this.handlePostbackEvent(event as PostbackEvent);
          break;
          
        case 'join':
          await this.handleJoinEvent(event);
          break;
          
        case 'leave':
          await this.handleLeaveEvent(event);
          break;
          
        case 'memberJoined':
          await this.handleMemberJoinedEvent(event);
          break;
          
        case 'memberLeft':
          await this.handleMemberLeftEvent(event);
          break;

        default:
          logger.info('Unhandled event type:', { type: event.type });
      }

    } catch (error) {
      logger.error('Error processing event:', error);
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
   */
  private async handleMessageEvent(event: MessageEvent): Promise<void> {
    const { message, source, replyToken } = event;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á source
    if (source.type === 'group') {
      // ‡πÅ‡∏ä‡∏ó‡∏Å‡∏•‡∏∏‡πà‡∏°
      const groupId = source.groupId!;
      const userId = source.userId!;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á user/group record ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
      await this.ensureUserAndGroup(userId, groupId);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      await this.checkAndSaveNewMemberFromMessage(groupId, userId);
    } else if (source.type === 'user') {
      // ‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
      const userId = source.userId!;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á user record ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
      await this.ensureUserExists(userId);
    } else {
      // ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö source type ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
      console.log('‚ö†Ô∏è Unsupported source type:', source.type);
      return;
    }

    switch (message.type) {
      case 'text':
        await this.handleTextMessage(event, message.text);
        break;
        
      case 'image':
      case 'video':
      case 'audio':
      case 'file':
        await this.handleFileMessage(event, message as any);
        break;
        
      default:
        console.log('‚ÑπÔ∏è Unhandled message type:', message.type);
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
   */
  private async handleTextMessage(event: MessageEvent, text: string): Promise<void> {
    const { source, replyToken } = event;
    
    console.log('üìù Processing text message:', text);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á source
    if (source.type === 'user') {
      const userId = source.userId!;
      const trimmedText = text.trim();
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
      if (trimmedText === '‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô') {
        try {
          const user = await this.userService.findByLineUserId(userId);
          if (user) {
            // ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            const allTasks = await this.taskService.getUserTasks(user.id, ['pending', 'in_progress', 'overdue']);
            
            if (allTasks.length > 0) {
              // ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (24 ‡∏ä‡∏°.) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î
              const personalGroupId = user.id;
              const since = new Date(Date.now() - 24 * 60 * 60 * 1000);
              const { files } = await this.fileService.getGroupFiles(personalGroupId, { startDate: since });
              
              // ‡πÅ‡∏¢‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
              const pendingTasks = allTasks.filter(task => task.status === 'pending');
              const inProgressTasks = allTasks.filter(task => task.status === 'in_progress');
              const overdueTasks = allTasks.filter(task => task.status === 'overdue');
              
              // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
              const allTasksCard = FlexMessageTemplateService.createAllPersonalTasksCard(allTasks, files, user, overdueTasks);
              const guideText =
                'üí° **‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô (‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà):**\n\n' +
                '‚ú® **‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô:**\n' +
                '1. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô"\n' +
                '2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö\n' +
                '3. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏\n' +
                '4. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö\n\n' +
                'üìé **‡∏Ç‡πâ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö:**\n' +
                '‚Ä¢ ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°\n' +
                '‚Ä¢ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô\n' +
                '‚Ä¢ ‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÑ‡∏î‡πâ‡∏¢‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î\n\n' +
                '‚ö†Ô∏è **‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ ‚ö†Ô∏è**';

              await this.lineService.replyMessage(replyToken!, [allTasksCard, guideText]);
            } else {
              await this.lineService.replyMessage(replyToken!, '‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞');
            }
          }
        } catch (err: any) {
          await this.safeReplyError(replyToken!, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
        }
        return;
      } else if (trimmedText === '‡∏á‡∏≤‡∏ô') {
                await this.handlePersonalTaskRequest(event);
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á Flow ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô
      if (trimmedText === 'flow' || trimmedText === 'Flow' || trimmedText === 'FLOW') {
        try {
          const user = await this.userService.findByLineUserId(userId);
          if (user) {
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î Flow ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            const flowCard = FlexMessageTemplateService.createTaskSubmissionFlowCard(user);
            await this.lineService.replyMessage(replyToken!, flowCard);
          }
        } catch (err: any) {
          await this.safeReplyError(replyToken!, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á Flow ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
        }
        return;
      }
    }
    
    // ‡πÅ‡∏¢‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    const command = this.lineService.parseCommand(text, event);
    
    if (command) {
      // ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ö‡∏≠‡∏ó
      console.log('‚úÖ Command detected, executing:', command.command);
      try {
        const response = await this.commandService.executeCommand(command);
        
        if (response) {
          // ‡πÄ‡∏û‡∏¥‡πà‡∏° logging ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response
          console.log('üì§ Command response type:', typeof response);
          if (typeof response !== 'string') {
            console.log('üé¥ Response is Flex Message:', {
              type: response.type,
              altText: response.altText
            });
          } else {
            console.log('üìù Response is Text Message:', response.substring(0, 100) + '...');
          }
          
          await this.lineService.replyMessage(replyToken!, response);
          console.log('üì§ Bot response sent');
        } else {
          console.log('‚ö†Ô∏è No response from command service');
        }
      } catch (error) {
        console.error('‚ùå Error executing command:', error);
        await this.safeReplyError(replyToken!, 
          '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      }
    } else {
      // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ö‡∏≠‡∏ó - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      console.log('‚ùå Not a bot command');
      
      // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡∏ö‡∏≠‡∏ó‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏ó‡πá‡∏Å)
      if (text.toLowerCase().includes('‡πÄ‡∏•‡∏Ç‡∏≤') && 
          !text.includes('@‡πÄ‡∏•‡∏Ç‡∏≤') && 
          (text.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') || text.includes('hello') || text.includes('hi'))) {
        // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
        const helpText = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç‡∏≤‡∏ö‡∏≠‡∏ó‡∏Ñ‡πà‡∏∞ ü§ñ

üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
‚Ä¢ ‡πÅ‡∏ó‡πá‡∏Å‡∏ö‡∏≠‡∏ó‡πÉ‡∏ô LINE ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
‚Ä¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå @‡πÄ‡∏•‡∏Ç‡∏≤ <‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á>
‚Ä¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå /<‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á>

üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ‡πÅ‡∏ó‡πá‡∏Å‡∏ö‡∏≠‡∏ó /help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î`;

        await this.lineService.replyMessage(replyToken!, helpText);
      }
      // ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
   */
  private async handleFileMessage(event: MessageEvent, message: ImageMessage | VideoMessage | AudioMessage | any): Promise<void> {
    const { source, replyToken } = event;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á source
    if (source.type === 'user') {
      // ‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
      const userId = source.userId!;
      
      try {
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
        const savedFile = await this.fileService.saveFileFromLine(message, userId, 'personal_chat');
        
        if (savedFile) {
          // ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (24 ‡∏ä‡∏°.)
          const user = await this.userService.findByLineUserId(userId);
          if (user) {
            const personalGroupId = user.id; // ‡πÉ‡∏ä‡πâ user ID ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÄ‡∏õ‡πá‡∏ô UUID ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
            const since = new Date(Date.now() - 24 * 60 * 60 * 1000);
            const { files } = await this.fileService.getGroupFiles(personalGroupId, { startDate: since });
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
            const fileListCard = FlexMessageTemplateService.createPersonalFileListCard(files, user, undefined);
            await this.lineService.replyMessage(replyToken!, fileListCard);
            
            logger.info('File saved and file list shown:', {
              fileId: savedFile.id,
              fileName: savedFile.originalName,
              totalFiles: files.length,
              userId: userId
            });
          }
        }
      } catch (error) {
        logger.error('Error saving file in personal chat:', error);
        await this.lineService.replyMessage(replyToken!, 
          '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
        );
      }
    } else if (source.type === 'group') {
      // ‡πÅ‡∏ä‡∏ó‡∏Å‡∏•‡∏∏‡πà‡∏° - ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      logger.info('File message received in group chat but ignored (auto-save disabled)', {
        messageId: (message as any).id,
        messageType: message.type,
        fileName: (message as any).fileName || 'unknown',
        groupId: source.groupId
      });
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Postback Event (‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ)
   */
  private async handlePostbackEvent(event: PostbackEvent): Promise<void> {
    const { replyToken, source } = event;
    const data = (event as any).postback?.data;
    const groupId = source.type === 'group' ? source.groupId! : '';
    const userId = source.userId!;

    try {
      const params = new URLSearchParams(data);
      const action = params.get('action');

      switch (action) {
        case 'complete':
        case 'complete_task':
          const taskId = params.get('taskId');
          if (taskId) {
            try {
              // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö requireAttachment
              const task = await this.taskService.getTaskById(taskId);
              
              if (!task) {
                await this.safeReplyError(replyToken, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
                return;
              }
              
              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
              if (task.requireAttachment) {
                // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô
                let groupIdToUse = groupId;
                let groupName = '‡∏Å‡∏•‡∏∏‡πà‡∏°';
                if (source.type === 'user') {
                  const user = await this.userService.findByLineUserId(userId);
                  if (user) {
                    groupIdToUse = user.id; // ‡πÉ‡∏ä‡πâ user ID ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÄ‡∏õ‡πá‡∏ô UUID ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
                    groupName = '‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß';
                  }
                }
                
                const group = { id: groupIdToUse, lineGroupId: groupIdToUse, name: groupName };
                const assignee = await this.userService.findByLineUserId(userId);
                
                const fileAttachmentCard = FlexMessageTemplateService.createFileAttachmentCard(task, group, assignee);
                await this.lineService.replyMessage(replyToken, fileAttachmentCard);
              } else {
                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                const submittedTask = await this.taskService.recordSubmission(taskId, userId, [], '‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à');
                await this.lineService.replyMessage(replyToken, '‚úÖ ‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2 ‡∏ß‡∏±‡∏ô');
              }
            } catch (err: any) {
              await this.safeReplyError(replyToken, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
            }
          }
          break;

        case 'submit_confirm': {
          const taskId = params.get('taskId')!;
          const fileIds = params.get('fileIds')?.split(',').filter(Boolean) || [];
          const note = params.get('note') || '';
          try {
            // ‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (24 ‡∏ä‡∏°.) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ fileIds
            let finalFileIds = fileIds;
                         if (source.type === 'user' && fileIds.length === 0) {
               const user = await this.userService.findByLineUserId(userId);
               if (user) {
                 const personalGroupId = user.id; // ‡πÉ‡∏ä‡πâ user ID ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÄ‡∏õ‡πá‡∏ô UUID ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
                 const since = new Date(Date.now() - 24 * 60 * 60 * 1000);
                 try {
                   const result = await this.fileService.getGroupFiles(personalGroupId, { startDate: since });
                   finalFileIds = result.files?.map((f: any) => f.id) || [];
                 } catch (error) {
                   console.warn('Could not get personal chat files:', error);
                 }
               }
             }
            
            const task = await this.taskService.recordSubmission(taskId, userId, finalFileIds, note);
            await this.lineService.replyMessage(replyToken, `‚úÖ ‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô "${task.title}" ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö ${finalFileIds.length} ‡πÑ‡∏ü‡∏•‡πå ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞`);
          } catch (err: any) {
            await this.safeReplyError(replyToken, `‚ùå ‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
          }
          break;
        }

        case 'submit_nofile': {
          const taskId = params.get('taskId')!;
          const note = params.get('note') || '';
          try {
            // ‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (24 ‡∏ä‡∏°.) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ô‡∏ö
            let fileIds: string[] = [];
                         if (source.type === 'user') {
               const user = await this.userService.findByLineUserId(userId);
               if (user) {
                 const personalGroupId = user.id; // ‡πÉ‡∏ä‡πâ user ID ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÄ‡∏õ‡πá‡∏ô UUID ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
                 const since = new Date(Date.now() - 24 * 60 * 60 * 1000);
                 try {
                   const result = await this.fileService.getGroupFiles(personalGroupId, { startDate: since });
                   fileIds = result.files?.map((f: any) => f.id) || [];
                 } catch (error) {
                   console.warn('Could not get personal chat files:', error);
                 }
               }
             }
            
            const task = await this.taskService.recordSubmission(taskId, userId, fileIds, note);
            if (fileIds.length > 0) {
              await this.lineService.replyMessage(replyToken, `üì• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô "${task.title}" ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö ${fileIds.length} ‡πÑ‡∏ü‡∏•‡πå ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞`);
            } else {
              await this.lineService.replyMessage(replyToken, `üì• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö) ‡πÉ‡∏´‡πâ "${task.title}" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞`);
            }
          } catch (err: any) {
            await this.safeReplyError(replyToken, `‚ùå ‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
          }
          break;
        }

        case 'submit_cancel': {
          await this.lineService.replyMessage(replyToken, 
            '‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n\n' +
            'üí° **‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ:**\n' +
            '‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà\n' +
            '‚Ä¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n' +
            '‚Ä¢ ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô'
          );
          break;
        }

        case 'submit_with_files': {
          const taskId = params.get('taskId')!;
          try {
            // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå
            const task = await this.taskService.getTaskById(taskId);
            
            // ‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ personal chat group
            let groupIdToUse = groupId;
            let groupName = '‡∏Å‡∏•‡∏∏‡πà‡∏°';
                           if (source.type === 'user') {
                 const user = await this.userService.findByLineUserId(userId);
                 if (user) {
                   groupIdToUse = user.id; // ‡πÉ‡∏ä‡πâ user ID ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÄ‡∏õ‡πá‡∏ô UUID ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
                   groupName = '‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß';
                 }
               }
            
            const group = { id: groupIdToUse, lineGroupId: groupIdToUse, name: groupName };
            const assignee = await this.userService.findByLineUserId(userId);
            
            const fileAttachmentCard = FlexMessageTemplateService.createFileAttachmentCard(task, group, assignee);
            await this.lineService.replyMessage(replyToken, fileAttachmentCard);
          } catch (err: any) {
            await this.safeReplyError(replyToken, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
          }
          break;
        }

        case 'confirm_submit': {
          const taskId = params.get('taskId')!;
          try {
            // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô
            const task = await this.taskService.getTaskById(taskId);
            
            // ‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å personal chat ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            let files: any[] = [];
            if (source.type === 'user') {
              // ‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß - ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å personal chat
              const user = await this.userService.findByLineUserId(userId);
                           if (user) {
               const personalGroupId = user.id; // ‡πÉ‡∏ä‡πâ user ID ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÄ‡∏õ‡πá‡∏ô UUID ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
               const since = new Date(Date.now() - 24 * 60 * 60 * 1000);
               try {
                 const result = await this.fileService.getGroupFiles(personalGroupId, { startDate: since });
                 files = result.files || [];
               } catch (error) {
                 console.warn('Could not get personal chat files:', error);
                 files = [];
               }
             }
            } else {
              // ‡πÅ‡∏ä‡∏ó‡∏Å‡∏•‡∏∏‡πà‡∏° - ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
              const since = new Date(Date.now() - 24 * 60 * 60 * 1000);
              const result = await this.fileService.getGroupFiles(groupId, { startDate: since });
              files = result.files || [];
            }
            
            const group = { 
              id: source.type === 'user' ? userId : groupId, 
              lineGroupId: source.type === 'user' ? `personal_${userId}` : groupId, 
              name: source.type === 'user' ? '‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß' : '‡∏Å‡∏•‡∏∏‡πà‡∏°' 
            };
            
            const submitConfirmationCard = FlexMessageTemplateService.createSubmitConfirmationCard(
              task, 
              group, 
              files.length, 
              files.map((f: any) => f.originalName)
            );
            await this.lineService.replyMessage(replyToken, submitConfirmationCard);
          } catch (err: any) {
            await this.safeReplyError(replyToken, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏î‡πâ: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
          }
          break;
        }

        case 'approve_task': {
          const taskId2 = params.get('taskId');
          if (taskId2) {
            try {
              await this.taskService.completeTask(taskId2, userId);
              await this.lineService.replyMessage(replyToken, '‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
            } catch (err: any) {
              await this.safeReplyError(replyToken, `‚ùå ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
            }
          }
          break;
        }

        case 'approve_review': {
          const taskId = params.get('taskId');
          if (taskId) {
            try {
              await this.taskService.approveReview(taskId, userId);
              await this.lineService.replyMessage(replyToken, '‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
            } catch (err: any) {
              await this.safeReplyError(replyToken, `‚ùå ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
            }
          }
          break;
        }

        case 'approve_completion': {
          const taskId = params.get('taskId');
          if (taskId) {
            try {
              await this.taskService.approveCompletion(taskId, userId);
              await this.lineService.replyMessage(replyToken, '‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
            } catch (err: any) {
              await this.safeReplyError(replyToken, `‚ùå ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
            }
          }
          break;
        }

        case 'submit_task': {
          const taskId = params.get('taskId');
          if (taskId) {
            try {
              const user = await this.userService.findByLineUserId(userId);
              if (user) {
                const task = await this.taskService.getTaskById(taskId);
                const personalGroupId = user.id;
                const since = new Date(Date.now() - 24 * 60 * 60 * 1000);
                const { files } = await this.fileService.getGroupFiles(personalGroupId, { startDate: since });
                
                // ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
                const confirmationCard = FlexMessageTemplateService.createTaskSubmissionConfirmationCard(task, files, user);
                await this.lineService.replyMessage(replyToken, confirmationCard);
              }
            } catch (err: any) {
              await this.safeReplyError(replyToken, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
            }
          } else {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ taskId ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            try {
              const user = await this.userService.findByLineUserId(userId);
              if (user) {
                // ‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á (‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
                const allTasks = await this.taskService.getUserTasks(user.id, ['pending', 'in_progress', 'overdue']);
                const personalGroupId = user.id;
                const since = new Date(Date.now() - 24 * 60 * 60 * 1000);
                const { files } = await this.fileService.getGroupFiles(personalGroupId, { startDate: since });
                
                if (allTasks.length > 0) {
                  // ‡πÅ‡∏¢‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                  const pendingTasks = allTasks.filter(task => task.status === 'pending');
                  const inProgressTasks = allTasks.filter(task => task.status === 'in_progress');
                  const overdueTasks = allTasks.filter(task => task.status === 'overdue');
                  
                  const allTasksCard = FlexMessageTemplateService.createAllPersonalTasksCard(allTasks, files, user, overdueTasks);
                  await this.lineService.replyMessage(replyToken, allTasksCard);
                } else {
                  await this.lineService.replyMessage(replyToken, '‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞');
                }
              }
            } catch (err: any) {
              await this.safeReplyError(replyToken, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
            }
          }
          break;
        }

        case 'reject_task': {
          const taskId = params.get('taskId');
          const extensionDays = parseInt(params.get('extensionDays') || '3');
          if (taskId) {
            try {
              await this.taskService.rejectTaskAndExtendDeadline(taskId, userId, extensionDays);
              await this.safeReplyError(replyToken, `‚ùå ‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ ${extensionDays} ‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
            } catch (err: any) {
              await this.safeReplyError(replyToken, `‚ùå ‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
            }
          }
          break;
        }

        case 'edit': {
          const taskId = params.get('taskId');
          const editGroupId = params.get('groupId') || groupId;
          
          if (taskId && editGroupId) {
            try {
              // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡∏≤‡∏ô
              const editUrl = `${config.baseUrl}/dashboard?groupId=${editGroupId}&taskId=${taskId}&action=edit&userId=${userId}`;
              
              // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡∏≤‡∏ô
              const message = `üîó ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡∏≤‡∏ô\n\n‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡∏≤‡∏ô:\n${editUrl}`;
              
              await this.lineService.replyMessage(replyToken, message);
            } catch (err: any) {
              await this.safeReplyError(replyToken, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
            }
          } else {
            await this.safeReplyError(replyToken, '‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
          }
          break;
        }

        case 'show_personal_tasks': {
          try {
            // ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
            const user = await this.userService.findByLineUserId(userId);
            if (user) {
              // ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (24 ‡∏ä‡∏°.)
              const personalGroupId = user.id; // ‡πÉ‡∏ä‡πâ user ID ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÄ‡∏õ‡πá‡∏ô UUID ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
              const since = new Date(Date.now() - 24 * 60 * 60 * 1000);
              const { files } = await this.fileService.getGroupFiles(personalGroupId, { startDate: since });
              
              // ‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á (‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
              const allTasks = await this.taskService.getUserTasks(user.id, ['pending', 'in_progress', 'overdue']);
              
              if (allTasks.length > 0) {
                if (allTasks.length === 1) {
                  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏ü‡∏•‡πå
                  const task = allTasks[0];
                  const taskWithFilesCard = FlexMessageTemplateService.createPersonalTaskWithFilesCard(task, files, user);
                  await this.lineService.replyMessage(replyToken, taskWithFilesCard);
                  
                  // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏° taskId
                  const fileListCard = FlexMessageTemplateService.createPersonalFileListCard(files, user, task.id);
                  await this.lineService.replyMessage(replyToken, fileListCard);
                } else {
                  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                  // ‡πÅ‡∏¢‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                  const pendingTasks = allTasks.filter(task => task.status === 'pending');
                  const inProgressTasks = allTasks.filter(task => task.status === 'in_progress');
                  const overdueTasks = allTasks.filter(task => task.status === 'overdue');
                  
                  const allTasksCard = FlexMessageTemplateService.createAllPersonalTasksCard(allTasks, files, user, overdueTasks);
                  await this.lineService.replyMessage(replyToken, allTasksCard);
                }
              } else {
                await this.lineService.replyMessage(replyToken, '‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞');
              }
            }
          } catch (err: any) {
            await this.safeReplyError(replyToken, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
          }
          break;
        }

        case 'show_personal_files': {
          try {
            // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
            const user = await this.userService.findByLineUserId(userId);
            if (user) {
              const personalGroupId = user.id; // ‡πÉ‡∏ä‡πâ user ID ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÄ‡∏õ‡πá‡∏ô UUID ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
              const since = new Date(Date.now() - 24 * 60 * 60 * 1000);
              const { files } = await this.fileService.getGroupFiles(personalGroupId, { startDate: since });
              
              const fileListCard = FlexMessageTemplateService.createPersonalFileListCard(files, user, undefined);
              await this.lineService.replyMessage(replyToken, fileListCard);
            }
          } catch (err: any) {
            await this.safeReplyError(replyToken, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
          }
          break;
        }

        case 'clear_personal_files': {
          try {
            // ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß (‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 24 ‡∏ä‡∏°.)
            const user = await this.userService.findByLineUserId(userId);
            if (user) {
              const personalGroupId = user.id; // ‡πÉ‡∏ä‡πâ user ID ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÄ‡∏õ‡πá‡∏ô UUID ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
              const since = new Date(Date.now() - 24 * 60 * 60 * 1000);
              const { files } = await this.fileService.getGroupFiles(personalGroupId, { startDate: since });
              
              // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 24 ‡∏ä‡∏°.
              const oldFiles = files.filter((f: any) => new Date(f.uploadedAt) < since);
              for (const file of oldFiles) {
                try {
                  await this.fileService.deleteFile(file.id);
                } catch (error) {
                  console.warn('Could not delete old file:', file.id, error);
                }
              }
              
              await this.lineService.replyMessage(replyToken, `üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤ ${oldFiles.length} ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞`);
            }
          } catch (err: any) {
            await this.safeReplyError(replyToken, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
          }
          break;
        }

        case 'submit_with_personal_files': {
          // ‡∏£‡∏ß‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö submit_task ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ flow ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
          const taskId = params.get('taskId');
          if (taskId) {
            try {
              const user = await this.userService.findByLineUserId(userId);
              if (user) {
                const task = await this.taskService.getTaskById(taskId);
                const personalGroupId = user.id;
                const since = new Date(Date.now() - 24 * 60 * 60 * 1000);
                const { files } = await this.fileService.getGroupFiles(personalGroupId, { startDate: since });
                
                // ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
                const confirmationCard = FlexMessageTemplateService.createTaskSubmissionConfirmationCard(task, files, user);
                await this.lineService.replyMessage(replyToken, confirmationCard);
              }
            } catch (err: any) {
              await this.safeReplyError(replyToken, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
            }
          } else {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ taskId ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á
            try {
              const user = await this.userService.findByLineUserId(userId);
              if (user) {
                // ‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á (‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
                const allTasks = await this.taskService.getUserTasks(user.id, ['pending', 'in_progress', 'overdue']);
                const personalGroupId = user.id;
                const since = new Date(Date.now() - 24 * 60 * 60 * 1000);
                const { files } = await this.fileService.getGroupFiles(personalGroupId, { startDate: since });
                
                if (allTasks.length > 0) {
                  // ‡πÅ‡∏¢‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                  const pendingTasks = allTasks.filter(task => task.status === 'pending');
                  const inProgressTasks = allTasks.filter(task => task.status === 'in_progress');
                  const overdueTasks = allTasks.filter(task => task.status === 'overdue');
                  
                  const allTasksCard = FlexMessageTemplateService.createAllPersonalTasksCard(allTasks, files, user, overdueTasks);
                  await this.lineService.replyMessage(replyToken, allTasksCard);
                } else {
                  await this.lineService.replyMessage(replyToken, '‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞');
                }
              }
            } catch (err: any) {
              await this.safeReplyError(replyToken, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
            }
          }
          break;
        }



        case 'show_all_personal_tasks': {
          try {
            // ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á
            const user = await this.userService.findByLineUserId(userId);
            if (user) {
              const personalGroupId = user.id;
              const since = new Date(Date.now() - 24 * 60 * 60 * 1000);
              const { files } = await this.fileService.getGroupFiles(personalGroupId, { startDate: since });
              
              // ‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á (‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
              const allTasks = await this.taskService.getUserTasks(user.id, ['pending', 'in_progress', 'overdue']);
              if (allTasks.length > 0) {
                // ‡πÅ‡∏¢‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                const pendingTasks = allTasks.filter(task => task.status === 'pending');
                const inProgressTasks = allTasks.filter(task => task.status === 'in_progress');
                const overdueTasks = allTasks.filter(task => task.status === 'overdue');
                
                const allTasksCard = FlexMessageTemplateService.createAllPersonalTasksCard(allTasks, files, user, overdueTasks);
                await this.lineService.replyMessage(replyToken, allTasksCard);
              } else {
                await this.lineService.replyMessage(replyToken, '‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞');
              }
            }
          } catch (err: any) {
            await this.safeReplyError(replyToken, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
          }
          break;
        }

        case 'show_more_personal_tasks': {
          try {
            // ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏á‡∏≤‡∏ô)
            const user = await this.userService.findByLineUserId(userId);
            if (user) {
              const personalGroupId = user.id;
              const since = new Date(Date.now() - 24 * 60 * 60 * 1000);
              const { files } = await this.fileService.getGroupFiles(personalGroupId, { startDate: since });
              
              // ‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á (‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
              const allTasks = await this.taskService.getUserTasks(user.id, ['pending', 'in_progress', 'overdue']);
              if (allTasks.length > 5) {
                const remainingTasks = allTasks.slice(5);
                // ‡πÅ‡∏¢‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                const pendingTasks = remainingTasks.filter(task => task.status === 'pending');
                const inProgressTasks = remainingTasks.filter(task => task.status === 'in_progress');
                const overdueTasks = remainingTasks.filter(task => task.status === 'overdue');
                
                const moreTasksCard = FlexMessageTemplateService.createAllPersonalTasksCard(remainingTasks, files, user, overdueTasks);
                await this.lineService.replyMessage(replyToken, moreTasksCard);
              } else {
                await this.lineService.replyMessage(replyToken, '‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞');
              }
            }
          } catch (err: any) {
            await this.safeReplyError(replyToken, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
          }
          break;
        }

        case 'show_task_files': {
          const taskId = params.get('taskId');
          const groupId = params.get('groupId');
          try {
            if (taskId && groupId) {
              // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
              const task = await this.taskService.getTaskById(taskId);
              
              // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡πà‡∏≤‡∏á‡πÜ
              let files = await this.fileService.getTaskFiles(taskId);

              // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á Task (attachedFiles)
              if (files.length === 0 && task && task.attachedFiles) {
                files = task.attachedFiles;
              }

              // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° taskId (‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå)
              if (files.length === 0) {
                const allGroupFiles = await this.fileService.getGroupFiles(groupId, {});
                files = allGroupFiles.files.filter(file => 
                  file.linkedTasks && file.linkedTasks.some((t: any) => t.id === taskId)
                );
              }

              // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏µ‡∏Å ‡πÉ‡∏´‡πâ fallback ‡πÑ‡∏õ‡∏î‡∏π‡∏à‡∏≤‡∏Å workflow.submissions ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏î‡∏∂‡∏á‡∏ï‡∏≤‡∏° fileIds)
              if (files.length === 0 && task && (task as any).workflow && Array.isArray((task as any).workflow.submissions)) {
                const submissions: any[] = (task as any).workflow.submissions;
                const latestSubmission = submissions
                  .slice()
                  .sort((a, b) => new Date(b.submittedAt).getTime() - new Date(a.submittedAt).getTime())[0];
                if (latestSubmission && Array.isArray(latestSubmission.fileIds) && latestSubmission.fileIds.length > 0) {
                  try {
                    files = await this.fileService.getFilesByIds(latestSubmission.fileIds);
                  } catch (e) {
                    console.warn('Could not load files from workflow submissions:', e);
                  }
                }
              }
              
              console.log(`üîç Debug: Task ${taskId}, Found ${files.length} files`);
              
              if (task && files.length > 0) {
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö categorized
                const filesByType = await this.fileService.getTaskFilesByType(taskId);
                const taskFilesCard = FlexMessageTemplateService.createTaskFilesCategorizedCard(task, filesByType, { id: groupId });
                await this.lineService.replyMessage(replyToken, taskFilesCard);
              } else if (task) {
                await this.lineService.replyMessage(replyToken, `üìã ‡∏á‡∏≤‡∏ô "${task.title}" ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏Ñ‡πà‡∏∞`);
              } else {
                await this.lineService.replyMessage(replyToken, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
              }
            } else {
              await this.lineService.replyMessage(replyToken, '‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
            }
          } catch (err: any) {
            console.error('‚ùå Error in show_task_files:', err);
            await this.safeReplyError(replyToken, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
          }
          break;
        }
          break;

        case 'link_file':
          const fileId = params.get('fileId');
          if (fileId) {
            const tasks = await this.taskService.getActiveTasks(groupId);
            // TODO: ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
          }
          break;

        case 'link_files': {
          const fileIdsParam = params.get('fileIds');
          if (fileIdsParam) {
            const fileIds = fileIdsParam.split(',').filter(Boolean);
            const tasks = await this.taskService.getActiveTasks(groupId);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            const taskButtons = tasks.slice(0, 5).map((task: any) => 
              FlexMessageDesignSystem.createButton(
                `${task.title} (${task.id.substring(0, 8)})`,
                'postback',
                `action=link_files_to_task&taskId=${task.id}&fileIds=${fileIds.join(',')}`,
                'secondary'
              )
            );

            const footerButtons = [
              FlexMessageDesignSystem.createButton(
                '‡πÑ‡∏°‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô',
                'postback',
                `action=no_link_files&fileIds=${fileIds.join(',')}`,
                'primary'
              )
            ];

            const flexMessage = FlexMessageDesignSystem.createStandardTaskCard(
              'üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏π‡∏Å‡πÑ‡∏ü‡∏•‡πå',
              'üìã',
              FlexMessageDesignSystem.colors.primary,
              [
                FlexMessageDesignSystem.createText(`‡πÑ‡∏ü‡∏•‡πå ${fileIds.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`, 'sm', FlexMessageDesignSystem.colors.textSecondary),
                ...taskButtons
              ],
              footerButtons,
              'extraLarge'
            );
            
            await this.lineService.replyMessage(replyToken, flexMessage as any);
          }
          break;
        }

        case 'link_files_to_task': {
          const taskId = params.get('taskId');
          const fileIdsParam = params.get('fileIds');
          if (taskId && fileIdsParam) {
            const fileIds = fileIdsParam.split(',').filter(Boolean);
            try {
              // ‡∏ú‡∏π‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô
              for (const fileId of fileIds) {
                await this.fileService.linkFileToTask(fileId, taskId);
              }
              await this.lineService.replyMessage(replyToken, '‚úÖ ‡∏ú‡∏π‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
            } catch (err: any) {
              await this.safeReplyError(replyToken, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ú‡∏π‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
            }
          }
          break;
        }

        case 'no_link_files': {
          const fileIdsParam = params.get('fileIds');
          if (fileIdsParam) {
            await this.lineService.replyMessage(replyToken, '‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô');
          }
          break;
        }

        case 'view_saved_files': {
          const fileIdsParam = params.get('fileIds');
          if (fileIdsParam) {
            const fileIds = fileIdsParam.split(',').filter(Boolean);
            // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß
            let response = 'üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß:\n\n';
            for (const fileId of fileIds) {
              try {
                const file = await this.fileService.getFilesByIds([fileId]);
                if (file && file.length > 0) {
                  const fileData = file[0];
                  response += `üìÑ ${fileData.originalName}\n`;
                  response += `üì¶ ${this.formatFileSize(fileData.size)}\n`;
                  response += `üë§ ${fileData.uploadedByUser?.displayName || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}\n`;
                  if (fileData.linkedTasks && fileData.linkedTasks.length > 0) {
                    response += `üìã ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô: ${fileData.linkedTasks[0].title}\n`;
                  }
                  response += `\n`;
                }
              } catch (error) {
                // ‡∏•‡∏î‡∏Å‡∏≤‡∏£ logging ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô rate limit
                // console.error('Error getting file:', error);
              }
            }
            await this.lineService.replyMessage(replyToken, response);
          }
          break;
        }







        case 'view_details': {
          const taskId = params.get('taskId');
          if (taskId) {
            try {
              // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô
              const taskDetailUrl = `${config.baseUrl}/dashboard/task/${taskId}`;
              const message = `üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô\n\nüîó ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà:\n${taskDetailUrl}`;
              
              await this.lineService.replyMessage(replyToken, message);
            } catch (err: any) {
              await this.safeReplyError(replyToken, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
            }
          }
          break;
        }

        case 'request_extension': {
          const taskId = params.get('taskId');
          const groupId = params.get('groupId');
          
          if (taskId && groupId) {
            try {
              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏ß‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
              const task = await this.taskService.getTaskById(taskId);
              if (!task) {
                await this.safeReplyError(replyToken, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
                return;
              }

              const taskCreatedAt = new Date(task.createdAt);
              const oneDayLater = new Date(taskCreatedAt.getTime() + 24 * 60 * 60 * 1000);
              const now = new Date();

              if (now >= oneDayLater) {
                await this.lineService.replyMessage(replyToken, '‚ùå ‡πÄ‡∏•‡∏¢ 1 ‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ');
                return;
              }

              // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ç‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô
              const creator = await this.userService.findById(task.createdBy);
              if (creator && creator.lineUserId) {
                const extensionCard = await this.createExtensionRequestCard(task, groupId, userId);
                await this.lineService.pushMessage(creator.lineUserId, extensionCard);
                
                await this.lineService.replyMessage(replyToken, 
                  `‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n\n` +
                  `üìã ‡∏á‡∏≤‡∏ô: ${task.title}\n` +
                  `üë§ ‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á: ${creator.displayName}\n\n` +
                  `‚è∞ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô`
                );
              } else {
                await this.safeReplyError(replyToken, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô');
              }
            } catch (err: any) {
              await this.safeReplyError(replyToken, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
            }
          } else {
            await this.safeReplyError(replyToken, '‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
          }
          break;
        }

        case 'reject_extension': {
          const taskId = params.get('taskId');
          const requesterId = params.get('requesterId');
          
          if (taskId && requesterId) {
            try {
              const task = await this.taskService.getTaskById(taskId);
              if (!task) {
                await this.safeReplyError(replyToken, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
                return;
              }

              // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠
              const requester = await this.userService.findByLineUserId(requesterId);
              if (requester && requester.lineUserId) {
                // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
                await this.notificationService.sendExtensionRejectedNotification(
                  task as any, 
                  requester as any
                );
              }

              await this.lineService.replyMessage(replyToken, '‚úÖ ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß');
            } catch (err: any) {
              await this.safeReplyError(replyToken, `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏î‡πâ: ${err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`);
            }
          } else {
            await this.safeReplyError(replyToken, '‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
          }
          break;
        }

        default:
          console.log('‚ÑπÔ∏è Unhandled postback action:', action);
      }

    } catch (error) {
      console.error('‚ùå Error handling postback:', error);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö replyToken ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      await this.safeReplyError(replyToken, '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
   */
  private async safeReplyError(replyToken: string, errorMessage: string): Promise<void> {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö replyToken
      if (!replyToken || replyToken.trim() === '') {
        console.warn('‚ö†Ô∏è No valid replyToken to send error message');
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
      if (!errorMessage || errorMessage.trim() === '') {
        errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà';
      }

      // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤
      if (errorMessage.length > 1000) {
        errorMessage = errorMessage.substring(0, 997) + '...';
      }

      await this.lineService.replyMessage(replyToken, errorMessage);
    } catch (lineError) {
      console.error('‚ùå Failed to send error message to LINE:', lineError);
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°
   */
  private async handleJoinEvent(event: WebhookEvent): Promise<void> {
    if (event.source.type === 'group') {
      const groupId = event.source.groupId!;
      
      const welcomeMessage = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç‡∏≤‡∏ö‡∏≠‡∏ó ü§ñ
      
‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞

‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
1. ‡∏û‡∏¥‡∏°‡∏û‡πå "@‡πÄ‡∏•‡∏Ç‡∏≤ /setup" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå Dashboard ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
2. ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß
3. ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå "@‡πÄ‡∏•‡∏Ç‡∏≤ /whoami" ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå "‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡πÄ‡∏ß‡πá‡∏ö)" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á/‡∏≠‡∏µ‡πÄ‡∏°‡∏•/‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤

‡∏û‡∏¥‡∏°‡∏û‡πå "@‡πÄ‡∏•‡∏Ç‡∏≤ /help" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡πà‡∏∞ ‚ú®`;

      await this.lineService.pushMessage(groupId, welcomeMessage);
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
   */
  private async handleLeaveEvent(event: WebhookEvent): Promise<void> {
    if (event.source.type === 'group') {
      const groupId = event.source.groupId!;
      
      // TODO: ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô inactive
      await this.userService.deactivateGroup(groupId);
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
   */
  private async handleMemberJoinedEvent(event: WebhookEvent): Promise<void> {
    // TODO: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
   */
  private async handleMemberLeftEvent(event: WebhookEvent): Promise<void> {
    // TODO: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏î‡∏π‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
   */
  private async handlePersonalTaskRequest(event: MessageEvent): Promise<void> {
    try {
      const { source, replyToken } = event;
      const userId = source.userId!;

      // ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
      const userTasks = await this.taskService.getUserIncompleteTasks(userId);
      
      if (userTasks.length === 0) {
        await this.lineService.replyMessage(event.replyToken!, 
          'üìã ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞\n\nüí° ‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà');
        return;
      }

      // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°
      const tasksByGroup = this.groupTasksByGroup(userTasks);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const flexMessage = this.createPersonalTasksFlexMessage(tasksByGroup);
      
      await this.lineService.replyMessage(event.replyToken!, flexMessage);
      
          } catch (error) {
        console.error('‚ùå Error handling personal task request:', error);
        await this.lineService.replyMessage(event.replyToken!, 
          '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°
   */
  private groupTasksByGroup(tasks: any[]): { [groupId: string]: { groupName: string; tasks: any[] } } {
    const grouped: { [groupId: string]: { groupName: string; tasks: any[] } } = {};
    
    for (const task of tasks) {
      const groupId = task.groupId;
      if (!grouped[groupId]) {
        // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏£‡∏∑‡∏≠ fallback ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        const fallbackName = groupId.length > 8 ? `‡∏Å‡∏•‡∏∏‡πà‡∏° ${groupId.substring(0, 8)}` : `‡∏Å‡∏•‡∏∏‡πà‡∏° ${groupId}`;
        grouped[groupId] = {
          groupName: task.group?.name || fallbackName,
          tasks: []
        };
      }
      grouped[groupId].tasks.push(task);
    }
    
    return grouped;
  }

      /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
   */
  private createPersonalTasksFlexMessage(tasksByGroup: { [groupId: string]: { groupName: string; tasks: any[] } }): any {
    const groupEntries = Object.entries(tasksByGroup);
    
    const content: any[] = [
      FlexMessageDesignSystem.createText(
        `üìã ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (${Object.values(tasksByGroup).reduce((total, group) => total + group.tasks.length, 0)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`,
        'lg',
        FlexMessageDesignSystem.colors.textPrimary,
        'bold',
        true
      ),
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô
      FlexMessageDesignSystem.createText(
        '‚è≥ ‡∏£‡∏≠‡∏ó‡∏≥ | üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥ | ‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î',
        'xs',
        FlexMessageDesignSystem.colors.textSecondary,
        undefined,
        true
      )
    ];

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
    for (const [groupId, groupData] of groupEntries) {
      // ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° - ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏£‡∏¥‡∏á
      content.push(
        FlexMessageDesignSystem.createText(
          `üè∑Ô∏è ${groupData.groupName}`,
          'md',
          FlexMessageDesignSystem.colors.primary,
          'bold',
          true
        )
      );

      // ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
      for (const task of groupData.tasks.slice(0, 10)) { // ‡πÅ‡∏™‡∏î‡∏á 10 ‡∏á‡∏≤‡∏ô‡πÅ‡∏£‡∏Å
        const statusEmoji = this.getTaskStatusEmoji(task.status);
        const dueDate = task.dueTime ? moment(task.dueTime).format('DD/MM HH:mm') : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≥‡∏´‡∏ô‡∏î';
        
        // ‡πÉ‡∏ä‡πâ "|" ‡∏Ç‡∏µ‡∏î‡∏Ñ‡∏±‡πà‡∏ô‡∏ö‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô
        content.push(
          FlexMessageDesignSystem.createText(
            `${statusEmoji} ${task.title} | ‚è∞ ${dueDate}`,
            'sm',
            FlexMessageDesignSystem.colors.textPrimary
          )
        );
      }

              // ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        if (groupData.tasks.length > 10) {
          content.push(
            FlexMessageDesignSystem.createText(
              `... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${groupData.tasks.length - 10} ‡∏á‡∏≤‡∏ô`,
              'xs',
              FlexMessageDesignSystem.colors.textSecondary,
              undefined,
              true
            )
          );
        }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
      if (groupEntries.indexOf([groupId, groupData]) < groupEntries.length - 1) {
        content.push({
          type: 'separator',
          margin: 'lg'
        });
      }
    }

    // ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const buttons = [
      FlexMessageDesignSystem.createButton(
        '‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö',
        'uri',
        `${config.baseUrl}/dashboard/my-tasks`,
        'primary'
      )
    ];

    return FlexMessageDesignSystem.createStandardTaskCard(
      'üìã ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
      'üìã',
      FlexMessageDesignSystem.colors.primary,
      content,
      buttons,
      'extraLarge'
    );
  }

  /**
   * ‡πÑ‡∏î‡πâ emoji ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô
   */
  private getTaskStatusEmoji(status: string): string {
    switch (status) {
      case 'pending': return '‚è≥';
      case 'in_progress': return 'üîÑ';
      case 'submitted': return 'üì§';
      case 'reviewed': return 'üëÄ';
      default: return 'üìã';
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á User record (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß)
   */
  private async ensureUserExists(userId: string): Promise<void> {
    try {
      console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á User record ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß: ${userId}`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user
      let user = await this.userService.findByLineUserId(userId);
      if (!user) {
        try {
          const profile = await this.lineService.getUserProfile(userId);
          user = await this.userService.createUser({
            lineUserId: userId,
            displayName: profile.displayName
          });
          console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß: ${profile.displayName}`);
        } catch (error: any) {
          if (error.status === 403) {
            console.warn('üö´ ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á profile ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏ó‡∏ô)');
            user = await this.userService.createUser({
              lineUserId: userId,
              displayName: `User ${userId.substring(0, 8)}`
            });
            console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô: ${user.displayName}`);
          } else {
            throw error;
          }
        }
      } else {
        console.log(`‚ÑπÔ∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß: ${user.displayName}`);

        // ‡∏´‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö" ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å LINE
        const unknownNames = ['‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö', '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠', ''];
        if (unknownNames.includes(user.displayName)) {
          try {
            const profile = await this.lineService.getUserProfile(userId);
            if (profile.displayName && !unknownNames.includes(profile.displayName)) {
              await this.userService.updateUser(user.id, {
                displayName: profile.displayName,
                realName: profile.displayName
              });
              console.log(`üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö' ‡πÄ‡∏õ‡πá‡∏ô ${profile.displayName}`);
            }
          } catch (error) {
            console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å LINE API ‡πÑ‡∏î‡πâ:', error);
          }
        }
      }
    } catch (error) {
      console.error('‚ùå Error ensuring user exists:', error);
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á User/Group record
   */
  private async ensureUserAndGroup(userId: string, groupId: string): Promise<void> {
    try {
      console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á User/Group record: ${userId} ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ${groupId}`);
      
      // ‡πÉ‡∏ä‡πâ LineService.checkAndSaveNewMember ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
      const result = await this.lineService.checkAndSaveNewMember(groupId, userId);
      
      if (result.isNewMember) {
        console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${result.memberInfo?.displayName || userId}`);
      } else {
        console.log(`‚ÑπÔ∏è ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß: ${userId}`);
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      let group = await this.userService.findGroupByLineId(groupId);
      if (!group) {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å LINE API ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        const groupInfo = await this.lineService.getGroupInformation(groupId);
        
        group = await this.userService.createGroup({
          lineGroupId: groupId,
          name: groupInfo.name
        });
        console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà: ${groupInfo.name} (${groupInfo.source})`);
      }

    } catch (error) {
      console.error('‚ùå Error ensuring user and group:', error);
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
   */
  private async checkAndSaveNewMemberFromMessage(groupId: string, userId: string): Promise<void> {
    try {
      console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${userId} ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ${groupId}`);
      
      // ‡πÉ‡∏ä‡πâ LineService.checkAndSaveNewMember ‡πÅ‡∏ó‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
      const result = await this.lineService.checkAndSaveNewMember(groupId, userId);
      
      if (result.isNewMember) {
        console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${result.memberInfo?.displayName || userId}`);
      } else {
        console.log(`‚ÑπÔ∏è ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß: ${userId}`);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Failed to check/save new member:', error);
    }
  }

  private getMimeTypeFromFileName(fileName: string): string {
    const ext = fileName.split('.').pop()?.toLowerCase();
    const mimeMap: { [key: string]: string } = {
      // Images
      'jpg': 'image/jpeg',
      'jpeg': 'image/jpeg',
      'png': 'image/png',
      'gif': 'image/gif',
      'webp': 'image/webp',
      'bmp': 'image/bmp',
      'tiff': 'image/tiff',
      'svg': 'image/svg+xml',
      'ico': 'image/x-icon',
      
      // Videos
      'mp4': 'video/mp4',
      'mov': 'video/quicktime',
      'avi': 'video/x-msvideo',
      'wmv': 'video/x-ms-wmv',
      'webm': 'video/webm',
      'flv': 'video/x-flv',
      '3gp': 'video/3gpp',
      
      // Audio
      'mp3': 'audio/mpeg',
      'wav': 'audio/wav',
      'ogg': 'audio/ogg',
      'aac': 'audio/aac',
      'flac': 'audio/flac',
      'm4a': 'audio/mp4',
      'wma': 'audio/x-ms-wma',
      
      // Documents
      'pdf': 'application/pdf',
      'doc': 'application/msword',
      'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'xls': 'application/vnd.ms-excel',
      'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      'ppt': 'application/vnd.ms-powerpoint',
      'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
      'odt': 'application/vnd.oasis.opendocument.text',
      'ods': 'application/vnd.oasis.opendocument.spreadsheet',
      'odp': 'application/vnd.oasis.opendocument.presentation',
      
      // Text
      'txt': 'text/plain',
      'csv': 'text/csv',
      'html': 'text/html',
      'css': 'text/css',
      'js': 'text/javascript',
      'xml': 'text/xml',
      'rtf': 'text/rtf',
      
      // Development
      'json': 'application/json',
      'ts': 'application/typescript',
      'py': 'text/x-python',
      'java': 'text/x-java-source',
      'c': 'text/x-c',
      'cpp': 'text/x-c++',
      'sh': 'application/x-sh',
      
      // Archives
      'zip': 'application/zip',
      'rar': 'application/x-rar-compressed',
      '7z': 'application/x-7z-compressed',
      'tar': 'application/x-tar',
      'gz': 'application/gzip',
      'bz2': 'application/x-bzip2',
      
      // Design
      'ai': 'application/vnd.adobe.illustrator',
      'psd': 'image/vnd.adobe.photoshop',
      'indd': 'application/x-indesign',
      'fig': 'application/x-figma',
      'sketch': 'application/x-sketch',
      
      // CAD
      'dwg': 'application/vnd.autodesk.dwg',
      'dwf': 'application/vnd.autodesk.dwf',
      
      // 3D
      'obj': 'model/obj',
      'fbx': 'model/fbx',
      '3mf': 'model/3mf',
      'blend': 'application/x-blender',
      
      // Fonts
      'ttf': 'font/ttf',
      'otf': 'font/otf',
      'woff': 'font/woff',
      'woff2': 'font/woff2',
      
      // E-books
      'epub': 'application/epub+zip',
      'mobi': 'application/x-mobipocket-ebook',
      
      // Database
      'sqlite': 'application/x-sqlite3',
      'mdb': 'application/vnd.ms-access',
      
      // Custom formats
      'dvg': 'application/dvg' // Your custom .dvg format
    };
    return mimeMap[ext || ''] || 'application/octet-stream';
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
   */
  private formatFileSize(bytes: number): string {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ç‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
   */
  private async createExtensionRequestCard(task: any, groupId: string, requesterId: string): Promise<any> {
    const requester = await this.userService.findByLineUserId(requesterId);
    const dueDate = moment(task.dueTime).tz(config.app.defaultTimezone).format('DD/MM/YYYY HH:mm');
    
    const content = [
      FlexMessageDesignSystem.createText(`üìã ‡∏á‡∏≤‡∏ô: ${task.title}`, 'sm', FlexMessageDesignSystem.colors.textPrimary, 'bold'),
      FlexMessageDesignSystem.createText(`üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°: ${dueDate}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      FlexMessageDesignSystem.createText(`üë§ ‡∏ú‡∏π‡πâ‡∏Ç‡∏≠: ${requester?.displayName || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}`, 'sm', FlexMessageDesignSystem.colors.textPrimary),
      FlexMessageDesignSystem.createText(`üìù ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ‡∏Ç‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô`, 'sm', FlexMessageDesignSystem.colors.textSecondary),
      FlexMessageDesignSystem.createSeparator('medium'),
      FlexMessageDesignSystem.createText('üí° ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà', 'xs', FlexMessageDesignSystem.colors.textSecondary)
    ];

    const buttons = [
      FlexMessageDesignSystem.createButton(
        '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà', 
        'uri', 
        `${config.baseUrl}/dashboard?groupId=${groupId}&taskId=${task.id}&action=approve_extension`, 
        'primary'
      ),
      FlexMessageDesignSystem.createButton(
        '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò', 
        'postback', 
        `action=reject_extension&taskId=${task.id}&requesterId=${requesterId}`, 
        'secondary'
      )
    ];

    return FlexMessageDesignSystem.createStandardTaskCard(
      '‚è∞ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤',
      '‚è∞',
      FlexMessageDesignSystem.colors.warning,
      content,
      buttons,
      'extraLarge'
    );
  }
}

const webhookController = new WebhookController();

// Routes
webhookRouter.post('/', (req, res) => webhookController.handleWebhook(req, res));
