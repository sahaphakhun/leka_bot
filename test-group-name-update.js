#!/usr/bin/env node

/**
 * ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á API endpoint ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏¢‡πà‡∏≠
 */

const { updateGroupNames } = require('./update-group-names');

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
const testCases = [
  {
    name: '‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏¢‡πà‡∏≠‡∏™‡∏±‡πâ‡∏ô',
    oldName: '‡∏Å‡∏•‡∏∏‡πà‡∏° C1467a3d',
    lineGroupId: 'C1467a3dcec992659e48f958415757d5e',
    expected: true
  },
  {
    name: '‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏¢‡πà‡∏≠‡∏¢‡∏≤‡∏ß',
    oldName: '‡∏Å‡∏•‡∏∏‡πà‡∏° C1467a3dcec992659e48f958415757d5e',
    lineGroupId: 'C1467a3dcec992659e48f958415757d5e',
    expected: true
  },
  {
    name: '‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
    oldName: '‡∏ó‡∏µ‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö',
    lineGroupId: 'C1467a3dcec992659e48f958415757d5e',
    expected: false
  },
  {
    name: '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
    oldName: '[INACTIVE] 2024-01-01T00:00:00.000Z',
    lineGroupId: 'C1467a3dcec992659e48f958415757d5e',
    expected: true
  },
  {
    name: '‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß',
    oldName: '‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß',
    lineGroupId: 'personal_123456789',
    expected: true
  }
];

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏¢‡πà‡∏≠
function testAbbreviatedNameDetection() {
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏¢‡πà‡∏≠...\n');
  
  let passed = 0;
  let failed = 0;
  
  testCases.forEach((testCase, index) => {
    console.log(`üìã Test Case ${index + 1}: ${testCase.name}`);
    console.log(`   Old Name: "${testCase.oldName}"`);
    console.log(`   Line Group ID: "${testCase.lineGroupId}"`);
    console.log(`   Expected: ${testCase.expected}`);
    
    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö (‡πÉ‡∏ä‡πâ regex patterns ‡∏à‡∏≤‡∏Å API Controller)
    const abbreviatedPatterns = [
      /^‡∏Å‡∏•‡∏∏‡πà‡∏° [A-Za-z0-9]{1,8}$/,
      /^‡∏Å‡∏•‡∏∏‡πà‡∏° [A-Za-z0-9]{8,}$/,
      /^\[INACTIVE\]/,
      /^Group /,
      /^‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß$/,
      /^personal_/
    ];
    
    const isAbbreviated = abbreviatedPatterns.some(pattern => pattern.test(testCase.oldName));
    const shortId = testCase.lineGroupId.length > 8 ? testCase.lineGroupId.substring(0, 8) : testCase.lineGroupId;
    const isIdAbbreviation = testCase.oldName.includes(shortId) || testCase.oldName.includes(testCase.lineGroupId);
    const result = isAbbreviated || isIdAbbreviation;
    
    console.log(`   Result: ${result}`);
    
    if (result === testCase.expected) {
      console.log('   ‚úÖ PASSED\n');
      passed++;
    } else {
      console.log('   ‚ùå FAILED\n');
      failed++;
    }
  });
  
  console.log(`üìä Test Results: ${passed} passed, ${failed} failed`);
  return { passed, failed };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
async function testAPIConnection() {
  console.log('\nüåê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API...\n');
  
  try {
    const response = await updateGroupNames();
    console.log('‚úÖ API Connection Test: PASSED');
    console.log(`üìä Response: ${JSON.stringify(response, null, 2)}`);
    return true;
  } catch (error) {
    console.log('‚ùå API Connection Test: FAILED');
    console.log(`   Error: ${error.message}`);
    return false;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö end-to-end
async function testEndToEnd() {
  console.log('\nüîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö end-to-end...\n');
  
  try {
    console.log('1Ô∏è‚É£ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API endpoint...');
    const response = await updateGroupNames();
    
    console.log('2Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response structure...');
    if (!response.success) {
      throw new Error('API response indicates failure');
    }
    
    if (!response.data || typeof response.data.total !== 'number') {
      throw new Error('Invalid response data structure');
    }
    
    console.log('3Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå...');
    console.log(`   Total groups: ${response.data.total}`);
    console.log(`   Updated: ${response.data.updated}`);
    console.log(`   Skipped: ${response.data.skipped}`);
    console.log(`   Errors: ${response.data.errors}`);
    
    if (response.data.details && response.data.details.length > 0) {
      console.log('\n4Ô∏è‚É£ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó:');
      response.data.details.forEach((detail, index) => {
        const status = detail.status === 'updated' ? '‚úÖ' : 
                     detail.status === 'skipped' ? '‚è≠Ô∏è' : '‚ùå';
        console.log(`   ${status} ${detail.groupId}: ${detail.oldName}${detail.newName ? ` ‚Üí ${detail.newName}` : ''}`);
      });
    }
    
    console.log('\n‚úÖ End-to-End Test: PASSED');
    return true;
    
  } catch (error) {
    console.log('\n‚ùå End-to-End Test: FAILED');
    console.log(`   Error: ${error.message}`);
    return false;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error
async function testErrorHandling() {
  console.log('\nüö® ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error...\n');
  
  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏î‡πâ‡∏ß‡∏¢ URL ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const originalUrl = process.env.API_BASE_URL;
    process.env.API_BASE_URL = 'http://invalid-url:9999';
    
    console.log('1Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö URL ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á...');
    try {
      await updateGroupNames();
      console.log('   ‚ùå Expected error but got success');
      return false;
    } catch (error) {
      console.log('   ‚úÖ Correctly caught connection error');
    }
    
    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ URL ‡πÄ‡∏î‡∏¥‡∏°
    if (originalUrl) {
      process.env.API_BASE_URL = originalUrl;
    } else {
      delete process.env.API_BASE_URL;
    }
    
    console.log('\n‚úÖ Error Handling Test: PASSED');
    return true;
    
  } catch (error) {
    console.log('\n‚ùå Error Handling Test: FAILED');
    console.log(`   Error: ${error.message}`);
    return false;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
async function runAllTests() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°\n');
  console.log('=' .repeat(50));
  
  const results = {
    abbreviatedDetection: false,
    apiConnection: false,
    endToEnd: false,
    errorHandling: false
  };
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏¢‡πà‡∏≠
  const detectionResult = testAbbreviatedNameDetection();
  results.abbreviatedDetection = detectionResult.failed === 0;
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
  results.apiConnection = await testAPIConnection();
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö end-to-end
  if (results.apiConnection) {
    results.endToEnd = await testEndToEnd();
  }
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error
  results.errorHandling = await testErrorHandling();
  
  // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  console.log('\n' + '=' .repeat(50));
  console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
  console.log('=' .repeat(50));
  
  Object.entries(results).forEach(([test, passed]) => {
    const status = passed ? '‚úÖ PASSED' : '‚ùå FAILED';
    const testName = test.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
    console.log(`${status} - ${testName}`);
  });
  
  const totalTests = Object.keys(results).length;
  const passedTests = Object.values(results).filter(Boolean).length;
  
  console.log(`\nüìà Overall: ${passedTests}/${totalTests} tests passed`);
  
  if (passedTests === totalTests) {
    console.log('üéâ All tests passed! System is ready for production.');
    process.exit(0);
  } else {
    console.log('‚ö†Ô∏è Some tests failed. Please check the issues above.');
    process.exit(1);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô
async function runSpecificTest(testName) {
  console.log(`üéØ Running specific test: ${testName}\n`);
  
  switch (testName) {
    case 'detection':
      testAbbreviatedNameDetection();
      break;
    case 'api':
      await testAPIConnection();
      break;
    case 'e2e':
      await testEndToEnd();
      break;
    case 'error':
      await testErrorHandling();
      break;
    default:
      console.log('‚ùå Unknown test name. Available tests: detection, api, e2e, error');
      process.exit(1);
  }
}

// Main execution
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.length > 0) {
    // ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô
    runSpecificTest(args[0]);
  } else {
    // ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    runAllTests();
  }
}

module.exports = {
  testAbbreviatedNameDetection,
  testAPIConnection,
  testEndToEnd,
  testErrorHandling,
  runAllTests
};
